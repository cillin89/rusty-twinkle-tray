pub mod Primitives;
#[doc(hidden)]
#[repr(transparent)]
pub struct IAnchorRequestedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAnchorRequestedEventArgs {
    type Vtable = IAnchorRequestedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IAnchorRequestedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAnchorRequestedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5175f55d_4785_5a72_b462_eb11e9bdf897,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAnchorRequestedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Anchor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetAnchor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AnchorCandidates: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBar(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBar {
    type Vtable = IAppBar_Vtbl;
}
impl ::core::clone::Clone for IAppBar {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBar {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x7b0fc253_86a5_4b43_9872_0b8a6234b74b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBar_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsOpen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsOpen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsSticky: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsSticky: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Opened: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveOpened: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub Closed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveClosed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBar2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBar2 {
    type Vtable = IAppBar2_Vtbl;
}
impl ::core::clone::Clone for IAppBar2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBar2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc3ab17b3_7ad7_4676_9910_7fe3f0e8e993,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBar2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ClosedDisplayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut AppBarClosedDisplayMode,
    ) -> ::windows_core::HRESULT,
    pub SetClosedDisplayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: AppBarClosedDisplayMode,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBar3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBar3 {
    type Vtable = IAppBar3_Vtbl;
}
impl ::core::clone::Clone for IAppBar3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBar3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x982b001f_752e_4e7a_b055_54802c9ea749,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBar3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TemplateSettings: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Opening: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveOpening: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub Closing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveClosing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBar4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBar4 {
    type Vtable = IAppBar4_Vtbl;
}
impl ::core::clone::Clone for IAppBar4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBar4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x94ebc8cd_0a64_4da3_bf43_f13100a46605,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBar4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LightDismissOverlayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut LightDismissOverlayMode,
    ) -> ::windows_core::HRESULT,
    pub SetLightDismissOverlayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: LightDismissOverlayMode,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarButton(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarButton {
    type Vtable = IAppBarButton_Vtbl;
}
impl ::core::clone::Clone for IAppBarButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarButton {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4459a451_69e8_440c_9896_4bb4f5f642d1,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarButton_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Label: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetLabel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub Icon: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetIcon: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarButton3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarButton3 {
    type Vtable = IAppBarButton3_Vtbl;
}
impl ::core::clone::Clone for IAppBarButton3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarButton3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0b282150_198b_4e84_8f1c_9f6a8ba267a7,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarButton3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LabelPosition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CommandBarLabelPosition,
    ) -> ::windows_core::HRESULT,
    pub SetLabelPosition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CommandBarLabelPosition,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarButton4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarButton4 {
    type Vtable = IAppBarButton4_Vtbl;
}
impl ::core::clone::Clone for IAppBarButton4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarButton4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x958fce6b_fd08_4414_8458_9d40866dc84e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarButton4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub KeyboardAcceleratorTextOverride: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetKeyboardAcceleratorTextOverride: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarButton5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarButton5 {
    type Vtable = IAppBarButton5_Vtbl;
}
impl ::core::clone::Clone for IAppBarButton5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarButton5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4096fc7f_1aec_4b0f_a031_ca8c4e06d2ed,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarButton5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TemplateSettings: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarButtonFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarButtonFactory {
    type Vtable = IAppBarButtonFactory_Vtbl;
}
impl ::core::clone::Clone for IAppBarButtonFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarButtonFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xbdbb1bb6_cb2e_4276_abd6_7935130510e0,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarButtonFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarButtonStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarButtonStatics {
    type Vtable = IAppBarButtonStatics_Vtbl;
}
impl ::core::clone::Clone for IAppBarButtonStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarButtonStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x7ccd13e6_5301_407f_874e_dc9160aa07af,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarButtonStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LabelProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IconProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsCompactProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarButtonStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarButtonStatics3 {
    type Vtable = IAppBarButtonStatics3_Vtbl;
}
impl ::core::clone::Clone for IAppBarButtonStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarButtonStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4d7bf314_2ede_4328_8906_752a1f27cdfa,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarButtonStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LabelPositionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsInOverflowProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DynamicOverflowOrderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarButtonStatics4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarButtonStatics4 {
    type Vtable = IAppBarButtonStatics4_Vtbl;
}
impl ::core::clone::Clone for IAppBarButtonStatics4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarButtonStatics4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1c0ae26a_c755_4fe6_a3b6_0e3394e952c0,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarButtonStatics4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub KeyboardAcceleratorTextOverrideProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarElementContainer(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarElementContainer {
    type Vtable = IAppBarElementContainer_Vtbl;
}
impl ::core::clone::Clone for IAppBarElementContainer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarElementContainer {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1d5ba067_a990_5dab_a9c3_e6be56642a1a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarElementContainer_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarElementContainerFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarElementContainerFactory {
    type Vtable = IAppBarElementContainerFactory_Vtbl;
}
impl ::core::clone::Clone for IAppBarElementContainerFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarElementContainerFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb506530e_8897_5d6f_a43e_f0586338d282,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarElementContainerFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarElementContainerStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarElementContainerStatics {
    type Vtable = IAppBarElementContainerStatics_Vtbl;
}
impl ::core::clone::Clone for IAppBarElementContainerStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarElementContainerStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xebbef840_c745_5a6f_8671_9a41eb2196e7,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarElementContainerStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsCompactProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsInOverflowProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DynamicOverflowOrderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarFactory {
    type Vtable = IAppBarFactory_Vtbl;
}
impl ::core::clone::Clone for IAppBarFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x614708d1_8e65_43cb_92d7_8eee17515f8d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarOverrides(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarOverrides {
    type Vtable = IAppBarOverrides_Vtbl;
}
impl ::core::clone::Clone for IAppBarOverrides {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarOverrides {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf003e4e2_7b0f_4f4a_970d_ae8a0eaa9b70,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarOverrides_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OnClosed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnOpened: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarOverrides3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarOverrides3 {
    type Vtable = IAppBarOverrides3_Vtbl;
}
impl ::core::clone::Clone for IAppBarOverrides3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarOverrides3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x412bbbc8_51d0_4b49_ab62_a3dd6bdcb298,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarOverrides3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OnClosing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnOpening: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarSeparator(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarSeparator {
    type Vtable = IAppBarSeparator_Vtbl;
}
impl ::core::clone::Clone for IAppBarSeparator {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarSeparator {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1b0795a1_1bc1_4d53_95ea_fb0a2cccc905,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarSeparator_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarSeparatorFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarSeparatorFactory {
    type Vtable = IAppBarSeparatorFactory_Vtbl;
}
impl ::core::clone::Clone for IAppBarSeparatorFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarSeparatorFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x05da25cd_f407_48de_8b50_ff87d1e2818f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarSeparatorFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarSeparatorStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarSeparatorStatics {
    type Vtable = IAppBarSeparatorStatics_Vtbl;
}
impl ::core::clone::Clone for IAppBarSeparatorStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarSeparatorStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x37f23484_5b35_4663_a75d_f2d50cb9c619,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarSeparatorStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsCompactProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarSeparatorStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarSeparatorStatics3 {
    type Vtable = IAppBarSeparatorStatics3_Vtbl;
}
impl ::core::clone::Clone for IAppBarSeparatorStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarSeparatorStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x36c753f9_7373_4e5e_9ba4_c3622a003c4e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarSeparatorStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsInOverflowProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DynamicOverflowOrderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarStatics {
    type Vtable = IAppBarStatics_Vtbl;
}
impl ::core::clone::Clone for IAppBarStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x79bb7e8d_dca9_4b5f_a448_37b13238ed76,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsOpenProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsStickyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarStatics2 {
    type Vtable = IAppBarStatics2_Vtbl;
}
impl ::core::clone::Clone for IAppBarStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x222355e9_0384_49de_8738_dfc9d409ac5d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ClosedDisplayModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarStatics4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarStatics4 {
    type Vtable = IAppBarStatics4_Vtbl;
}
impl ::core::clone::Clone for IAppBarStatics4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarStatics4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xba02082e_1165_4451_94b3_eb3ac73e4196,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarStatics4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LightDismissOverlayModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarToggleButton(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarToggleButton {
    type Vtable = IAppBarToggleButton_Vtbl;
}
impl ::core::clone::Clone for IAppBarToggleButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarToggleButton {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x2e914438_fd53_4b8d_858b_3644269f8e4d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarToggleButton_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Label: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetLabel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub Icon: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetIcon: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarToggleButton3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarToggleButton3 {
    type Vtable = IAppBarToggleButton3_Vtbl;
}
impl ::core::clone::Clone for IAppBarToggleButton3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarToggleButton3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xef9a85e5_16ff_4d72_b9e8_9b861eaf84a8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarToggleButton3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LabelPosition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CommandBarLabelPosition,
    ) -> ::windows_core::HRESULT,
    pub SetLabelPosition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CommandBarLabelPosition,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarToggleButton4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarToggleButton4 {
    type Vtable = IAppBarToggleButton4_Vtbl;
}
impl ::core::clone::Clone for IAppBarToggleButton4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarToggleButton4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb86b736e_3eaf_4751_a897_00029f1f6aca,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarToggleButton4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub KeyboardAcceleratorTextOverride: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetKeyboardAcceleratorTextOverride: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarToggleButton5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarToggleButton5 {
    type Vtable = IAppBarToggleButton5_Vtbl;
}
impl ::core::clone::Clone for IAppBarToggleButton5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarToggleButton5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9dca3357_c130_4fb6_a1e2_d2b348fe43be,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarToggleButton5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TemplateSettings: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarToggleButtonFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarToggleButtonFactory {
    type Vtable = IAppBarToggleButtonFactory_Vtbl;
}
impl ::core::clone::Clone for IAppBarToggleButtonFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarToggleButtonFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x028aa7d4_8f54_45a6_9f90_13605656d793,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarToggleButtonFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarToggleButtonStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarToggleButtonStatics {
    type Vtable = IAppBarToggleButtonStatics_Vtbl;
}
impl ::core::clone::Clone for IAppBarToggleButtonStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarToggleButtonStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xfe5aaf96_7929_4da1_aa67_cddf73a3e4b5,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarToggleButtonStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LabelProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IconProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsCompactProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarToggleButtonStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarToggleButtonStatics3 {
    type Vtable = IAppBarToggleButtonStatics3_Vtbl;
}
impl ::core::clone::Clone for IAppBarToggleButtonStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarToggleButtonStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xbd4c65bf_2edd_44d1_acd5_35c00e2f21bc,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarToggleButtonStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LabelPositionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsInOverflowProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DynamicOverflowOrderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAppBarToggleButtonStatics4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAppBarToggleButtonStatics4 {
    type Vtable = IAppBarToggleButtonStatics4_Vtbl;
}
impl ::core::clone::Clone for IAppBarToggleButtonStatics4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppBarToggleButtonStatics4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa478b984_e916_4137_bdbd_95bd46ff3ce6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppBarToggleButtonStatics4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub KeyboardAcceleratorTextOverrideProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAutoSuggestBox(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAutoSuggestBox {
    type Vtable = IAutoSuggestBox_Vtbl;
}
impl ::core::clone::Clone for IAutoSuggestBox {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAutoSuggestBox {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x103e9b13_3400_4a16_90b9_6912bf06974f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutoSuggestBox_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub MaxSuggestionListHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetMaxSuggestionListHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub IsSuggestionListOpen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsSuggestionListOpen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub TextMemberPath: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetTextMemberPath: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub Text: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub UpdateTextOnSelect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetUpdateTextOnSelect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub PlaceholderText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetPlaceholderText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub Header: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AutoMaximizeSuggestionArea: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAutoMaximizeSuggestionArea: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub TextBoxStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTextBoxStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SuggestionChosen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveSuggestionChosen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub TextChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveTextChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAutoSuggestBox2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAutoSuggestBox2 {
    type Vtable = IAutoSuggestBox2_Vtbl;
}
impl ::core::clone::Clone for IAutoSuggestBox2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAutoSuggestBox2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xaa87ddde_e679_45b2_a7c9_9aedc39db886,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutoSuggestBox2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub QueryIcon: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetQueryIcon: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub QuerySubmitted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveQuerySubmitted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAutoSuggestBox3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAutoSuggestBox3 {
    type Vtable = IAutoSuggestBox3_Vtbl;
}
impl ::core::clone::Clone for IAutoSuggestBox3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAutoSuggestBox3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9bbbfcef_f32d_402e_9009_05bdbaf6336e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutoSuggestBox3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LightDismissOverlayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut LightDismissOverlayMode,
    ) -> ::windows_core::HRESULT,
    pub SetLightDismissOverlayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: LightDismissOverlayMode,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAutoSuggestBox4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAutoSuggestBox4 {
    type Vtable = IAutoSuggestBox4_Vtbl;
}
impl ::core::clone::Clone for IAutoSuggestBox4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAutoSuggestBox4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc22df897_a3e8_5051_b3cc_b5f0f5262950,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutoSuggestBox4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Description: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetDescription: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAutoSuggestBoxQuerySubmittedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAutoSuggestBoxQuerySubmittedEventArgs {
    type Vtable = IAutoSuggestBoxQuerySubmittedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IAutoSuggestBoxQuerySubmittedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAutoSuggestBoxQuerySubmittedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x78dcb116_818a_4cb5_bca7_382ce6ddc90d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutoSuggestBoxQuerySubmittedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub QueryText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub ChosenSuggestion: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAutoSuggestBoxStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAutoSuggestBoxStatics {
    type Vtable = IAutoSuggestBoxStatics_Vtbl;
}
impl ::core::clone::Clone for IAutoSuggestBoxStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAutoSuggestBoxStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xee22c7f4_c15d_4ff3_8a94_f50dfdfbe89a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutoSuggestBoxStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub MaxSuggestionListHeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsSuggestionListOpenProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextMemberPathProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub UpdateTextOnSelectProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PlaceholderTextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AutoMaximizeSuggestionAreaProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextBoxStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAutoSuggestBoxStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAutoSuggestBoxStatics2 {
    type Vtable = IAutoSuggestBoxStatics2_Vtbl;
}
impl ::core::clone::Clone for IAutoSuggestBoxStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAutoSuggestBoxStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1cd297a8_8e6a_41ef_a95d_7157dc0c7106,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutoSuggestBoxStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub QueryIconProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAutoSuggestBoxStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAutoSuggestBoxStatics3 {
    type Vtable = IAutoSuggestBoxStatics3_Vtbl;
}
impl ::core::clone::Clone for IAutoSuggestBoxStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAutoSuggestBoxStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x2cead2dd_c4d5_4ab2_8a13_afddcf067c86,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutoSuggestBoxStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LightDismissOverlayModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAutoSuggestBoxStatics4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAutoSuggestBoxStatics4 {
    type Vtable = IAutoSuggestBoxStatics4_Vtbl;
}
impl ::core::clone::Clone for IAutoSuggestBoxStatics4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAutoSuggestBoxStatics4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd63efaae_b9df_58d8_a00a_dbfe9ffdedd0,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutoSuggestBoxStatics4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DescriptionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAutoSuggestBoxSuggestionChosenEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAutoSuggestBoxSuggestionChosenEventArgs {
    type Vtable = IAutoSuggestBoxSuggestionChosenEventArgs_Vtbl;
}
impl ::core::clone::Clone for IAutoSuggestBoxSuggestionChosenEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAutoSuggestBoxSuggestionChosenEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x396f7254_1ed5_4bc5_a060_655530bca6ba,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutoSuggestBoxSuggestionChosenEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectedItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAutoSuggestBoxTextChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAutoSuggestBoxTextChangedEventArgs {
    type Vtable = IAutoSuggestBoxTextChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IAutoSuggestBoxTextChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAutoSuggestBoxTextChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3a6f7254_1ed5_4bc5_a060_655530bca6ba,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutoSuggestBoxTextChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Reason: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut AutoSuggestionBoxTextChangeReason,
    ) -> ::windows_core::HRESULT,
    pub SetReason: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: AutoSuggestionBoxTextChangeReason,
    ) -> ::windows_core::HRESULT,
    pub CheckCurrent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAutoSuggestBoxTextChangedEventArgsStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAutoSuggestBoxTextChangedEventArgsStatics {
    type Vtable = IAutoSuggestBoxTextChangedEventArgsStatics_Vtbl;
}
impl ::core::clone::Clone for IAutoSuggestBoxTextChangedEventArgsStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAutoSuggestBoxTextChangedEventArgsStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xfef7772b_9f45_44db_8c27_bda3f933e7b5,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutoSuggestBoxTextChangedEventArgsStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ReasonProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBackClickEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IBackClickEventArgs {
    type Vtable = IBackClickEventArgs_Vtbl;
}
impl ::core::clone::Clone for IBackClickEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IBackClickEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x2ae6146c_477e_48c9_8830_2c464b7c7104,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IBackClickEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBitmapIcon(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IBitmapIcon {
    type Vtable = IBitmapIcon_Vtbl;
}
impl ::core::clone::Clone for IBitmapIcon {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IBitmapIcon {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe8fe17cb_35f7_40f3_a185_48b397b73e68,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IBitmapIcon_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub UriSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetUriSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBitmapIcon2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IBitmapIcon2 {
    type Vtable = IBitmapIcon2_Vtbl;
}
impl ::core::clone::Clone for IBitmapIcon2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IBitmapIcon2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0624a20a_9dd1_4201_bb20_42863da15658,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IBitmapIcon2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ShowAsMonochrome: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetShowAsMonochrome: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBitmapIconFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IBitmapIconFactory {
    type Vtable = IBitmapIconFactory_Vtbl;
}
impl ::core::clone::Clone for IBitmapIconFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IBitmapIconFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x46d64b1d_7a49_4f66_9729_2848c788e402,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IBitmapIconFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBitmapIconSource(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IBitmapIconSource {
    type Vtable = IBitmapIconSource_Vtbl;
}
impl ::core::clone::Clone for IBitmapIconSource {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IBitmapIconSource {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc8e33dc7_d4ae_4a87_947f_ac4d0bcf5af4,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IBitmapIconSource_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub UriSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetUriSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ShowAsMonochrome: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetShowAsMonochrome: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBitmapIconSourceFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IBitmapIconSourceFactory {
    type Vtable = IBitmapIconSourceFactory_Vtbl;
}
impl ::core::clone::Clone for IBitmapIconSourceFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IBitmapIconSourceFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6509e5c6_44b6_4cd1_86cd_c3189b12c43c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IBitmapIconSourceFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBitmapIconSourceStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IBitmapIconSourceStatics {
    type Vtable = IBitmapIconSourceStatics_Vtbl;
}
impl ::core::clone::Clone for IBitmapIconSourceStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IBitmapIconSourceStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5a105887_e494_4d2b_8528_39472296133f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IBitmapIconSourceStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub UriSourceProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ShowAsMonochromeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBitmapIconStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IBitmapIconStatics {
    type Vtable = IBitmapIconStatics_Vtbl;
}
impl ::core::clone::Clone for IBitmapIconStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IBitmapIconStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe072d117_e4e7_4e0c_9470_53ff1ce84f67,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IBitmapIconStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub UriSourceProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBitmapIconStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IBitmapIconStatics2 {
    type Vtable = IBitmapIconStatics2_Vtbl;
}
impl ::core::clone::Clone for IBitmapIconStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IBitmapIconStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9745026b_b742_4a89_a5d7_a0e5fb809af1,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IBitmapIconStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ShowAsMonochromeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBorder(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IBorder {
    type Vtable = IBorder_Vtbl;
}
impl ::core::clone::Clone for IBorder {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IBorder {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x797c4539_45bd_4633_a044_bfb02ef5170f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IBorder_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BorderThickness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetBorderThickness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub Background: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CornerRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CornerRadius,
    ) -> ::windows_core::HRESULT,
    pub SetCornerRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CornerRadius,
    ) -> ::windows_core::HRESULT,
    pub Padding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetPadding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub Child: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetChild: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    ChildTransitions: usize,
    SetChildTransitions: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBorder2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IBorder2 {
    type Vtable = IBorder2_Vtbl;
}
impl ::core::clone::Clone for IBorder2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IBorder2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa1efbd9d_cb8b_56b5_878d_3a7f43bc9730,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IBorder2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BackgroundSizing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut BackgroundSizing,
    ) -> ::windows_core::HRESULT,
    pub SetBackgroundSizing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: BackgroundSizing,
    ) -> ::windows_core::HRESULT,
    pub BackgroundTransition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetBackgroundTransition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBorderStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IBorderStatics {
    type Vtable = IBorderStatics_Vtbl;
}
impl ::core::clone::Clone for IBorderStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IBorderStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb81d1639_e911_4fd7_a4c4_b9c7f008b7fc,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IBorderStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BorderBrushProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BorderThicknessProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BackgroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CornerRadiusProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PaddingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ChildTransitionsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBorderStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IBorderStatics2 {
    type Vtable = IBorderStatics2_Vtbl;
}
impl ::core::clone::Clone for IBorderStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IBorderStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa26d4476_803f_5040_a0f3_e66db3733166,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IBorderStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BackgroundSizingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IButton(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IButton {
    type Vtable = IButton_Vtbl;
}
impl ::core::clone::Clone for IButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IButton {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x280335ae_5570_46c7_8e0b_602be71229a2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IButton_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IButtonFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IButtonFactory {
    type Vtable = IButtonFactory_Vtbl;
}
impl ::core::clone::Clone for IButtonFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IButtonFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x80a13c19_843a_451c_8cf5_44c701b0e216,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IButtonFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IButtonStaticsWithFlyout(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IButtonStaticsWithFlyout {
    type Vtable = IButtonStaticsWithFlyout_Vtbl;
}
impl ::core::clone::Clone for IButtonStaticsWithFlyout {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IButtonStaticsWithFlyout {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x90143898_a16c_4759_b2f0_a5f7e625169e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IButtonStaticsWithFlyout_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub FlyoutProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IButtonWithFlyout(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IButtonWithFlyout {
    type Vtable = IButtonWithFlyout_Vtbl;
}
impl ::core::clone::Clone for IButtonWithFlyout {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IButtonWithFlyout {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x09108f87_df6c_4180_9b3a_e60845825811,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IButtonWithFlyout_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Flyout: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetFlyout: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICalendarDatePicker(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICalendarDatePicker {
    type Vtable = ICalendarDatePicker_Vtbl;
}
impl ::core::clone::Clone for ICalendarDatePicker {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICalendarDatePicker {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x63c9c16f_668c_4491_9444_d45d8bf4fa29,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICalendarDatePicker_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Date: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsCalendarOpen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsCalendarOpen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub DateFormat: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetDateFormat: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub PlaceholderText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetPlaceholderText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub Header: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CalendarViewStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetCalendarViewStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MinDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub SetMinDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub MaxDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub SetMaxDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub IsTodayHighlighted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsTodayHighlighted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub DisplayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CalendarViewDisplayMode,
    ) -> ::windows_core::HRESULT,
    pub SetDisplayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CalendarViewDisplayMode,
    ) -> ::windows_core::HRESULT,
    FirstDayOfWeek: usize,
    SetFirstDayOfWeek: usize,
    pub DayOfWeekFormat: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetDayOfWeekFormat: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub CalendarIdentifier: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetCalendarIdentifier: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub IsOutOfScopeEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsOutOfScopeEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsGroupLabelVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsGroupLabelVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub CalendarViewDayItemChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveCalendarViewDayItemChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub DateChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveDateChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub Opened: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveOpened: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub Closed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveClosed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub SetDisplayDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        date: super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub SetYearDecadeDisplayDimensions: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        columns: i32,
        rows: i32,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICalendarDatePicker2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICalendarDatePicker2 {
    type Vtable = ICalendarDatePicker2_Vtbl;
}
impl ::core::clone::Clone for ICalendarDatePicker2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICalendarDatePicker2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb216c159_2411_4a60_a7aa_27416b49481e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICalendarDatePicker2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LightDismissOverlayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut LightDismissOverlayMode,
    ) -> ::windows_core::HRESULT,
    pub SetLightDismissOverlayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: LightDismissOverlayMode,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICalendarDatePicker3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICalendarDatePicker3 {
    type Vtable = ICalendarDatePicker3_Vtbl;
}
impl ::core::clone::Clone for ICalendarDatePicker3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICalendarDatePicker3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x645856c0_db7b_5e75_85e9_f623e3457ea6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICalendarDatePicker3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Description: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetDescription: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICalendarDatePickerDateChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICalendarDatePickerDateChangedEventArgs {
    type Vtable = ICalendarDatePickerDateChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for ICalendarDatePickerDateChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICalendarDatePickerDateChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x60d90db2_5010_46ba_842d_a4152c6504e7,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICalendarDatePickerDateChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub NewDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OldDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICalendarDatePickerFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICalendarDatePickerFactory {
    type Vtable = ICalendarDatePickerFactory_Vtbl;
}
impl ::core::clone::Clone for ICalendarDatePickerFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICalendarDatePickerFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x107aad5d_38be_42af_a957_fc86a5cf1e9a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICalendarDatePickerFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICalendarDatePickerStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICalendarDatePickerStatics {
    type Vtable = ICalendarDatePickerStatics_Vtbl;
}
impl ::core::clone::Clone for ICalendarDatePickerStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICalendarDatePickerStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x39a3d291_afab_4b94_8395_ba7b874e3c8c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICalendarDatePickerStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsCalendarOpenProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DateFormatProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PlaceholderTextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CalendarViewStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MinDateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxDateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsTodayHighlightedProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DisplayModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FirstDayOfWeekProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DayOfWeekFormatProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CalendarIdentifierProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsOutOfScopeEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsGroupLabelVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICalendarDatePickerStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICalendarDatePickerStatics2 {
    type Vtable = ICalendarDatePickerStatics2_Vtbl;
}
impl ::core::clone::Clone for ICalendarDatePickerStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICalendarDatePickerStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x30206b58_a2f6_4a00_8d13_33c46b6b8e0d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICalendarDatePickerStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LightDismissOverlayModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICalendarDatePickerStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICalendarDatePickerStatics3 {
    type Vtable = ICalendarDatePickerStatics3_Vtbl;
}
impl ::core::clone::Clone for ICalendarDatePickerStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICalendarDatePickerStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb188741d_cf69_568c_9707_baaaec2b64db,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICalendarDatePickerStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DescriptionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICalendarView(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICalendarView {
    type Vtable = ICalendarView_Vtbl;
}
impl ::core::clone::Clone for ICalendarView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICalendarView {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xcd639203_dfb5_4312_ac07_c0391824607b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICalendarView_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CalendarIdentifier: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetCalendarIdentifier: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub DayOfWeekFormat: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetDayOfWeekFormat: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub IsGroupLabelVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsGroupLabelVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub DisplayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CalendarViewDisplayMode,
    ) -> ::windows_core::HRESULT,
    pub SetDisplayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CalendarViewDisplayMode,
    ) -> ::windows_core::HRESULT,
    FirstDayOfWeek: usize,
    SetFirstDayOfWeek: usize,
    pub IsOutOfScopeEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsOutOfScopeEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsTodayHighlighted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsTodayHighlighted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub MaxDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub SetMaxDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub MinDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub SetMinDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub NumberOfWeeksInView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetNumberOfWeeksInView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub SelectedDates: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectionMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CalendarViewSelectionMode,
    ) -> ::windows_core::HRESULT,
    pub SetSelectionMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CalendarViewSelectionMode,
    ) -> ::windows_core::HRESULT,
    pub TemplateSettings: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FocusBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetFocusBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedHoverBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectedHoverBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedPressedBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectedPressedBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectedBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HoverBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHoverBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PressedBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPressedBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CalendarItemBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetCalendarItemBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OutOfScopeBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetOutOfScopeBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CalendarItemBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetCalendarItemBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PressedForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPressedForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TodayForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTodayForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BlackoutForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetBlackoutForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectedForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OutOfScopeForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetOutOfScopeForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CalendarItemForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetCalendarItemForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DayItemFontFamily: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetDayItemFontFamily: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DayItemFontSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetDayItemFontSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub DayItemFontStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontStyle,
    ) -> ::windows_core::HRESULT,
    pub SetDayItemFontStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontStyle,
    ) -> ::windows_core::HRESULT,
    pub DayItemFontWeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontWeight,
    ) -> ::windows_core::HRESULT,
    pub SetDayItemFontWeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontWeight,
    ) -> ::windows_core::HRESULT,
    pub TodayFontWeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontWeight,
    ) -> ::windows_core::HRESULT,
    pub SetTodayFontWeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontWeight,
    ) -> ::windows_core::HRESULT,
    pub FirstOfMonthLabelFontFamily: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetFirstOfMonthLabelFontFamily: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FirstOfMonthLabelFontSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetFirstOfMonthLabelFontSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub FirstOfMonthLabelFontStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontStyle,
    ) -> ::windows_core::HRESULT,
    pub SetFirstOfMonthLabelFontStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontStyle,
    ) -> ::windows_core::HRESULT,
    pub FirstOfMonthLabelFontWeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontWeight,
    ) -> ::windows_core::HRESULT,
    pub SetFirstOfMonthLabelFontWeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontWeight,
    ) -> ::windows_core::HRESULT,
    pub MonthYearItemFontFamily: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetMonthYearItemFontFamily: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MonthYearItemFontSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetMonthYearItemFontSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub MonthYearItemFontStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontStyle,
    ) -> ::windows_core::HRESULT,
    pub SetMonthYearItemFontStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontStyle,
    ) -> ::windows_core::HRESULT,
    pub MonthYearItemFontWeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontWeight,
    ) -> ::windows_core::HRESULT,
    pub SetMonthYearItemFontWeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontWeight,
    ) -> ::windows_core::HRESULT,
    pub FirstOfYearDecadeLabelFontFamily: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetFirstOfYearDecadeLabelFontFamily: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FirstOfYearDecadeLabelFontSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetFirstOfYearDecadeLabelFontSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub FirstOfYearDecadeLabelFontStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontStyle,
    ) -> ::windows_core::HRESULT,
    pub SetFirstOfYearDecadeLabelFontStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontStyle,
    ) -> ::windows_core::HRESULT,
    pub FirstOfYearDecadeLabelFontWeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontWeight,
    ) -> ::windows_core::HRESULT,
    pub SetFirstOfYearDecadeLabelFontWeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontWeight,
    ) -> ::windows_core::HRESULT,
    pub HorizontalDayItemAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::HorizontalAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalDayItemAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::HorizontalAlignment,
    ) -> ::windows_core::HRESULT,
    pub VerticalDayItemAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::VerticalAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalDayItemAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::VerticalAlignment,
    ) -> ::windows_core::HRESULT,
    pub HorizontalFirstOfMonthLabelAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::HorizontalAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalFirstOfMonthLabelAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::HorizontalAlignment,
    ) -> ::windows_core::HRESULT,
    pub VerticalFirstOfMonthLabelAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::VerticalAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalFirstOfMonthLabelAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::VerticalAlignment,
    ) -> ::windows_core::HRESULT,
    pub CalendarItemBorderThickness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetCalendarItemBorderThickness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub CalendarViewDayItemStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetCalendarViewDayItemStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CalendarViewDayItemChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveCalendarViewDayItemChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub SelectedDatesChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveSelectedDatesChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub SetDisplayDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        date: super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub SetYearDecadeDisplayDimensions: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        columns: i32,
        rows: i32,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICalendarView2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICalendarView2 {
    type Vtable = ICalendarView2_Vtbl;
}
impl ::core::clone::Clone for ICalendarView2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICalendarView2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf55ab64a_5504_5d9e_9d20_2ffdb88fc56b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICalendarView2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectedDisabledBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectedDisabledBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TodaySelectedInnerBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTodaySelectedInnerBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BlackoutStrikethroughBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetBlackoutStrikethroughBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BlackoutBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetBlackoutBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CalendarItemHoverBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetCalendarItemHoverBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CalendarItemPressedBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetCalendarItemPressedBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CalendarItemDisabledBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetCalendarItemDisabledBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TodayBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTodayBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TodayBlackoutBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTodayBlackoutBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TodayHoverBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTodayHoverBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TodayPressedBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTodayPressedBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TodayDisabledBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTodayDisabledBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TodayBlackoutForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTodayBlackoutForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedHoverForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectedHoverForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedPressedForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectedPressedForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedDisabledForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectedDisabledForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OutOfScopeHoverForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetOutOfScopeHoverForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OutOfScopePressedForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetOutOfScopePressedForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DisabledForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetDisabledForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DayItemMargin: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetDayItemMargin: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub MonthYearItemMargin: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetMonthYearItemMargin: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub FirstOfMonthLabelMargin: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetFirstOfMonthLabelMargin: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub FirstOfYearDecadeLabelMargin: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetFirstOfYearDecadeLabelMargin: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub CalendarItemCornerRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CornerRadius,
    ) -> ::windows_core::HRESULT,
    pub SetCalendarItemCornerRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CornerRadius,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICalendarViewDayItem(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICalendarViewDayItem {
    type Vtable = ICalendarViewDayItem_Vtbl;
}
impl ::core::clone::Clone for ICalendarViewDayItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICalendarViewDayItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0fdb2dc5_32c1_4b8f_befc_017b555b32d2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICalendarViewDayItem_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsBlackout: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsBlackout: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Date: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub SetDensityColors: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        colors: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICalendarViewDayItemChangingEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICalendarViewDayItemChangingEventArgs {
    type Vtable = ICalendarViewDayItemChangingEventArgs_Vtbl;
}
impl ::core::clone::Clone for ICalendarViewDayItemChangingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICalendarViewDayItemChangingEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x73146666_1fb1_44f9_b7ad_4de859ecc565,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICalendarViewDayItemChangingEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub InRecycleQueue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub Item: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Phase: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut u32,
    ) -> ::windows_core::HRESULT,
    pub RegisterUpdateCallback: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        callback: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RegisterUpdateCallbackWithPhase: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        callbackphase: u32,
        callback: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICalendarViewDayItemFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICalendarViewDayItemFactory {
    type Vtable = ICalendarViewDayItemFactory_Vtbl;
}
impl ::core::clone::Clone for ICalendarViewDayItemFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICalendarViewDayItemFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x62112bdc_1d2f_4e44_9baf_1665749521f2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICalendarViewDayItemFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICalendarViewDayItemStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICalendarViewDayItemStatics {
    type Vtable = ICalendarViewDayItemStatics_Vtbl;
}
impl ::core::clone::Clone for ICalendarViewDayItemStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICalendarViewDayItemStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc3a1dbbf_bd88_488b_b916_d00d69b1735a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICalendarViewDayItemStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsBlackoutProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICalendarViewFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICalendarViewFactory {
    type Vtable = ICalendarViewFactory_Vtbl;
}
impl ::core::clone::Clone for ICalendarViewFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICalendarViewFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3d8f82e3_6cc6_423e_8d7c_7014d954ddef,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICalendarViewFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICalendarViewSelectedDatesChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICalendarViewSelectedDatesChangedEventArgs {
    type Vtable = ICalendarViewSelectedDatesChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for ICalendarViewSelectedDatesChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICalendarViewSelectedDatesChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xee6069f6_13ef_4896_8ffc_5302b1b17539,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICalendarViewSelectedDatesChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub AddedDates: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RemovedDates: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICalendarViewStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICalendarViewStatics {
    type Vtable = ICalendarViewStatics_Vtbl;
}
impl ::core::clone::Clone for ICalendarViewStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICalendarViewStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x7260f1c4_2f5d_41bd_99bb_4571b20b79a8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICalendarViewStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CalendarIdentifierProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DayOfWeekFormatProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsGroupLabelVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DisplayModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FirstDayOfWeekProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsOutOfScopeEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsTodayHighlightedProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxDateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MinDateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub NumberOfWeeksInViewProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedDatesProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectionModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TemplateSettingsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FocusBorderBrushProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedHoverBorderBrushProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedPressedBorderBrushProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedBorderBrushProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HoverBorderBrushProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PressedBorderBrushProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CalendarItemBorderBrushProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OutOfScopeBackgroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CalendarItemBackgroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PressedForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TodayForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BlackoutForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OutOfScopeForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CalendarItemForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DayItemFontFamilyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DayItemFontSizeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DayItemFontStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DayItemFontWeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TodayFontWeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FirstOfMonthLabelFontFamilyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FirstOfMonthLabelFontSizeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FirstOfMonthLabelFontStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FirstOfMonthLabelFontWeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MonthYearItemFontFamilyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MonthYearItemFontSizeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MonthYearItemFontStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MonthYearItemFontWeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FirstOfYearDecadeLabelFontFamilyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FirstOfYearDecadeLabelFontSizeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FirstOfYearDecadeLabelFontStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FirstOfYearDecadeLabelFontWeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HorizontalDayItemAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub VerticalDayItemAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HorizontalFirstOfMonthLabelAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub VerticalFirstOfMonthLabelAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CalendarItemBorderThicknessProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CalendarViewDayItemStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICalendarViewStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICalendarViewStatics2 {
    type Vtable = ICalendarViewStatics2_Vtbl;
}
impl ::core::clone::Clone for ICalendarViewStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICalendarViewStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf29e5024_b8fb_50c8_8a38_d443abb37009,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICalendarViewStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectedDisabledBorderBrushProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TodaySelectedInnerBorderBrushProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BlackoutStrikethroughBrushProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BlackoutBackgroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CalendarItemHoverBackgroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CalendarItemPressedBackgroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CalendarItemDisabledBackgroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TodayBackgroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TodayBlackoutBackgroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TodayHoverBackgroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TodayPressedBackgroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TodayDisabledBackgroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TodayBlackoutForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedHoverForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedPressedForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedDisabledForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OutOfScopeHoverForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OutOfScopePressedForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DisabledForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DayItemMarginProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MonthYearItemMarginProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FirstOfMonthLabelMarginProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FirstOfYearDecadeLabelMarginProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CalendarItemCornerRadiusProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICandidateWindowBoundsChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICandidateWindowBoundsChangedEventArgs {
    type Vtable = ICandidateWindowBoundsChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for ICandidateWindowBoundsChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICandidateWindowBoundsChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8a946458_83b0_4c32_9450_5169a5838b55,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICandidateWindowBoundsChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Bounds: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::Rect,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICanvas(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICanvas {
    type Vtable = ICanvas_Vtbl;
}
impl ::core::clone::Clone for ICanvas {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICanvas {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x79190e19_cd38_4823_aeae_64a77132f519,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICanvas_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICanvasFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICanvasFactory {
    type Vtable = ICanvasFactory_Vtbl;
}
impl ::core::clone::Clone for ICanvasFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICanvasFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1b328bd1_b400_4a8e_943b_5ad2c45be0df,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICanvasFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICanvasStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICanvasStatics {
    type Vtable = ICanvasStatics_Vtbl;
}
impl ::core::clone::Clone for ICanvasStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICanvasStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x40ce5c46_2962_446f_aafb_4cdc486939c9,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICanvasStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LeftProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetLeft: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetLeft: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        length: f64,
    ) -> ::windows_core::HRESULT,
    pub TopProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetTop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetTop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        length: f64,
    ) -> ::windows_core::HRESULT,
    pub ZIndexProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetZIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetZIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICaptureElement(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICaptureElement {
    type Vtable = ICaptureElement_Vtbl;
}
impl ::core::clone::Clone for ICaptureElement {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICaptureElement {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x31a5c0e7_f307_4d4a_b626_e978863f5b74,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICaptureElement_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    Source: usize,
    SetSource: usize,
    pub Stretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Media::Stretch,
    ) -> ::windows_core::HRESULT,
    pub SetStretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Media::Stretch,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICaptureElementStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICaptureElementStatics {
    type Vtable = ICaptureElementStatics_Vtbl;
}
impl ::core::clone::Clone for ICaptureElementStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICaptureElementStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1e438ded_7da6_409e_806e_305ae4ad9b3f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICaptureElementStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SourceProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub StretchProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICheckBox(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICheckBox {
    type Vtable = ICheckBox_Vtbl;
}
impl ::core::clone::Clone for ICheckBox {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICheckBox {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x2294c894_7e2a_4b70_b088_8f5d814875ba,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICheckBox_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICheckBoxFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICheckBoxFactory {
    type Vtable = ICheckBoxFactory_Vtbl;
}
impl ::core::clone::Clone for ICheckBoxFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICheckBoxFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4fa6aabb_3f4b_4301_be07_1172ea61eefb,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICheckBoxFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IChoosingGroupHeaderContainerEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IChoosingGroupHeaderContainerEventArgs {
    type Vtable = IChoosingGroupHeaderContainerEventArgs_Vtbl;
}
impl ::core::clone::Clone for IChoosingGroupHeaderContainerEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IChoosingGroupHeaderContainerEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x67db44d6_d201_4d72_beac_5e8e58afd8c7,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IChoosingGroupHeaderContainerEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub GroupHeaderContainer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetGroupHeaderContainer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GroupIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub Group: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IChoosingItemContainerEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IChoosingItemContainerEventArgs {
    type Vtable = IChoosingItemContainerEventArgs_Vtbl;
}
impl ::core::clone::Clone for IChoosingItemContainerEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IChoosingItemContainerEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9bb43bce_ae67_4a80_8363_e3fe1b244f2c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IChoosingItemContainerEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ItemIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub Item: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemContainer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetItemContainer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsContainerPrepared: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsContainerPrepared: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICleanUpVirtualizedItemEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICleanUpVirtualizedItemEventArgs {
    type Vtable = ICleanUpVirtualizedItemEventArgs_Vtbl;
}
impl ::core::clone::Clone for ICleanUpVirtualizedItemEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICleanUpVirtualizedItemEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xea05cce9_937c_4120_8406_792185784338,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICleanUpVirtualizedItemEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Value: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub UIElement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Cancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IColorChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IColorChangedEventArgs {
    type Vtable = IColorChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IColorChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IColorChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x34f7201f_aad0_4c3a_b97b_2abf36455539,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OldColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Color,
    ) -> ::windows_core::HRESULT,
    pub NewColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Color,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IColorPicker(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IColorPicker {
    type Vtable = IColorPicker_Vtbl;
}
impl ::core::clone::Clone for IColorPicker {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IColorPicker {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6232e371_5c64_43cb_8b35_7f82dde36740,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorPicker_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Color: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Color,
    ) -> ::windows_core::HRESULT,
    pub SetColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Color,
    ) -> ::windows_core::HRESULT,
    pub PreviousColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPreviousColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsAlphaEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsAlphaEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsColorSpectrumVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsColorSpectrumVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsColorPreviewVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsColorPreviewVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsColorSliderVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsColorSliderVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsAlphaSliderVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsAlphaSliderVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsMoreButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsMoreButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsColorChannelTextInputVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsColorChannelTextInputVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsAlphaTextInputVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsAlphaTextInputVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsHexInputVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsHexInputVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub MinHue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetMinHue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub MaxHue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetMaxHue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub MinSaturation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetMinSaturation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub MaxSaturation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetMaxSaturation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub MinValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetMinValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub MaxValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetMaxValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub ColorSpectrumShape: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ColorSpectrumShape,
    ) -> ::windows_core::HRESULT,
    pub SetColorSpectrumShape: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ColorSpectrumShape,
    ) -> ::windows_core::HRESULT,
    pub ColorSpectrumComponents: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ColorSpectrumComponents,
    ) -> ::windows_core::HRESULT,
    pub SetColorSpectrumComponents: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ColorSpectrumComponents,
    ) -> ::windows_core::HRESULT,
    pub ColorChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveColorChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IColorPickerFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IColorPickerFactory {
    type Vtable = IColorPickerFactory_Vtbl;
}
impl ::core::clone::Clone for IColorPickerFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IColorPickerFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xabae07ff_aecf_481d_9204_201c3894cd1b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorPickerFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IColorPickerStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IColorPickerStatics {
    type Vtable = IColorPickerStatics_Vtbl;
}
impl ::core::clone::Clone for IColorPickerStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IColorPickerStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x67ca9be7_1574_451a_b6df_fe57d9d07b46,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorPickerStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ColorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PreviousColorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsAlphaEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsColorSpectrumVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsColorPreviewVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsColorSliderVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsAlphaSliderVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsMoreButtonVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsColorChannelTextInputVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsAlphaTextInputVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsHexInputVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MinHueProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxHueProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MinSaturationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxSaturationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MinValueProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxValueProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ColorSpectrumShapeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ColorSpectrumComponentsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IColumnDefinition(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IColumnDefinition {
    type Vtable = IColumnDefinition_Vtbl;
}
impl ::core::clone::Clone for IColumnDefinition {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IColumnDefinition {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf7f1b229_f024_467f_970a_7e705615db7b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IColumnDefinition_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Width: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::GridLength,
    ) -> ::windows_core::HRESULT,
    pub SetWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::GridLength,
    ) -> ::windows_core::HRESULT,
    pub MaxWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetMaxWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub MinWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetMinWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub ActualWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IColumnDefinitionStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IColumnDefinitionStatics {
    type Vtable = IColumnDefinitionStatics_Vtbl;
}
impl ::core::clone::Clone for IColumnDefinitionStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IColumnDefinitionStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x06b0d728_d044_40c6_942e_ae60eac74851,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IColumnDefinitionStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub WidthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxWidthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MinWidthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IComboBox(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IComboBox {
    type Vtable = IComboBox_Vtbl;
}
impl ::core::clone::Clone for IComboBox {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IComboBox {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb9a8d05c_ac97_47f1_a5f4_3f9f4d4b116c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBox_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsDropDownOpen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsDropDownOpen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsEditable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub IsSelectionBoxHighlighted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub MaxDropDownHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetMaxDropDownHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub SelectionBoxItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectionBoxItemTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TemplateSettings: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DropDownClosed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveDropDownClosed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub DropDownOpened: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveDropDownOpened: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IComboBox2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IComboBox2 {
    type Vtable = IComboBox2_Vtbl;
}
impl ::core::clone::Clone for IComboBox2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IComboBox2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xea0cbf91_ca36_4fad_972a_2e53a6718b9f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBox2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Header: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PlaceholderText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetPlaceholderText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IComboBox3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IComboBox3 {
    type Vtable = IComboBox3_Vtbl;
}
impl ::core::clone::Clone for IComboBox3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IComboBox3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x52400a63_476c_4bb6_b781_019324d3fed9,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBox3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LightDismissOverlayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut LightDismissOverlayMode,
    ) -> ::windows_core::HRESULT,
    pub SetLightDismissOverlayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: LightDismissOverlayMode,
    ) -> ::windows_core::HRESULT,
    pub IsTextSearchEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsTextSearchEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IComboBox4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IComboBox4 {
    type Vtable = IComboBox4_Vtbl;
}
impl ::core::clone::Clone for IComboBox4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IComboBox4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb7974f49_b05c_47f9_9aaf_d6f9187be5fd,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBox4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectionChangedTrigger: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ComboBoxSelectionChangedTrigger,
    ) -> ::windows_core::HRESULT,
    pub SetSelectionChangedTrigger: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ComboBoxSelectionChangedTrigger,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IComboBox5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IComboBox5 {
    type Vtable = IComboBox5_Vtbl;
}
impl ::core::clone::Clone for IComboBox5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IComboBox5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xab79d646_800a_4a28_969b_34bb8fb458cf,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBox5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PlaceholderForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPlaceholderForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IComboBox6(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IComboBox6 {
    type Vtable = IComboBox6_Vtbl;
}
impl ::core::clone::Clone for IComboBox6 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IComboBox6 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x61aad6a5_81fb_5f87_bae3_369fbe2ea1f3,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBox6_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SetIsEditable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Text: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub TextBoxStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTextBoxStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Description: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetDescription: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextSubmitted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveTextSubmitted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IComboBoxFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IComboBoxFactory {
    type Vtable = IComboBoxFactory_Vtbl;
}
impl ::core::clone::Clone for IComboBoxFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IComboBoxFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xac0d0444_a65b_4abd_86df_3016049efedc,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBoxFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IComboBoxItem(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IComboBoxItem {
    type Vtable = IComboBoxItem_Vtbl;
}
impl ::core::clone::Clone for IComboBoxItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IComboBoxItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x993fd6d2_2aae_4f3b_b44d_5648f4d06114,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBoxItem_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IComboBoxItemFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IComboBoxItemFactory {
    type Vtable = IComboBoxItemFactory_Vtbl;
}
impl ::core::clone::Clone for IComboBoxItemFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IComboBoxItemFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8fffe867_d94c_4e87_8fc4_6ebcd63c5ac2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBoxItemFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IComboBoxOverrides(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IComboBoxOverrides {
    type Vtable = IComboBoxOverrides_Vtbl;
}
impl ::core::clone::Clone for IComboBoxOverrides {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IComboBoxOverrides {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4f016541_bcfe_4a22_8932_c914981c2240,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBoxOverrides_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OnDropDownClosed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnDropDownOpened: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IComboBoxStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IComboBoxStatics {
    type Vtable = IComboBoxStatics_Vtbl;
}
impl ::core::clone::Clone for IComboBoxStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IComboBoxStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3e14c9b1_d15b_4dc9_8110_cf3a117b96e7,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBoxStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsDropDownOpenProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxDropDownHeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IComboBoxStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IComboBoxStatics2 {
    type Vtable = IComboBoxStatics2_Vtbl;
}
impl ::core::clone::Clone for IComboBoxStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IComboBoxStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x93988a11_402c_4b13_96d1_7220266b9220,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBoxStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PlaceholderTextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IComboBoxStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IComboBoxStatics3 {
    type Vtable = IComboBoxStatics3_Vtbl;
}
impl ::core::clone::Clone for IComboBoxStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IComboBoxStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x949e140f_ce7f_4e41_bdc5_d1d3388ad0a6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBoxStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LightDismissOverlayModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsTextSearchEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IComboBoxStatics4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IComboBoxStatics4 {
    type Vtable = IComboBoxStatics4_Vtbl;
}
impl ::core::clone::Clone for IComboBoxStatics4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IComboBoxStatics4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd9f58358_f7b0_46ce_8061_ad83ec2f2dd4,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBoxStatics4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectionChangedTriggerProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IComboBoxStatics5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IComboBoxStatics5 {
    type Vtable = IComboBoxStatics5_Vtbl;
}
impl ::core::clone::Clone for IComboBoxStatics5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IComboBoxStatics5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb802cef1_a264_444a_9a61_aa8867b7a63c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBoxStatics5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PlaceholderForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IComboBoxStatics6(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IComboBoxStatics6 {
    type Vtable = IComboBoxStatics6_Vtbl;
}
impl ::core::clone::Clone for IComboBoxStatics6 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IComboBoxStatics6 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x516c88e0_ec6b_54ac_8c57_5ec080ee05c8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBoxStatics6_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsEditableProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextBoxStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DescriptionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IComboBoxTextSubmittedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IComboBoxTextSubmittedEventArgs {
    type Vtable = IComboBoxTextSubmittedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IComboBoxTextSubmittedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IComboBoxTextSubmittedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xcb698cbb_6879_558e_af82_df1d08f62afa,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBoxTextSubmittedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Text: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICommandBar(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICommandBar {
    type Vtable = ICommandBar_Vtbl;
}
impl ::core::clone::Clone for ICommandBar {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICommandBar {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x98bc4280_4a3d_4cee_bd07_22ce94c5af76,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICommandBar_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PrimaryCommands: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SecondaryCommands: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICommandBar2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICommandBar2 {
    type Vtable = ICommandBar2_Vtbl;
}
impl ::core::clone::Clone for ICommandBar2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICommandBar2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x57662f58_5b32_475d_be64_4ca36e7b97d4,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICommandBar2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CommandBarOverflowPresenterStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetCommandBarOverflowPresenterStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CommandBarTemplateSettings: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICommandBar3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICommandBar3 {
    type Vtable = ICommandBar3_Vtbl;
}
impl ::core::clone::Clone for ICommandBar3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICommandBar3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x40ebbc23_2a79_48b3_9a67_649b852d8589,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICommandBar3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DefaultLabelPosition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CommandBarDefaultLabelPosition,
    ) -> ::windows_core::HRESULT,
    pub SetDefaultLabelPosition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CommandBarDefaultLabelPosition,
    ) -> ::windows_core::HRESULT,
    pub OverflowButtonVisibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CommandBarOverflowButtonVisibility,
    ) -> ::windows_core::HRESULT,
    pub SetOverflowButtonVisibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CommandBarOverflowButtonVisibility,
    ) -> ::windows_core::HRESULT,
    pub IsDynamicOverflowEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsDynamicOverflowEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub DynamicOverflowItemsChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveDynamicOverflowItemsChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct ICommandBarElement(::windows_core::IUnknown);
impl ICommandBarElement {}
::windows_core::imp::interface_hierarchy!(
    ICommandBarElement, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::core::cmp::PartialEq for ICommandBarElement {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICommandBarElement {}
impl ::core::fmt::Debug for ICommandBarElement {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICommandBarElement").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ICommandBarElement {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{67918e1b-f2d5-44d1-8b84-92b87f80a350}",
    );
}
unsafe impl ::windows_core::Interface for ICommandBarElement {
    type Vtable = ICommandBarElement_Vtbl;
}
impl ::core::clone::Clone for ICommandBarElement {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICommandBarElement {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x67918e1b_f2d5_44d1_8b84_92b87f80a350,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICommandBarElement_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsCompact: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsCompact: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct ICommandBarElement2(::windows_core::IUnknown);
impl ICommandBarElement2 {}
::windows_core::imp::interface_hierarchy!(
    ICommandBarElement2, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::core::cmp::PartialEq for ICommandBarElement2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICommandBarElement2 {}
impl ::core::fmt::Debug for ICommandBarElement2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICommandBarElement2").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ICommandBarElement2 {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{a9bf1236-4402-4688-b987-9d2b9b7bf2bd}",
    );
}
unsafe impl ::windows_core::Interface for ICommandBarElement2 {
    type Vtable = ICommandBarElement2_Vtbl;
}
impl ::core::clone::Clone for ICommandBarElement2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICommandBarElement2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa9bf1236_4402_4688_b987_9d2b9b7bf2bd,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICommandBarElement2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsInOverflow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub DynamicOverflowOrder: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetDynamicOverflowOrder: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICommandBarFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICommandBarFactory {
    type Vtable = ICommandBarFactory_Vtbl;
}
impl ::core::clone::Clone for ICommandBarFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICommandBarFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x67bdeb44_20e1_4177_ad44_f617b374e8e8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICommandBarFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICommandBarFlyout(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICommandBarFlyout {
    type Vtable = ICommandBarFlyout_Vtbl;
}
impl ::core::clone::Clone for ICommandBarFlyout {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICommandBarFlyout {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xfecd2c4d_f16a_58cd_8aca_db0f046f25c3,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICommandBarFlyout_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PrimaryCommands: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SecondaryCommands: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICommandBarFlyoutFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICommandBarFlyoutFactory {
    type Vtable = ICommandBarFlyoutFactory_Vtbl;
}
impl ::core::clone::Clone for ICommandBarFlyoutFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICommandBarFlyoutFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xdd6441b3_6df1_593d_b80c_daf5c1daee41,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICommandBarFlyoutFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICommandBarOverflowPresenter(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICommandBarOverflowPresenter {
    type Vtable = ICommandBarOverflowPresenter_Vtbl;
}
impl ::core::clone::Clone for ICommandBarOverflowPresenter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICommandBarOverflowPresenter {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6e7a9427_58ef_4366_a017_18c193d56b14,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICommandBarOverflowPresenter_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICommandBarOverflowPresenterFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICommandBarOverflowPresenterFactory {
    type Vtable = ICommandBarOverflowPresenterFactory_Vtbl;
}
impl ::core::clone::Clone for ICommandBarOverflowPresenterFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICommandBarOverflowPresenterFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8323f774_5aaa_4049_b78f_218c6a19c37e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICommandBarOverflowPresenterFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICommandBarStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICommandBarStatics {
    type Vtable = ICommandBarStatics_Vtbl;
}
impl ::core::clone::Clone for ICommandBarStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICommandBarStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5bd981ea_e278_409c_b522_f946ca253b44,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICommandBarStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PrimaryCommandsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SecondaryCommandsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICommandBarStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICommandBarStatics2 {
    type Vtable = ICommandBarStatics2_Vtbl;
}
impl ::core::clone::Clone for ICommandBarStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICommandBarStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3d9ec8e3_51a9_4e34_956c_7081d06f26f8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICommandBarStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CommandBarOverflowPresenterStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICommandBarStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICommandBarStatics3 {
    type Vtable = ICommandBarStatics3_Vtbl;
}
impl ::core::clone::Clone for ICommandBarStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICommandBarStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb45a24a4_8af1_4843_b319_e03fc45ab726,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICommandBarStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DefaultLabelPositionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OverflowButtonVisibilityProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsDynamicOverflowEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContainerContentChangingEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContainerContentChangingEventArgs {
    type Vtable = IContainerContentChangingEventArgs_Vtbl;
}
impl ::core::clone::Clone for IContainerContentChangingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContainerContentChangingEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x07deeaa7_018f_4dda_b399_fd4e13a31bea,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContainerContentChangingEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ItemContainer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub InRecycleQueue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub ItemIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub Item: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Phase: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut u32,
    ) -> ::windows_core::HRESULT,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub RegisterUpdateCallback: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        callback: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RegisterUpdateCallbackWithPhase: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        callbackphase: u32,
        callback: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentControl(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentControl {
    type Vtable = IContentControl_Vtbl;
}
impl ::core::clone::Clone for IContentControl {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentControl {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa26dd1dc_cd44_435c_be94_01d6241c231c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentControl_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Content: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContentTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetContentTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContentTemplateSelector: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetContentTemplateSelector: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    ContentTransitions: usize,
    SetContentTransitions: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentControl2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentControl2 {
    type Vtable = IContentControl2_Vtbl;
}
impl ::core::clone::Clone for IContentControl2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentControl2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x652c208c_8ccf_4399_bd3e_5a015aa1bc03,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentControl2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ContentTemplateRoot: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentControlFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentControlFactory {
    type Vtable = IContentControlFactory_Vtbl;
}
impl ::core::clone::Clone for IContentControlFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentControlFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xab017b19_196e_4ed5_a27f_55c58fb1673f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentControlFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentControlOverrides(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentControlOverrides {
    type Vtable = IContentControlOverrides_Vtbl;
}
impl ::core::clone::Clone for IContentControlOverrides {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentControlOverrides {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5f4c0b10_e38e_4b5d_be1a_5ed04246a635,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentControlOverrides_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OnContentChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        oldcontent: *mut ::core::ffi::c_void,
        newcontent: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnContentTemplateChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        oldcontenttemplate: *mut ::core::ffi::c_void,
        newcontenttemplate: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnContentTemplateSelectorChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        oldcontenttemplateselector: *mut ::core::ffi::c_void,
        newcontenttemplateselector: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentControlStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentControlStatics {
    type Vtable = IContentControlStatics_Vtbl;
}
impl ::core::clone::Clone for IContentControlStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentControlStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x116982a4_5cf5_4c05_a53f_15e4876c85ec,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentControlStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ContentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContentTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContentTemplateSelectorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContentTransitionsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentDialog(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentDialog {
    type Vtable = IContentDialog_Vtbl;
}
impl ::core::clone::Clone for IContentDialog {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentDialog {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x38dc4404_d24e_40d8_9415_349464c1afdc,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentDialog_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Title: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTitle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TitleTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTitleTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FullSizeDesired: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetFullSizeDesired: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub PrimaryButtonText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetPrimaryButtonText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SecondaryButtonText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetSecondaryButtonText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    PrimaryButtonCommand: usize,
    SetPrimaryButtonCommand: usize,
    SecondaryButtonCommand: usize,
    SetSecondaryButtonCommand: usize,
    pub PrimaryButtonCommandParameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPrimaryButtonCommandParameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SecondaryButtonCommandParameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSecondaryButtonCommandParameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsPrimaryButtonEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsPrimaryButtonEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsSecondaryButtonEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsSecondaryButtonEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Closing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveClosing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub Closed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveClosed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub Opened: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveOpened: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub PrimaryButtonClick: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemovePrimaryButtonClick: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub SecondaryButtonClick: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveSecondaryButtonClick: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub Hide: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ShowAsync: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentDialog2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentDialog2 {
    type Vtable = IContentDialog2_Vtbl;
}
impl ::core::clone::Clone for IContentDialog2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentDialog2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x2f93eb45_ee43_4303_9b38_3fe1a111ecbf,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentDialog2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CloseButtonText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetCloseButtonText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    CloseButtonCommand: usize,
    SetCloseButtonCommand: usize,
    pub CloseButtonCommandParameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetCloseButtonCommandParameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PrimaryButtonStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPrimaryButtonStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SecondaryButtonStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSecondaryButtonStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CloseButtonStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetCloseButtonStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DefaultButton: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ContentDialogButton,
    ) -> ::windows_core::HRESULT,
    pub SetDefaultButton: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ContentDialogButton,
    ) -> ::windows_core::HRESULT,
    pub CloseButtonClick: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveCloseButtonClick: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentDialog3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentDialog3 {
    type Vtable = IContentDialog3_Vtbl;
}
impl ::core::clone::Clone for IContentDialog3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentDialog3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9d9a089e_f954_4ede_b07f_6b069a9c0180,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentDialog3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ShowAsyncWithPlacement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        placement: ContentDialogPlacement,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentDialogButtonClickDeferral(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentDialogButtonClickDeferral {
    type Vtable = IContentDialogButtonClickDeferral_Vtbl;
}
impl ::core::clone::Clone for IContentDialogButtonClickDeferral {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentDialogButtonClickDeferral {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xbd0d3637_19ce_4946_8e77_bd03fe8ebe03,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentDialogButtonClickDeferral_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Complete: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentDialogButtonClickEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentDialogButtonClickEventArgs {
    type Vtable = IContentDialogButtonClickEventArgs_Vtbl;
}
impl ::core::clone::Clone for IContentDialogButtonClickEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentDialogButtonClickEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5f34c205_8afa_4cf2_8ca0_264d73bed63d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentDialogButtonClickEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Cancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub GetDeferral: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentDialogClosedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentDialogClosedEventArgs {
    type Vtable = IContentDialogClosedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IContentDialogClosedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentDialogClosedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x905522ef_2cba_4af8_b666_cc36c22732fb,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentDialogClosedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Result: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ContentDialogResult,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentDialogClosingDeferral(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentDialogClosingDeferral {
    type Vtable = IContentDialogClosingDeferral_Vtbl;
}
impl ::core::clone::Clone for IContentDialogClosingDeferral {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentDialogClosingDeferral {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x215d4d11_7e30_4cb9_a710_5a4f9cca8b42,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentDialogClosingDeferral_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Complete: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentDialogClosingEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentDialogClosingEventArgs {
    type Vtable = IContentDialogClosingEventArgs_Vtbl;
}
impl ::core::clone::Clone for IContentDialogClosingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentDialogClosingEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xdb3c1c34_3bbf_47d4_be4f_c9ec115918b9,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentDialogClosingEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Result: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ContentDialogResult,
    ) -> ::windows_core::HRESULT,
    pub Cancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub GetDeferral: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentDialogFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentDialogFactory {
    type Vtable = IContentDialogFactory_Vtbl;
}
impl ::core::clone::Clone for IContentDialogFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentDialogFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x05557178_9d8e_4315_b37d_680c14012c35,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentDialogFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentDialogOpenedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentDialogOpenedEventArgs {
    type Vtable = IContentDialogOpenedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IContentDialogOpenedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentDialogOpenedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0966b315_5f59_4999_9e3e_374c0f174b04,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentDialogOpenedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentDialogStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentDialogStatics {
    type Vtable = IContentDialogStatics_Vtbl;
}
impl ::core::clone::Clone for IContentDialogStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentDialogStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x23ab47a6_508a_4f33_b786_f2fa96d869af,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentDialogStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TitleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TitleTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FullSizeDesiredProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PrimaryButtonTextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SecondaryButtonTextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PrimaryButtonCommandProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SecondaryButtonCommandProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PrimaryButtonCommandParameterProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SecondaryButtonCommandParameterProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsPrimaryButtonEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsSecondaryButtonEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentDialogStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentDialogStatics2 {
    type Vtable = IContentDialogStatics2_Vtbl;
}
impl ::core::clone::Clone for IContentDialogStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentDialogStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x329825b2_8fb0_4125_bb07_e79a5a03819f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentDialogStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CloseButtonTextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CloseButtonCommandProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CloseButtonCommandParameterProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PrimaryButtonStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SecondaryButtonStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CloseButtonStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DefaultButtonProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentLinkChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentLinkChangedEventArgs {
    type Vtable = IContentLinkChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IContentLinkChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentLinkChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x64f3f1de_89fb_4b77_8b9b_191b6d19290a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentLinkChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ChangeKind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ContentLinkChangeKind,
    ) -> ::windows_core::HRESULT,
    pub ContentLinkInfo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    TextRange: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentPresenter(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentPresenter {
    type Vtable = IContentPresenter_Vtbl;
}
impl ::core::clone::Clone for IContentPresenter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentPresenter {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x79fde5b4_cd37_491c_8845_daf472defff6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentPresenter_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Content: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContentTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetContentTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContentTemplateSelector: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetContentTemplateSelector: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    ContentTransitions: usize,
    SetContentTransitions: usize,
    pub FontSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetFontSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub FontFamily: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetFontFamily: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontWeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontWeight,
    ) -> ::windows_core::HRESULT,
    pub SetFontWeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontWeight,
    ) -> ::windows_core::HRESULT,
    pub FontStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontStyle,
    ) -> ::windows_core::HRESULT,
    pub SetFontStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontStyle,
    ) -> ::windows_core::HRESULT,
    pub FontStretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontStretch,
    ) -> ::windows_core::HRESULT,
    pub SetFontStretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontStretch,
    ) -> ::windows_core::HRESULT,
    pub CharacterSpacing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetCharacterSpacing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub Foreground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentPresenter2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentPresenter2 {
    type Vtable = IContentPresenter2_Vtbl;
}
impl ::core::clone::Clone for IContentPresenter2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentPresenter2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5138e958_335d_4210_8bbb_0aa2b4b5c29e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentPresenter2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OpticalMarginAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::OpticalMarginAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetOpticalMarginAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::OpticalMarginAlignment,
    ) -> ::windows_core::HRESULT,
    pub TextLineBounds: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextLineBounds,
    ) -> ::windows_core::HRESULT,
    pub SetTextLineBounds: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextLineBounds,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentPresenter3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentPresenter3 {
    type Vtable = IContentPresenter3_Vtbl;
}
impl ::core::clone::Clone for IContentPresenter3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentPresenter3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb038876a_9c4d_4402_ac56_a223487dc6c8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentPresenter3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsTextScaleFactorEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsTextScaleFactorEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentPresenter4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentPresenter4 {
    type Vtable = IContentPresenter4_Vtbl;
}
impl ::core::clone::Clone for IContentPresenter4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentPresenter4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x997b1b17_3bf8_432b_8fd9_68c7bab21f9d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentPresenter4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TextWrapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextWrapping,
    ) -> ::windows_core::HRESULT,
    pub SetTextWrapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextWrapping,
    ) -> ::windows_core::HRESULT,
    pub MaxLines: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetMaxLines: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub LineStackingStrategy: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::LineStackingStrategy,
    ) -> ::windows_core::HRESULT,
    pub SetLineStackingStrategy: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::LineStackingStrategy,
    ) -> ::windows_core::HRESULT,
    pub LineHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetLineHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub BorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BorderThickness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetBorderThickness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub CornerRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CornerRadius,
    ) -> ::windows_core::HRESULT,
    pub SetCornerRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CornerRadius,
    ) -> ::windows_core::HRESULT,
    pub Padding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetPadding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub Background: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HorizontalContentAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::HorizontalAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalContentAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::HorizontalAlignment,
    ) -> ::windows_core::HRESULT,
    pub VerticalContentAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::VerticalAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalContentAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::VerticalAlignment,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentPresenter5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentPresenter5 {
    type Vtable = IContentPresenter5_Vtbl;
}
impl ::core::clone::Clone for IContentPresenter5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentPresenter5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd248970c_b785_5e7f_9c11_8a6cd3d5929b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentPresenter5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BackgroundTransition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetBackgroundTransition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BackgroundSizing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut BackgroundSizing,
    ) -> ::windows_core::HRESULT,
    pub SetBackgroundSizing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: BackgroundSizing,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentPresenterFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentPresenterFactory {
    type Vtable = IContentPresenterFactory_Vtbl;
}
impl ::core::clone::Clone for IContentPresenterFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentPresenterFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3339d4f7_4815_44c4_9f76_68c83880ef10,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentPresenterFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentPresenterOverrides(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentPresenterOverrides {
    type Vtable = IContentPresenterOverrides_Vtbl;
}
impl ::core::clone::Clone for IContentPresenterOverrides {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentPresenterOverrides {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa76339ed_32ff_438b_aad5_1d68fae93426,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentPresenterOverrides_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OnContentTemplateChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        oldcontenttemplate: *mut ::core::ffi::c_void,
        newcontenttemplate: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnContentTemplateSelectorChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        oldcontenttemplateselector: *mut ::core::ffi::c_void,
        newcontenttemplateselector: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentPresenterStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentPresenterStatics {
    type Vtable = IContentPresenterStatics_Vtbl;
}
impl ::core::clone::Clone for IContentPresenterStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentPresenterStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x18c2893b_da2e_4426_b85a_2c7e2171bedf,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentPresenterStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ContentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContentTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContentTemplateSelectorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContentTransitionsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontSizeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontFamilyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontWeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontStretchProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CharacterSpacingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentPresenterStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentPresenterStatics2 {
    type Vtable = IContentPresenterStatics2_Vtbl;
}
impl ::core::clone::Clone for IContentPresenterStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentPresenterStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc7d89dd9_06e6_46be_a8a0_9c117d3024a3,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentPresenterStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OpticalMarginAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextLineBoundsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentPresenterStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentPresenterStatics3 {
    type Vtable = IContentPresenterStatics3_Vtbl;
}
impl ::core::clone::Clone for IContentPresenterStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentPresenterStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xcbe6cf5b_38b1_4d5d_b098_bc94b35c8ddf,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentPresenterStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsTextScaleFactorEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentPresenterStatics4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentPresenterStatics4 {
    type Vtable = IContentPresenterStatics4_Vtbl;
}
impl ::core::clone::Clone for IContentPresenterStatics4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentPresenterStatics4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xff8be292_af28_47eb_a5c3_dc44ced40fd2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentPresenterStatics4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TextWrappingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxLinesProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub LineStackingStrategyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub LineHeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BorderBrushProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BorderThicknessProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CornerRadiusProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PaddingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BackgroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HorizontalContentAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub VerticalContentAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentPresenterStatics5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContentPresenterStatics5 {
    type Vtable = IContentPresenterStatics5_Vtbl;
}
impl ::core::clone::Clone for IContentPresenterStatics5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContentPresenterStatics5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x169e700f_e8e6_5f6a_b97e_7ef8f7006f49,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentPresenterStatics5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BackgroundSizingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContextMenuEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IContextMenuEventArgs {
    type Vtable = IContextMenuEventArgs_Vtbl;
}
impl ::core::clone::Clone for IContextMenuEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContextMenuEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1f7df263_c14b_4528_b6f0_637999d83cc6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContextMenuEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub CursorLeft: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub CursorTop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IControl(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IControl {
    type Vtable = IControl_Vtbl;
}
impl ::core::clone::Clone for IControl {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IControl {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa8912263_2951_4f58_a9c5_5a134eaa7f07,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IControl_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub FontSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetFontSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub FontFamily: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetFontFamily: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontWeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontWeight,
    ) -> ::windows_core::HRESULT,
    pub SetFontWeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontWeight,
    ) -> ::windows_core::HRESULT,
    pub FontStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontStyle,
    ) -> ::windows_core::HRESULT,
    pub SetFontStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontStyle,
    ) -> ::windows_core::HRESULT,
    pub FontStretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontStretch,
    ) -> ::windows_core::HRESULT,
    pub SetFontStretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontStretch,
    ) -> ::windows_core::HRESULT,
    pub CharacterSpacing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetCharacterSpacing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub Foreground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsTabStop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsTabStop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub TabIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetTabIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    TabNavigation: usize,
    SetTabNavigation: usize,
    pub Template: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Padding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetPadding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub HorizontalContentAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::HorizontalAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalContentAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::HorizontalAlignment,
    ) -> ::windows_core::HRESULT,
    pub VerticalContentAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::VerticalAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalContentAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::VerticalAlignment,
    ) -> ::windows_core::HRESULT,
    pub Background: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BorderThickness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetBorderThickness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub BorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FocusState: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::FocusState,
    ) -> ::windows_core::HRESULT,
    pub IsEnabledChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveIsEnabledChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub ApplyTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub Focus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::FocusState,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IControl2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IControl2 {
    type Vtable = IControl2_Vtbl;
}
impl ::core::clone::Clone for IControl2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IControl2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x43e0fe10_14ec_427e_8c57_dee60df60aa8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IControl2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsTextScaleFactorEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsTextScaleFactorEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IControl3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IControl3 {
    type Vtable = IControl3_Vtbl;
}
impl ::core::clone::Clone for IControl3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IControl3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x077b29e4_dade_4f55_9b96_09e21b28eb1c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IControl3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub UseSystemFocusVisuals: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetUseSystemFocusVisuals: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IControl4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IControl4 {
    type Vtable = IControl4_Vtbl;
}
impl ::core::clone::Clone for IControl4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IControl4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0e18aeee_5f2e_44ea_8513_d3875c0a7513,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IControl4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsFocusEngagementEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsFocusEngagementEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsFocusEngaged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsFocusEngaged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub RequiresPointer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut RequiresPointer,
    ) -> ::windows_core::HRESULT,
    pub SetRequiresPointer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: RequiresPointer,
    ) -> ::windows_core::HRESULT,
    pub XYFocusLeft: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetXYFocusLeft: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub XYFocusRight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetXYFocusRight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub XYFocusUp: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetXYFocusUp: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub XYFocusDown: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetXYFocusDown: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ElementSoundMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::ElementSoundMode,
    ) -> ::windows_core::HRESULT,
    pub SetElementSoundMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::ElementSoundMode,
    ) -> ::windows_core::HRESULT,
    pub FocusEngaged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveFocusEngaged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub FocusDisengaged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveFocusDisengaged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveFocusEngagement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IControl5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IControl5 {
    type Vtable = IControl5_Vtbl;
}
impl ::core::clone::Clone for IControl5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IControl5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5ebb51d5_9e58_49b7_bc2d_0155ff118664,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IControl5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DefaultStyleResourceUri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetDefaultStyleResourceUri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IControl7(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IControl7 {
    type Vtable = IControl7_Vtbl;
}
impl ::core::clone::Clone for IControl7 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IControl7 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3550dbe1_e561_5934_a3ef_7db8bf6e3b45,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IControl7_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BackgroundSizing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut BackgroundSizing,
    ) -> ::windows_core::HRESULT,
    pub SetBackgroundSizing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: BackgroundSizing,
    ) -> ::windows_core::HRESULT,
    pub CornerRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CornerRadius,
    ) -> ::windows_core::HRESULT,
    pub SetCornerRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CornerRadius,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IControlFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IControlFactory {
    type Vtable = IControlFactory_Vtbl;
}
impl ::core::clone::Clone for IControlFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IControlFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb12b1d5a_6419_4e16_b212_a45336b75778,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IControlFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IControlOverrides(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IControlOverrides {
    type Vtable = IControlOverrides_Vtbl;
}
impl ::core::clone::Clone for IControlOverrides {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IControlOverrides {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa09691df_9824_41fe_b530_b0d8990e64c1,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IControlOverrides_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    OnPointerEntered: usize,
    OnPointerPressed: usize,
    OnPointerMoved: usize,
    OnPointerReleased: usize,
    OnPointerExited: usize,
    OnPointerCaptureLost: usize,
    OnPointerCanceled: usize,
    OnPointerWheelChanged: usize,
    OnTapped: usize,
    OnDoubleTapped: usize,
    OnHolding: usize,
    OnRightTapped: usize,
    OnManipulationStarting: usize,
    OnManipulationInertiaStarting: usize,
    OnManipulationStarted: usize,
    OnManipulationDelta: usize,
    OnManipulationCompleted: usize,
    OnKeyUp: usize,
    OnKeyDown: usize,
    pub OnGotFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnLostFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnDragEnter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnDragLeave: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnDragOver: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnDrop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IControlOverrides6(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IControlOverrides6 {
    type Vtable = IControlOverrides6_Vtbl;
}
impl ::core::clone::Clone for IControlOverrides6 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IControlOverrides6 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe194c96a_d8cc_4339_a0e1_2e9c420879ec,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IControlOverrides6_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    OnPreviewKeyDown: usize,
    OnPreviewKeyUp: usize,
    OnCharacterReceived: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IControlProtected(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IControlProtected {
    type Vtable = IControlProtected_Vtbl;
}
impl ::core::clone::Clone for IControlProtected {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IControlProtected {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1791587a_2a7c_4981_a2d8_ab99fffc65b9,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IControlProtected_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DefaultStyleKey: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetDefaultStyleKey: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetTemplateChild: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        childname: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IControlStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IControlStatics {
    type Vtable = IControlStatics_Vtbl;
}
impl ::core::clone::Clone for IControlStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IControlStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x473b305b_877d_4c35_8fca_46a05f96607a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IControlStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub FontSizeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontFamilyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontWeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontStretchProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CharacterSpacingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsTabStopProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TabIndexProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TabNavigationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PaddingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HorizontalContentAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub VerticalContentAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BackgroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BorderThicknessProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BorderBrushProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DefaultStyleKeyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FocusStateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IControlStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IControlStatics2 {
    type Vtable = IControlStatics2_Vtbl;
}
impl ::core::clone::Clone for IControlStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IControlStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x32233e36_ab74_4a25_a556_45293135b2c5,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IControlStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsTextScaleFactorEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IControlStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IControlStatics3 {
    type Vtable = IControlStatics3_Vtbl;
}
impl ::core::clone::Clone for IControlStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IControlStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xaad15e61_e4b9_4d72_b653_934149aa5003,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IControlStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub UseSystemFocusVisualsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsTemplateFocusTargetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetIsTemplateFocusTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsTemplateFocusTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IControlStatics4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IControlStatics4 {
    type Vtable = IControlStatics4_Vtbl;
}
impl ::core::clone::Clone for IControlStatics4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IControlStatics4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x59fda728_c05a_4ec2_8a4b_06ad69b66e15,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IControlStatics4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsFocusEngagementEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsFocusEngagedProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RequiresPointerProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub XYFocusLeftProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub XYFocusRightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub XYFocusUpProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub XYFocusDownProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ElementSoundModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IControlStatics5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IControlStatics5 {
    type Vtable = IControlStatics5_Vtbl;
}
impl ::core::clone::Clone for IControlStatics5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IControlStatics5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf635b5a3_ef8e_404f_877b_5580473710a6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IControlStatics5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DefaultStyleResourceUriProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsTemplateKeyTipTargetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetIsTemplateKeyTipTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsTemplateKeyTipTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IControlStatics7(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IControlStatics7 {
    type Vtable = IControlStatics7_Vtbl;
}
impl ::core::clone::Clone for IControlStatics7 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IControlStatics7 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xaee1ca45_c910_5dab_a266_fdf50c0bedd2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IControlStatics7_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BackgroundSizingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CornerRadiusProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IControlTemplate(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IControlTemplate {
    type Vtable = IControlTemplate_Vtbl;
}
impl ::core::clone::Clone for IControlTemplate {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IControlTemplate {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xefd2418e_41e0_48bb_8b82_91eda1ba3fe2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IControlTemplate_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    TargetType: usize,
    SetTargetType: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDataTemplateSelector(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDataTemplateSelector {
    type Vtable = IDataTemplateSelector_Vtbl;
}
impl ::core::clone::Clone for IDataTemplateSelector {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDataTemplateSelector {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa907d496_46a0_4cd7_8dbe_f9a581df60b1,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataTemplateSelector_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        item: *mut ::core::ffi::c_void,
        container: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDataTemplateSelector2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDataTemplateSelector2 {
    type Vtable = IDataTemplateSelector2_Vtbl;
}
impl ::core::clone::Clone for IDataTemplateSelector2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDataTemplateSelector2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3792bc47_8c4b_4257_a5ae_cc3f8ed786eb,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataTemplateSelector2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectTemplateForItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        item: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDataTemplateSelectorFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDataTemplateSelectorFactory {
    type Vtable = IDataTemplateSelectorFactory_Vtbl;
}
impl ::core::clone::Clone for IDataTemplateSelectorFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDataTemplateSelectorFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x511baad0_210a_457d_9521_433d2b11b7d2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataTemplateSelectorFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDataTemplateSelectorOverrides(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDataTemplateSelectorOverrides {
    type Vtable = IDataTemplateSelectorOverrides_Vtbl;
}
impl ::core::clone::Clone for IDataTemplateSelectorOverrides {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDataTemplateSelectorOverrides {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x2d162925_5966_4bfa_8638_4d345689f6cf,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataTemplateSelectorOverrides_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectTemplateCore: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        item: *mut ::core::ffi::c_void,
        container: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDataTemplateSelectorOverrides2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDataTemplateSelectorOverrides2 {
    type Vtable = IDataTemplateSelectorOverrides2_Vtbl;
}
impl ::core::clone::Clone for IDataTemplateSelectorOverrides2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDataTemplateSelectorOverrides2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6c3fb5fc_8e84_4c91_ac15_04a1d885500f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataTemplateSelectorOverrides2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectTemplateForItemCore: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        item: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDatePickedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDatePickedEventArgs {
    type Vtable = IDatePickedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IDatePickedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDatePickedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa1527b12_59c1_4521_b28c_b176675e7c5a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDatePickedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OldDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub NewDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDatePicker(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDatePicker {
    type Vtable = IDatePicker_Vtbl;
}
impl ::core::clone::Clone for IDatePicker {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDatePicker {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x06da3946_08b8_4103_8b8a_093efd6a7657,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDatePicker_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Header: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CalendarIdentifier: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetCalendarIdentifier: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub Date: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub SetDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub DayVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetDayVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub MonthVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetMonthVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub YearVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetYearVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub DayFormat: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetDayFormat: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub MonthFormat: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetMonthFormat: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub YearFormat: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetYearFormat: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub MinYear: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub SetMinYear: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub MaxYear: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub SetMaxYear: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub Orientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Orientation,
    ) -> ::windows_core::HRESULT,
    pub SetOrientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Orientation,
    ) -> ::windows_core::HRESULT,
    pub DateChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveDateChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDatePicker2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDatePicker2 {
    type Vtable = IDatePicker2_Vtbl;
}
impl ::core::clone::Clone for IDatePicker2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDatePicker2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xbb28b475_2c1f_4340_9e30_948f99c9e57a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDatePicker2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LightDismissOverlayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut LightDismissOverlayMode,
    ) -> ::windows_core::HRESULT,
    pub SetLightDismissOverlayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: LightDismissOverlayMode,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDatePicker3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDatePicker3 {
    type Vtable = IDatePicker3_Vtbl;
}
impl ::core::clone::Clone for IDatePicker3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDatePicker3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x7da12a3b_a764_5ae1_abae_6affc1428e1e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDatePicker3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectedDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectedDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedDateChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveSelectedDateChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDatePickerFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDatePickerFactory {
    type Vtable = IDatePickerFactory_Vtbl;
}
impl ::core::clone::Clone for IDatePickerFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDatePickerFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xeec3ca84_9896_4a7d_bb35_6fb21eaeca11,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDatePickerFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDatePickerFlyout(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDatePickerFlyout {
    type Vtable = IDatePickerFlyout_Vtbl;
}
impl ::core::clone::Clone for IDatePickerFlyout {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDatePickerFlyout {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xfbf33b1a_a3a4_4df8_9228_23a5ac27df4e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDatePickerFlyout_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CalendarIdentifier: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetCalendarIdentifier: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub Date: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub SetDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub DayVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetDayVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub MonthVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetMonthVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub YearVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetYearVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub MinYear: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub SetMinYear: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub MaxYear: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub SetMaxYear: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub DatePicked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveDatePicked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub ShowAtAsync: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDatePickerFlyout2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDatePickerFlyout2 {
    type Vtable = IDatePickerFlyout2_Vtbl;
}
impl ::core::clone::Clone for IDatePickerFlyout2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDatePickerFlyout2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xcfb18dbb_9931_4119_8bda_54a86fdfac84,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDatePickerFlyout2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DayFormat: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetDayFormat: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub MonthFormat: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetMonthFormat: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub YearFormat: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetYearFormat: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDatePickerFlyoutItem(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDatePickerFlyoutItem {
    type Vtable = IDatePickerFlyoutItem_Vtbl;
}
impl ::core::clone::Clone for IDatePickerFlyoutItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDatePickerFlyoutItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9d9bc289_00d2_4aac_9c85_d74f06367887,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDatePickerFlyoutItem_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PrimaryText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetPrimaryText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SecondaryText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetSecondaryText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDatePickerFlyoutItemStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDatePickerFlyoutItemStatics {
    type Vtable = IDatePickerFlyoutItemStatics_Vtbl;
}
impl ::core::clone::Clone for IDatePickerFlyoutItemStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDatePickerFlyoutItemStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xaa9c91da_07f6_4cdf_89b4_dda3bdb0ea6b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDatePickerFlyoutItemStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PrimaryTextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SecondaryTextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDatePickerFlyoutPresenter(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDatePickerFlyoutPresenter {
    type Vtable = IDatePickerFlyoutPresenter_Vtbl;
}
impl ::core::clone::Clone for IDatePickerFlyoutPresenter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDatePickerFlyoutPresenter {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x7c62f70e_2ddc_4381_832f_54cbdfaa849a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDatePickerFlyoutPresenter_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDatePickerFlyoutPresenter2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDatePickerFlyoutPresenter2 {
    type Vtable = IDatePickerFlyoutPresenter2_Vtbl;
}
impl ::core::clone::Clone for IDatePickerFlyoutPresenter2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDatePickerFlyoutPresenter2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc5b2578f_96d8_55cc_97ee_3f88fc85e479,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDatePickerFlyoutPresenter2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsDefaultShadowEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsDefaultShadowEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDatePickerFlyoutPresenterStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDatePickerFlyoutPresenterStatics2 {
    type Vtable = IDatePickerFlyoutPresenterStatics2_Vtbl;
}
impl ::core::clone::Clone for IDatePickerFlyoutPresenterStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDatePickerFlyoutPresenterStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4dc0c49e_1f8e_5966_bbdb_215750c73aba,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDatePickerFlyoutPresenterStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsDefaultShadowEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDatePickerFlyoutStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDatePickerFlyoutStatics {
    type Vtable = IDatePickerFlyoutStatics_Vtbl;
}
impl ::core::clone::Clone for IDatePickerFlyoutStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDatePickerFlyoutStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xcd570377_5845_4c12_8c10_592d9fcc7cd9,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDatePickerFlyoutStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CalendarIdentifierProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DayVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MonthVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub YearVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MinYearProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxYearProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDatePickerFlyoutStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDatePickerFlyoutStatics2 {
    type Vtable = IDatePickerFlyoutStatics2_Vtbl;
}
impl ::core::clone::Clone for IDatePickerFlyoutStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDatePickerFlyoutStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xafd3e569_81e6_4b54_84a9_68079b73e34e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDatePickerFlyoutStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DayFormatProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MonthFormatProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub YearFormatProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDatePickerSelectedValueChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDatePickerSelectedValueChangedEventArgs {
    type Vtable = IDatePickerSelectedValueChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IDatePickerSelectedValueChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDatePickerSelectedValueChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x564dceed_744a_5c3a_9bd2_4dcd9919a7b7,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDatePickerSelectedValueChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OldDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub NewDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDatePickerStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDatePickerStatics {
    type Vtable = IDatePickerStatics_Vtbl;
}
impl ::core::clone::Clone for IDatePickerStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDatePickerStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x182e7c69_2116_4c67_b513_713364831d79,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDatePickerStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CalendarIdentifierProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DayVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MonthVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub YearVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DayFormatProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MonthFormatProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub YearFormatProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MinYearProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxYearProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OrientationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDatePickerStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDatePickerStatics2 {
    type Vtable = IDatePickerStatics2_Vtbl;
}
impl ::core::clone::Clone for IDatePickerStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDatePickerStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf1076df6_fba6_4550_8b88_a6420847f60d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDatePickerStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LightDismissOverlayModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDatePickerStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDatePickerStatics3 {
    type Vtable = IDatePickerStatics3_Vtbl;
}
impl ::core::clone::Clone for IDatePickerStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDatePickerStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa9f80afe_a30a_5f26_a446_fec2075d4a0e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDatePickerStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectedDateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDatePickerValueChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDatePickerValueChangedEventArgs {
    type Vtable = IDatePickerValueChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IDatePickerValueChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDatePickerValueChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1ae661b2_b1b4_4273_96e0_19daff187446,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDatePickerValueChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OldDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
    pub NewDate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::DateTime,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDragItemsCompletedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDragItemsCompletedEventArgs {
    type Vtable = IDragItemsCompletedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IDragItemsCompletedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDragItemsCompletedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xaf05f22f_9e78_4b21_9a8e_41c2d1367a2a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDragItemsCompletedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Items: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    DropResult: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDragItemsStartingEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDragItemsStartingEventArgs {
    type Vtable = IDragItemsStartingEventArgs_Vtbl;
}
impl ::core::clone::Clone for IDragItemsStartingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDragItemsStartingEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x71cf215c_daed_4783_aa11_dc574d2713e9,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDragItemsStartingEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Cancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Items: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    Data: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDropDownButton(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDropDownButton {
    type Vtable = IDropDownButton_Vtbl;
}
impl ::core::clone::Clone for IDropDownButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDropDownButton {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x671f74e6_2a27_5fa8_b0a2_79b2e71ebd87,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDropDownButton_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDropDownButtonAutomationPeer(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDropDownButtonAutomationPeer {
    type Vtable = IDropDownButtonAutomationPeer_Vtbl;
}
impl ::core::clone::Clone for IDropDownButtonAutomationPeer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDropDownButtonAutomationPeer {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x72f294f1_bff6_5d07_9db4_54134506bc80,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDropDownButtonAutomationPeer_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDropDownButtonAutomationPeerFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDropDownButtonAutomationPeerFactory {
    type Vtable = IDropDownButtonAutomationPeerFactory_Vtbl;
}
impl ::core::clone::Clone for IDropDownButtonAutomationPeerFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDropDownButtonAutomationPeerFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb8c449b2_6354_5c0c_9e95_e0c99a293a44,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDropDownButtonAutomationPeerFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        owner: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDropDownButtonFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDropDownButtonFactory {
    type Vtable = IDropDownButtonFactory_Vtbl;
}
impl ::core::clone::Clone for IDropDownButtonFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDropDownButtonFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0d9f8ab5_e70d_52bd_9ca0_36ceecaa642a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDropDownButtonFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDynamicOverflowItemsChangingEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDynamicOverflowItemsChangingEventArgs {
    type Vtable = IDynamicOverflowItemsChangingEventArgs_Vtbl;
}
impl ::core::clone::Clone for IDynamicOverflowItemsChangingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDynamicOverflowItemsChangingEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc93c736f_6f6e_4e43_90d9_9b46a0d88b9f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDynamicOverflowItemsChangingEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Action: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CommandBarDynamicOverflowAction,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFlipView(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFlipView {
    type Vtable = IFlipView_Vtbl;
}
impl ::core::clone::Clone for IFlipView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFlipView {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa1582f68_3d7d_4d3b_b71d_488eed1e3493,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFlipView_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFlipView2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFlipView2 {
    type Vtable = IFlipView2_Vtbl;
}
impl ::core::clone::Clone for IFlipView2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFlipView2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc4fea4fd_7af3_4952_9fd9_9e0987fc4f29,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFlipView2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub UseTouchAnimationsForAllNavigation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetUseTouchAnimationsForAllNavigation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFlipViewFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFlipViewFactory {
    type Vtable = IFlipViewFactory_Vtbl;
}
impl ::core::clone::Clone for IFlipViewFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFlipViewFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf1dea9be_9ae8_4d4b_ab43_16d31e05f4f3,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFlipViewFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFlipViewItem(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFlipViewItem {
    type Vtable = IFlipViewItem_Vtbl;
}
impl ::core::clone::Clone for IFlipViewItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFlipViewItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x56196565_ce2b_4bda_a36b_82a2b8b0d4c0,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFlipViewItem_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFlipViewItemFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFlipViewItemFactory {
    type Vtable = IFlipViewItemFactory_Vtbl;
}
impl ::core::clone::Clone for IFlipViewItemFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFlipViewItemFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf21d91fe_22a0_4412_a853_9d6a6e8f2aaf,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFlipViewItemFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFlipViewStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFlipViewStatics2 {
    type Vtable = IFlipViewStatics2_Vtbl;
}
impl ::core::clone::Clone for IFlipViewStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFlipViewStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x70e3d93f_4308_4ba2_bbce_e2cb0ed34476,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFlipViewStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub UseTouchAnimationsForAllNavigationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFlyout(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFlyout {
    type Vtable = IFlyout_Vtbl;
}
impl ::core::clone::Clone for IFlyout {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFlyout {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6584ebdf_cbc7_4e19_843a_a14f24a793ea,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFlyout_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Content: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FlyoutPresenterStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetFlyoutPresenterStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFlyoutFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFlyoutFactory {
    type Vtable = IFlyoutFactory_Vtbl;
}
impl ::core::clone::Clone for IFlyoutFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFlyoutFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4bed4933_008e_4b03_a385_79fe5266ddba,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFlyoutFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFlyoutPresenter(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFlyoutPresenter {
    type Vtable = IFlyoutPresenter_Vtbl;
}
impl ::core::clone::Clone for IFlyoutPresenter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFlyoutPresenter {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x827d5b79_e37b_46a5_8d44_63a11a580e83,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFlyoutPresenter_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFlyoutPresenter2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFlyoutPresenter2 {
    type Vtable = IFlyoutPresenter2_Vtbl;
}
impl ::core::clone::Clone for IFlyoutPresenter2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFlyoutPresenter2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4f857e92_36b4_5048_9051_a992b43e8a1d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFlyoutPresenter2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsDefaultShadowEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsDefaultShadowEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFlyoutPresenterFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFlyoutPresenterFactory {
    type Vtable = IFlyoutPresenterFactory_Vtbl;
}
impl ::core::clone::Clone for IFlyoutPresenterFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFlyoutPresenterFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xee4d668f_da76_469a_acd7_3060e613ade7,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFlyoutPresenterFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFlyoutPresenterStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFlyoutPresenterStatics2 {
    type Vtable = IFlyoutPresenterStatics2_Vtbl;
}
impl ::core::clone::Clone for IFlyoutPresenterStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFlyoutPresenterStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1492ae4b_2727_5e8e_9105_6d7a2b1185b2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFlyoutPresenterStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsDefaultShadowEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFlyoutStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFlyoutStatics {
    type Vtable = IFlyoutStatics_Vtbl;
}
impl ::core::clone::Clone for IFlyoutStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFlyoutStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x61364e0b_db75_47e1_b2c3_5b901c3d74b6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFlyoutStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ContentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FlyoutPresenterStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFocusDisengagedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFocusDisengagedEventArgs {
    type Vtable = IFocusDisengagedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IFocusDisengagedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFocusDisengagedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5e14280f_953e_4cf8_b9ea_c530a1ce02ad,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFocusDisengagedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFocusEngagedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFocusEngagedEventArgs {
    type Vtable = IFocusEngagedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IFocusEngagedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFocusEngagedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa69fc352_da66_404c_823f_5358594e70bb,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFocusEngagedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFocusEngagedEventArgs2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFocusEngagedEventArgs2 {
    type Vtable = IFocusEngagedEventArgs2_Vtbl;
}
impl ::core::clone::Clone for IFocusEngagedEventArgs2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFocusEngagedEventArgs2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4a59e0f4_87c0_4ccd_93c4_a3a01ce39265,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFocusEngagedEventArgs2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFontIcon(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFontIcon {
    type Vtable = IFontIcon_Vtbl;
}
impl ::core::clone::Clone for IFontIcon {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFontIcon {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd4d61391_39ac_4950_9166_3606c264418b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFontIcon_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Glyph: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetGlyph: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub FontSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetFontSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub FontFamily: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetFontFamily: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontWeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontWeight,
    ) -> ::windows_core::HRESULT,
    pub SetFontWeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontWeight,
    ) -> ::windows_core::HRESULT,
    pub FontStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontStyle,
    ) -> ::windows_core::HRESULT,
    pub SetFontStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontStyle,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFontIcon2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFontIcon2 {
    type Vtable = IFontIcon2_Vtbl;
}
impl ::core::clone::Clone for IFontIcon2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFontIcon2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf6ebd84d_37e8_46ee_a574_41ad550482e0,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFontIcon2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsTextScaleFactorEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsTextScaleFactorEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFontIcon3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFontIcon3 {
    type Vtable = IFontIcon3_Vtbl;
}
impl ::core::clone::Clone for IFontIcon3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFontIcon3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6155d919_1c6c_4950_8794_231ef0914d94,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFontIcon3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub MirroredWhenRightToLeft: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetMirroredWhenRightToLeft: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFontIconFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFontIconFactory {
    type Vtable = IFontIconFactory_Vtbl;
}
impl ::core::clone::Clone for IFontIconFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFontIconFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1c781b6b_37bf_4ddc_a1a8_1b77db3cf0ea,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFontIconFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFontIconSource(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFontIconSource {
    type Vtable = IFontIconSource_Vtbl;
}
impl ::core::clone::Clone for IFontIconSource {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFontIconSource {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x2211ac9a_74e3_43ed_b61c_21afc7df4d10,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFontIconSource_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Glyph: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetGlyph: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub FontSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetFontSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub FontFamily: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetFontFamily: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontWeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontWeight,
    ) -> ::windows_core::HRESULT,
    pub SetFontWeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontWeight,
    ) -> ::windows_core::HRESULT,
    pub FontStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontStyle,
    ) -> ::windows_core::HRESULT,
    pub SetFontStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontStyle,
    ) -> ::windows_core::HRESULT,
    pub IsTextScaleFactorEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsTextScaleFactorEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub MirroredWhenRightToLeft: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetMirroredWhenRightToLeft: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFontIconSourceFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFontIconSourceFactory {
    type Vtable = IFontIconSourceFactory_Vtbl;
}
impl ::core::clone::Clone for IFontIconSourceFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFontIconSourceFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8bdcf6bd_fc06_42b8_b30b_7505082ac38f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFontIconSourceFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFontIconSourceStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFontIconSourceStatics {
    type Vtable = IFontIconSourceStatics_Vtbl;
}
impl ::core::clone::Clone for IFontIconSourceStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFontIconSourceStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8c0e422f_8269_43b1_b95a_ef070e86770d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFontIconSourceStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub GlyphProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontSizeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontFamilyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontWeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsTextScaleFactorEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MirroredWhenRightToLeftProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFontIconStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFontIconStatics {
    type Vtable = IFontIconStatics_Vtbl;
}
impl ::core::clone::Clone for IFontIconStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFontIconStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb3be7bf6_1467_4086_bbcb_4e21d97a7b4d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFontIconStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub GlyphProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontSizeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontFamilyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontWeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFontIconStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFontIconStatics2 {
    type Vtable = IFontIconStatics2_Vtbl;
}
impl ::core::clone::Clone for IFontIconStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFontIconStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe6080672_08f8_43d3_8790_4604290cbebd,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFontIconStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsTextScaleFactorEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFontIconStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFontIconStatics3 {
    type Vtable = IFontIconStatics3_Vtbl;
}
impl ::core::clone::Clone for IFontIconStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFontIconStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa4528b17_b084_4bd5_aab4_feae9d3b5d26,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFontIconStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub MirroredWhenRightToLeftProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFrame(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFrame {
    type Vtable = IFrame_Vtbl;
}
impl ::core::clone::Clone for IFrame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFrame {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x68ea500b_3fe9_4735_b6a0_e7601933b089,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFrame_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CacheSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetCacheSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub CanGoBack: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub CanGoForward: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    CurrentSourcePageType: usize,
    SourcePageType: usize,
    SetSourcePageType: usize,
    pub BackStackDepth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    Navigated: usize,
    pub RemoveNavigated: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    Navigating: usize,
    pub RemoveNavigating: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    NavigationFailed: usize,
    pub RemoveNavigationFailed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    NavigationStopped: usize,
    pub RemoveNavigationStopped: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub GoBack: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GoForward: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    Navigate: usize,
    pub GetNavigationState: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetNavigationState: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        navigationstate: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFrame2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFrame2 {
    type Vtable = IFrame2_Vtbl;
}
impl ::core::clone::Clone for IFrame2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFrame2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3f367f87_9f5a_4b04_b818_b554c069597a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFrame2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    BackStack: usize,
    ForwardStack: usize,
    Navigate: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFrame3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFrame3 {
    type Vtable = IFrame3_Vtbl;
}
impl ::core::clone::Clone for IFrame3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFrame3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x648a2b4d_53ca_4b5a_aa8e_3cc7440f4a67,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFrame3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    GoBack: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFrame4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFrame4 {
    type Vtable = IFrame4_Vtbl;
}
impl ::core::clone::Clone for IFrame4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFrame4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9b17c21a_bd2b_4a00_99eb_946be9618084,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFrame4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SetNavigationStateWithNavigationControl: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        navigationstate: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
        suppressnavigate: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFrame5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFrame5 {
    type Vtable = IFrame5_Vtbl;
}
impl ::core::clone::Clone for IFrame5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFrame5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x453fb92e_82b5_5f93_92ab_15341806c9da,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFrame5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsNavigationStackEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsNavigationStackEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    NavigateToType: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFrameFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFrameFactory {
    type Vtable = IFrameFactory_Vtbl;
}
impl ::core::clone::Clone for IFrameFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFrameFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x02ee93d4_448e_469e_9799_0a8a1f70f171,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFrameFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFrameStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFrameStatics {
    type Vtable = IFrameStatics_Vtbl;
}
impl ::core::clone::Clone for IFrameStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFrameStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd5acf0e9_d967_471b_8459_c8af4341511b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFrameStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CacheSizeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CanGoBackProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CanGoForwardProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CurrentSourcePageTypeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SourcePageTypeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BackStackDepthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFrameStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFrameStatics2 {
    type Vtable = IFrameStatics2_Vtbl;
}
impl ::core::clone::Clone for IFrameStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFrameStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe4b5cdfe_42f0_4462_a1c1_5d259dd82a03,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFrameStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BackStackProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ForwardStackProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFrameStatics5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFrameStatics5 {
    type Vtable = IFrameStatics5_Vtbl;
}
impl ::core::clone::Clone for IFrameStatics5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFrameStatics5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x53c89b25_f0e0_58f1_a06d_441075914ff8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IFrameStatics5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsNavigationStackEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGrid(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGrid {
    type Vtable = IGrid_Vtbl;
}
impl ::core::clone::Clone for IGrid {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGrid {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xfd104460_2e15_4ba3_8b8f_fa693a4161e9,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGrid_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub RowDefinitions: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ColumnDefinitions: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGrid2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGrid2 {
    type Vtable = IGrid2_Vtbl;
}
impl ::core::clone::Clone for IGrid2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGrid2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf76efa41_380e_45db_be87_9e1326ba4b57,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGrid2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BorderThickness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetBorderThickness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub CornerRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CornerRadius,
    ) -> ::windows_core::HRESULT,
    pub SetCornerRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CornerRadius,
    ) -> ::windows_core::HRESULT,
    pub Padding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetPadding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGrid3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGrid3 {
    type Vtable = IGrid3_Vtbl;
}
impl ::core::clone::Clone for IGrid3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGrid3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x12dfc5fc_2342_4dd2_9e7d_2090a171d1ef,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGrid3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub RowSpacing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetRowSpacing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub ColumnSpacing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetColumnSpacing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGrid4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGrid4 {
    type Vtable = IGrid4_Vtbl;
}
impl ::core::clone::Clone for IGrid4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGrid4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xed02d274_81f1_5ac2_a0c3_bbdaf5a3ffee,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGrid4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BackgroundSizing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut BackgroundSizing,
    ) -> ::windows_core::HRESULT,
    pub SetBackgroundSizing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: BackgroundSizing,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGridFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGridFactory {
    type Vtable = IGridFactory_Vtbl;
}
impl ::core::clone::Clone for IGridFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGridFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xae814041_c531_43b4_bf99_12f506f7b01c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGridFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGridStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGridStatics {
    type Vtable = IGridStatics_Vtbl;
}
impl ::core::clone::Clone for IGridStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGridStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x64fe2e9f_f951_42b6_a9ce_bb179af11595,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGridStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub RowProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetRow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetRow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub ColumnProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetColumn: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetColumn: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub RowSpanProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetRowSpan: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetRowSpan: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub ColumnSpanProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetColumnSpan: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetColumnSpan: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGridStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGridStatics2 {
    type Vtable = IGridStatics2_Vtbl;
}
impl ::core::clone::Clone for IGridStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGridStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x2d666658_58b6_4a1b_841b_875ba93b5d6a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGridStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BorderBrushProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BorderThicknessProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CornerRadiusProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PaddingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGridStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGridStatics3 {
    type Vtable = IGridStatics3_Vtbl;
}
impl ::core::clone::Clone for IGridStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGridStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc3fba437_5a0c_407a_9621_79545386d811,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGridStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub RowSpacingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ColumnSpacingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGridStatics4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGridStatics4 {
    type Vtable = IGridStatics4_Vtbl;
}
impl ::core::clone::Clone for IGridStatics4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGridStatics4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x691af349_1f63_57aa_8726_9cdcc1b14c02,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGridStatics4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BackgroundSizingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGridView(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGridView {
    type Vtable = IGridView_Vtbl;
}
impl ::core::clone::Clone for IGridView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGridView {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x026ae934_b67e_4d80_8f72_8aa64b4d827b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGridView_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGridViewFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGridViewFactory {
    type Vtable = IGridViewFactory_Vtbl;
}
impl ::core::clone::Clone for IGridViewFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGridViewFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd9bcca89_09f9_4c6e_a83e_f199146f0e7d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGridViewFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGridViewHeaderItem(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGridViewHeaderItem {
    type Vtable = IGridViewHeaderItem_Vtbl;
}
impl ::core::clone::Clone for IGridViewHeaderItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGridViewHeaderItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x72d75d7e_5dc3_4ffc_9b1c_939b5c37161c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGridViewHeaderItem_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGridViewHeaderItemFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGridViewHeaderItemFactory {
    type Vtable = IGridViewHeaderItemFactory_Vtbl;
}
impl ::core::clone::Clone for IGridViewHeaderItemFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGridViewHeaderItemFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x36e0c96e_b56a_4b3b_8bac_7aef5e6f9945,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGridViewHeaderItemFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGridViewItem(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGridViewItem {
    type Vtable = IGridViewItem_Vtbl;
}
impl ::core::clone::Clone for IGridViewItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGridViewItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x7d9901f1_e7c1_4e83_b470_c9d6d7bda9f5,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGridViewItem_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TemplateSettings: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGridViewItemFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGridViewItemFactory {
    type Vtable = IGridViewItemFactory_Vtbl;
}
impl ::core::clone::Clone for IGridViewItemFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGridViewItemFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x229b00af_3fa6_43e9_979d_07ea0d6280dc,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGridViewItemFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGroupItem(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGroupItem {
    type Vtable = IGroupItem_Vtbl;
}
impl ::core::clone::Clone for IGroupItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGroupItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4ae8d5d1_7228_4a16_a61f_88c0e8f45c76,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGroupItem_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGroupItemFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGroupItemFactory {
    type Vtable = IGroupItemFactory_Vtbl;
}
impl ::core::clone::Clone for IGroupItemFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGroupItemFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd9a1d53e_b1e0_4319_9808_7a9e887e13b0,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGroupItemFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGroupStyle(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGroupStyle {
    type Vtable = IGroupStyle_Vtbl;
}
impl ::core::clone::Clone for IGroupStyle {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGroupStyle {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x71ca300b_b89e_4184_b0df_a9e95447de8d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGroupStyle_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Panel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPanel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    ContainerStyle: usize,
    SetContainerStyle: usize,
    ContainerStyleSelector: usize,
    SetContainerStyleSelector: usize,
    pub HeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplateSelector: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeaderTemplateSelector: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HidesIfEmpty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetHidesIfEmpty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGroupStyle2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGroupStyle2 {
    type Vtable = IGroupStyle2_Vtbl;
}
impl ::core::clone::Clone for IGroupStyle2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGroupStyle2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x69f90679_3a11_4fe7_b4df_2a0139d4018b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGroupStyle2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HeaderContainerStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeaderContainerStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGroupStyleFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGroupStyleFactory {
    type Vtable = IGroupStyleFactory_Vtbl;
}
impl ::core::clone::Clone for IGroupStyleFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGroupStyleFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x56ff664f_e2d7_4f49_803d_c727cdf9372d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGroupStyleFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGroupStyleSelector(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGroupStyleSelector {
    type Vtable = IGroupStyleSelector_Vtbl;
}
impl ::core::clone::Clone for IGroupStyleSelector {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGroupStyleSelector {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6dda119e_9a74_478f_a339_5bb52de6c51e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGroupStyleSelector_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectGroupStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        group: *mut ::core::ffi::c_void,
        level: u32,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGroupStyleSelectorFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGroupStyleSelectorFactory {
    type Vtable = IGroupStyleSelectorFactory_Vtbl;
}
impl ::core::clone::Clone for IGroupStyleSelectorFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGroupStyleSelectorFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xbf570d33_b2f6_481f_a450_c80c291fb22d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGroupStyleSelectorFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGroupStyleSelectorOverrides(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGroupStyleSelectorOverrides {
    type Vtable = IGroupStyleSelectorOverrides_Vtbl;
}
impl ::core::clone::Clone for IGroupStyleSelectorOverrides {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGroupStyleSelectorOverrides {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf691cab2_77ad_4d3d_a51c_8ef9c3836456,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGroupStyleSelectorOverrides_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectGroupStyleCore: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        group: *mut ::core::ffi::c_void,
        level: u32,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHandwritingPanelClosedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IHandwritingPanelClosedEventArgs {
    type Vtable = IHandwritingPanelClosedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IHandwritingPanelClosedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHandwritingPanelClosedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4fb91c73_192d_4dd2_a1a2_80ed01125876,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHandwritingPanelClosedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHandwritingPanelOpenedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IHandwritingPanelOpenedEventArgs {
    type Vtable = IHandwritingPanelOpenedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IHandwritingPanelOpenedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHandwritingPanelOpenedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xfc15b16d_9f15_47b0_b97a_94a68cc61345,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHandwritingPanelOpenedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHandwritingView(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IHandwritingView {
    type Vtable = IHandwritingView_Vtbl;
}
impl ::core::clone::Clone for IHandwritingView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHandwritingView {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc44204a7_31e0_44bc_a38b_4bee64ecd99f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHandwritingView_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PlacementTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPlacementTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PlacementAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut HandwritingPanelPlacementAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetPlacementAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: HandwritingPanelPlacementAlignment,
    ) -> ::windows_core::HRESULT,
    pub IsOpen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub AreCandidatesEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAreCandidatesEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Opened: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveOpened: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub Closed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveClosed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub TryClose: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub TryOpen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHandwritingView2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IHandwritingView2 {
    type Vtable = IHandwritingView2_Vtbl;
}
impl ::core::clone::Clone for IHandwritingView2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHandwritingView2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4bcf991b_0de1_5c9e_8970_37b9878fe171,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHandwritingView2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsSwitchToKeyboardEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsSwitchToKeyboardEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsCommandBarOpen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsCommandBarOpen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    InputDeviceTypes: usize,
    SetInputDeviceTypes: usize,
    pub CandidatesChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveCandidatesChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub TextSubmitted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveTextSubmitted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub GetCandidates: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        candidatessessionid: u32,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectCandidate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        candidatessessionid: u32,
        selectedcandidateindex: u32,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHandwritingViewCandidatesChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IHandwritingViewCandidatesChangedEventArgs {
    type Vtable = IHandwritingViewCandidatesChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IHandwritingViewCandidatesChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHandwritingViewCandidatesChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6f5f63d8_56b1_56c5_a416_c19c16bf7884,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHandwritingViewCandidatesChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CandidatesSessionId: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut u32,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHandwritingViewFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IHandwritingViewFactory {
    type Vtable = IHandwritingViewFactory_Vtbl;
}
impl ::core::clone::Clone for IHandwritingViewFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHandwritingViewFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe00c873f_0012_475c_890c_97ae308642de,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHandwritingViewFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHandwritingViewStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IHandwritingViewStatics {
    type Vtable = IHandwritingViewStatics_Vtbl;
}
impl ::core::clone::Clone for IHandwritingViewStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHandwritingViewStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xbb7ceed0_cc5f_4004_b8c8_142e195f0618,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHandwritingViewStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PlacementTargetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PlacementAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsOpenProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AreCandidatesEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHandwritingViewStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IHandwritingViewStatics2 {
    type Vtable = IHandwritingViewStatics2_Vtbl;
}
impl ::core::clone::Clone for IHandwritingViewStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHandwritingViewStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x2cd052e4_d703_5183_a1be_7e285df978d9,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHandwritingViewStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsSwitchToKeyboardEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsCommandBarOpenProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHandwritingViewTextSubmittedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IHandwritingViewTextSubmittedEventArgs {
    type Vtable = IHandwritingViewTextSubmittedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IHandwritingViewTextSubmittedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHandwritingViewTextSubmittedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x55ac0f47_f5e4_55da_b8a3_d418b7564291,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHandwritingViewTextSubmittedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHub(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IHub {
    type Vtable = IHub_Vtbl;
}
impl ::core::clone::Clone for IHub {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHub {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xae692e82_7314_4f51_ab11_2af1ed4a19f8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHub_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Header: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Orientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Orientation,
    ) -> ::windows_core::HRESULT,
    pub SetOrientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Orientation,
    ) -> ::windows_core::HRESULT,
    pub DefaultSectionIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetDefaultSectionIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub Sections: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SectionsInView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SectionHeaders: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SectionHeaderClick: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveSectionHeaderClick: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub SectionsInViewChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveSectionsInViewChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub ScrollToSection: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        section: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHubFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IHubFactory {
    type Vtable = IHubFactory_Vtbl;
}
impl ::core::clone::Clone for IHubFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHubFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xdca6b2ba_c6f5_4961_9953_c51873db5424,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHubFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHubSection(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IHubSection {
    type Vtable = IHubSection_Vtbl;
}
impl ::core::clone::Clone for IHubSection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHubSection {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa4e66cb7_7fdd_4fe0_ab49_c246639dccf9,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHubSection_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Header: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContentTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetContentTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsHeaderInteractive: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsHeaderInteractive: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHubSectionFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IHubSectionFactory {
    type Vtable = IHubSectionFactory_Vtbl;
}
impl ::core::clone::Clone for IHubSectionFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHubSectionFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xfff55fa2_ece4_4bba_aa3b_9804aef47883,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHubSectionFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHubSectionHeaderClickEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IHubSectionHeaderClickEventArgs {
    type Vtable = IHubSectionHeaderClickEventArgs_Vtbl;
}
impl ::core::clone::Clone for IHubSectionHeaderClickEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHubSectionHeaderClickEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe1c5ef04_1edd_4112_aeeb_996c96400698,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHubSectionHeaderClickEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Section: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHubSectionStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IHubSectionStatics {
    type Vtable = IHubSectionStatics_Vtbl;
}
impl ::core::clone::Clone for IHubSectionStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHubSectionStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x12d2d85a_ea27_42d1_998b_61e52aed842b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHubSectionStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContentTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsHeaderInteractiveProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHubStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IHubStatics {
    type Vtable = IHubStatics_Vtbl;
}
impl ::core::clone::Clone for IHubStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHubStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0e6fa034_ad3c_4f32_b701_e24fab562028,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHubStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OrientationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DefaultSectionIndexProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SemanticZoomOwnerProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsActiveViewProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsZoomedInViewProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHyperlinkButton(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IHyperlinkButton {
    type Vtable = IHyperlinkButton_Vtbl;
}
impl ::core::clone::Clone for IHyperlinkButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHyperlinkButton {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xccebaca3_3b5c_4f4c_9bfd_86887bc79772,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHyperlinkButton_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub NavigateUri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetNavigateUri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHyperlinkButtonFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IHyperlinkButtonFactory {
    type Vtable = IHyperlinkButtonFactory_Vtbl;
}
impl ::core::clone::Clone for IHyperlinkButtonFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHyperlinkButtonFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x43521bad_4e97_4da9_a64d_935dfd8cedf2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHyperlinkButtonFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHyperlinkButtonStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IHyperlinkButtonStatics {
    type Vtable = IHyperlinkButtonStatics_Vtbl;
}
impl ::core::clone::Clone for IHyperlinkButtonStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHyperlinkButtonStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xfbaeb5c7_cdb7_4263_b7d6_3c0d2904ed98,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHyperlinkButtonStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub NavigateUriProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IIconElement(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IIconElement {
    type Vtable = IIconElement_Vtbl;
}
impl ::core::clone::Clone for IIconElement {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IIconElement {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9af0803b_d04c_467a_bbd5_9b81f02d9a56,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IIconElement_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Foreground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IIconElementFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IIconElementFactory {
    type Vtable = IIconElementFactory_Vtbl;
}
impl ::core::clone::Clone for IIconElementFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IIconElementFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xcf37a562_0424_43c7_8bea_720fba973ef1,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IIconElementFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IIconElementStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IIconElementStatics {
    type Vtable = IIconElementStatics_Vtbl;
}
impl ::core::clone::Clone for IIconElementStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IIconElementStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xbe19a623_77cf_472f_82ea_047801d12012,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IIconElementStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IIconSource(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IIconSource {
    type Vtable = IIconSource_Vtbl;
}
impl ::core::clone::Clone for IIconSource {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IIconSource {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x92ec8d55_45eb_47a4_863c_91b224044f9b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IIconSource_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Foreground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IIconSourceElement(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IIconSourceElement {
    type Vtable = IIconSourceElement_Vtbl;
}
impl ::core::clone::Clone for IIconSourceElement {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IIconSourceElement {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd7a64502_ddda_55cd_b4c9_e79abc8b0ea4,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IIconSourceElement_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IconSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetIconSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IIconSourceElementFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IIconSourceElementFactory {
    type Vtable = IIconSourceElementFactory_Vtbl;
}
impl ::core::clone::Clone for IIconSourceElementFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IIconSourceElementFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x26b59fab_2092_5b95_b59e_f27f210689e7,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IIconSourceElementFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IIconSourceElementStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IIconSourceElementStatics {
    type Vtable = IIconSourceElementStatics_Vtbl;
}
impl ::core::clone::Clone for IIconSourceElementStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IIconSourceElementStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf37cfd45_f3d8_50ff_a1b8_0fba4ae61d79,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IIconSourceElementStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IconSourceProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IIconSourceFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IIconSourceFactory {
    type Vtable = IIconSourceFactory_Vtbl;
}
impl ::core::clone::Clone for IIconSourceFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IIconSourceFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4d117cf1_1fd6_49d7_b483_02ec3de997d6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IIconSourceFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IIconSourceStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IIconSourceStatics {
    type Vtable = IIconSourceStatics_Vtbl;
}
impl ::core::clone::Clone for IIconSourceStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IIconSourceStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1d389dbe_1cd3_4f4f_83b0_55dc6387685b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IIconSourceStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IImage(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IImage {
    type Vtable = IImage_Vtbl;
}
impl ::core::clone::Clone for IImage {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IImage {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x495b7402_9af3_4e50_aa90_03388f3086d2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IImage_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Stretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Media::Stretch,
    ) -> ::windows_core::HRESULT,
    pub SetStretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Media::Stretch,
    ) -> ::windows_core::HRESULT,
    pub NineGrid: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetNineGrid: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
    PlayToSource: usize,
    pub ImageFailed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveImageFailed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub ImageOpened: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveImageOpened: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IImage2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IImage2 {
    type Vtable = IImage2_Vtbl;
}
impl ::core::clone::Clone for IImage2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IImage2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf445119e_881f_48bb_873a_64417ca4f002,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IImage2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    GetAsCastingSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IImage3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IImage3 {
    type Vtable = IImage3_Vtbl;
}
impl ::core::clone::Clone for IImage3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IImage3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x06ebe792_47c2_4d92_a488_8cd685d06aca,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IImage3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    GetAlphaMask: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IImageStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IImageStatics {
    type Vtable = IImageStatics_Vtbl;
}
impl ::core::clone::Clone for IImageStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IImageStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x89903772_c336_43d1_9d51_c3bbd5d5d691,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IImageStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SourceProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub StretchProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub NineGridProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    PlayToSourceProperty: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkCanvas(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkCanvas {
    type Vtable = IInkCanvas_Vtbl;
}
impl ::core::clone::Clone for IInkCanvas {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkCanvas {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x29443c28_8e48_4fc8_a473_35b0ba12acea,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkCanvas_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    InkPresenter: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkCanvasFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkCanvasFactory {
    type Vtable = IInkCanvasFactory_Vtbl;
}
impl ::core::clone::Clone for IInkCanvasFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkCanvasFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x924ac2de_ab04_48f0_9653_e0f2da4dbf1a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkCanvasFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbar(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbar {
    type Vtable = IInkToolbar_Vtbl;
}
impl ::core::clone::Clone for IInkToolbar {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbar {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3ddd0cca_51f0_486f_a03e_4ee13dc12bcb,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbar_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub InitialControls: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut InkToolbarInitialControls,
    ) -> ::windows_core::HRESULT,
    pub SetInitialControls: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: InkToolbarInitialControls,
    ) -> ::windows_core::HRESULT,
    pub Children: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ActiveTool: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetActiveTool: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    InkDrawingAttributes: usize,
    pub IsRulerButtonChecked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsRulerButtonChecked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub TargetInkCanvas: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTargetInkCanvas: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ActiveToolChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveActiveToolChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub InkDrawingAttributesChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveInkDrawingAttributesChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub EraseAllClicked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveEraseAllClicked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    IsRulerButtonCheckedChanged: usize,
    RemoveIsRulerButtonCheckedChanged: usize,
    pub GetToolButton: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        tool: InkToolbarTool,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetToggleButton: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        tool: InkToolbarToggle,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbar2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbar2 {
    type Vtable = IInkToolbar2_Vtbl;
}
impl ::core::clone::Clone for IInkToolbar2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbar2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x86f0c111_b484_454a_ae78_1d25a33d1c67,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbar2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsStencilButtonChecked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsStencilButtonChecked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub ButtonFlyoutPlacement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut InkToolbarButtonFlyoutPlacement,
    ) -> ::windows_core::HRESULT,
    pub SetButtonFlyoutPlacement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: InkToolbarButtonFlyoutPlacement,
    ) -> ::windows_core::HRESULT,
    pub Orientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Orientation,
    ) -> ::windows_core::HRESULT,
    pub SetOrientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Orientation,
    ) -> ::windows_core::HRESULT,
    pub IsStencilButtonCheckedChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveIsStencilButtonCheckedChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub GetMenuButton: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        menu: InkToolbarMenuKind,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbar3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbar3 {
    type Vtable = IInkToolbar3_Vtbl;
}
impl ::core::clone::Clone for IInkToolbar3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbar3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa8a6def0_7aa8_5326_b7c4_88ae25013362,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbar3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    TargetInkPresenter: usize,
    SetTargetInkPresenter: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarBallpointPenButton(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarBallpointPenButton {
    type Vtable = IInkToolbarBallpointPenButton_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarBallpointPenButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarBallpointPenButton {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x158329f8_1e99_3acc_910f_9da2d872ae12,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarBallpointPenButton_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarBallpointPenButtonFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarBallpointPenButtonFactory {
    type Vtable = IInkToolbarBallpointPenButtonFactory_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarBallpointPenButtonFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarBallpointPenButtonFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x2f0bd3e4_d754_4255_8ec4_00cd101296ab,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarBallpointPenButtonFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarCustomPen(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarCustomPen {
    type Vtable = IInkToolbarCustomPen_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarCustomPen {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarCustomPen {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4082207b_2f3d_4e6a_8c27_fe61ef7e70eb,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarCustomPen_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    CreateInkDrawingAttributes: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarCustomPenButton(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarCustomPenButton {
    type Vtable = IInkToolbarCustomPenButton_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarCustomPenButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarCustomPenButton {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x46024401_2b2a_4f3c_a53c_1a045a408efa,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarCustomPenButton_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CustomPen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetCustomPen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ConfigurationContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetConfigurationContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarCustomPenButtonFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarCustomPenButtonFactory {
    type Vtable = IInkToolbarCustomPenButtonFactory_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarCustomPenButtonFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarCustomPenButtonFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0f2ef0ba_c8b9_4c36_8987_94d3dafede18,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarCustomPenButtonFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarCustomPenButtonStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarCustomPenButtonStatics {
    type Vtable = IInkToolbarCustomPenButtonStatics_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarCustomPenButtonStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarCustomPenButtonStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x373c25f4_e555_4e85_a80d_da6b8433dbde,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarCustomPenButtonStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CustomPenProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ConfigurationContentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarCustomPenFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarCustomPenFactory {
    type Vtable = IInkToolbarCustomPenFactory_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarCustomPenFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarCustomPenFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd214d636_f1aa_4f48_bf2c_a926caae4c60,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarCustomPenFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarCustomPenOverrides(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarCustomPenOverrides {
    type Vtable = IInkToolbarCustomPenOverrides_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarCustomPenOverrides {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarCustomPenOverrides {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9d22eb6c_1255_4256_b6bd_82c2fd273488,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarCustomPenOverrides_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    CreateInkDrawingAttributesCore: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarCustomToggleButton(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarCustomToggleButton {
    type Vtable = IInkToolbarCustomToggleButton_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarCustomToggleButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarCustomToggleButton {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x550c4d84_4f54_4fbe_b12b_e0a50aab0d05,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarCustomToggleButton_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarCustomToggleButtonFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarCustomToggleButtonFactory {
    type Vtable = IInkToolbarCustomToggleButtonFactory_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarCustomToggleButtonFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarCustomToggleButtonFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4a00374d_4cd2_4ed9_863e_83b8cf3fd2af,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarCustomToggleButtonFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarCustomToolButton(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarCustomToolButton {
    type Vtable = IInkToolbarCustomToolButton_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarCustomToolButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarCustomToolButton {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9f98acd7_c605_4105_be10_3943a7c0da3c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarCustomToolButton_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ConfigurationContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetConfigurationContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarCustomToolButtonFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarCustomToolButtonFactory {
    type Vtable = IInkToolbarCustomToolButtonFactory_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarCustomToolButtonFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarCustomToolButtonFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc295fe4e_30eb_4130_a6b6_8c85d8e26e89,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarCustomToolButtonFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarCustomToolButtonStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarCustomToolButtonStatics {
    type Vtable = IInkToolbarCustomToolButtonStatics_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarCustomToolButtonStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarCustomToolButtonStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x11fe4cb9_bbac_4314_9344_92c6693ddeaf,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarCustomToolButtonStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ConfigurationContentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarEraserButton(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarEraserButton {
    type Vtable = IInkToolbarEraserButton_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarEraserButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarEraserButton {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4cbdb92e_5f5e_4b35_a41c_16ffb0283bc0,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarEraserButton_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarEraserButton2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarEraserButton2 {
    type Vtable = IInkToolbarEraserButton2_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarEraserButton2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarEraserButton2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe7a59257_5ae8_436d_b2e2_93c200900ca0,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarEraserButton2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsClearAllVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsClearAllVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarEraserButtonFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarEraserButtonFactory {
    type Vtable = IInkToolbarEraserButtonFactory_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarEraserButtonFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarEraserButtonFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xfd40611d_d1ba_4d67_af00_148036ad492c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarEraserButtonFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarEraserButtonStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarEraserButtonStatics2 {
    type Vtable = IInkToolbarEraserButtonStatics2_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarEraserButtonStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarEraserButtonStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x038a1736_c5cd_4311_83f4_38cbf07c2066,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarEraserButtonStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsClearAllVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarFactory {
    type Vtable = IInkToolbarFactory_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3947aa99_36b1_4374_ab5c_98bf07a4320b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarFlyoutItem(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarFlyoutItem {
    type Vtable = IInkToolbarFlyoutItem_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarFlyoutItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarFlyoutItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x92b68786_37ee_4915_9e89_e187564a889a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarFlyoutItem_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Kind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut InkToolbarFlyoutItemKind,
    ) -> ::windows_core::HRESULT,
    pub SetKind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: InkToolbarFlyoutItemKind,
    ) -> ::windows_core::HRESULT,
    pub IsChecked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsChecked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Checked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveChecked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub Unchecked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveUnchecked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarFlyoutItemFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarFlyoutItemFactory {
    type Vtable = IInkToolbarFlyoutItemFactory_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarFlyoutItemFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarFlyoutItemFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x352e7b93_803b_4f0e_8c72_9dfc0329329f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarFlyoutItemFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarFlyoutItemStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarFlyoutItemStatics {
    type Vtable = IInkToolbarFlyoutItemStatics_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarFlyoutItemStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarFlyoutItemStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1fe54b64_4063_4a5f_b89c_9f58935ee379,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarFlyoutItemStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub KindProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsCheckedProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarHighlighterButton(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarHighlighterButton {
    type Vtable = IInkToolbarHighlighterButton_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarHighlighterButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarHighlighterButton {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0b3cc15b_7abf_487e_acc1_5b5048fee6d2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarHighlighterButton_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarHighlighterButtonFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarHighlighterButtonFactory {
    type Vtable = IInkToolbarHighlighterButtonFactory_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarHighlighterButtonFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarHighlighterButtonFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x7c334add_42ca_4943_94a4_23b5a6e55cf1,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarHighlighterButtonFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarIsStencilButtonCheckedChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface
for IInkToolbarIsStencilButtonCheckedChangedEventArgs {
    type Vtable = IInkToolbarIsStencilButtonCheckedChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarIsStencilButtonCheckedChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface
for IInkToolbarIsStencilButtonCheckedChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x026edd26_d32b_4e28_a033_d5097662b292,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarIsStencilButtonCheckedChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub StencilButton: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub StencilKind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut InkToolbarStencilKind,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarMenuButton(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarMenuButton {
    type Vtable = IInkToolbarMenuButton_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarMenuButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarMenuButton {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x860ecae5_7633_4ea1_a209_50392d1aebd1,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarMenuButton_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub MenuKind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut InkToolbarMenuKind,
    ) -> ::windows_core::HRESULT,
    pub IsExtensionGlyphShown: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsExtensionGlyphShown: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarMenuButtonFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarMenuButtonFactory {
    type Vtable = IInkToolbarMenuButtonFactory_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarMenuButtonFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarMenuButtonFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x7a463a9d_5dc7_44a7_afd0_2b685cb9a96c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarMenuButtonFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarMenuButtonStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarMenuButtonStatics {
    type Vtable = IInkToolbarMenuButtonStatics_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarMenuButtonStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarMenuButtonStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf03b17a6_b8b0_4a87_a961_37cd05d83137,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarMenuButtonStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsExtensionGlyphShownProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarPenButton(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarPenButton {
    type Vtable = IInkToolbarPenButton_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarPenButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarPenButton {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe0b80c21_b032_40ee_a2b9_507f6ccb827b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarPenButton_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Palette: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPalette: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MinStrokeWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetMinStrokeWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub MaxStrokeWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetMaxStrokeWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub SelectedBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedBrushIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetSelectedBrushIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub SelectedStrokeWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetSelectedStrokeWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarPenButtonFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarPenButtonFactory {
    type Vtable = IInkToolbarPenButtonFactory_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarPenButtonFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarPenButtonFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb1463d21_59cb_4a83_92e1_692842797b2e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarPenButtonFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarPenButtonStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarPenButtonStatics {
    type Vtable = IInkToolbarPenButtonStatics_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarPenButtonStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarPenButtonStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb922ce42_09f0_453d_8026_44daf2753f65,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarPenButtonStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PaletteProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MinStrokeWidthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxStrokeWidthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedBrushProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedBrushIndexProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedStrokeWidthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarPenConfigurationControl(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarPenConfigurationControl {
    type Vtable = IInkToolbarPenConfigurationControl_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarPenConfigurationControl {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarPenConfigurationControl {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x601ae5f6_28a5_44cc_89a6_380e91a572dd,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarPenConfigurationControl_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PenButton: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarPenConfigurationControlFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarPenConfigurationControlFactory {
    type Vtable = IInkToolbarPenConfigurationControlFactory_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarPenConfigurationControlFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarPenConfigurationControlFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x67f065ee_f5e7_46eb_9187_8d3ca3af891b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarPenConfigurationControlFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarPenConfigurationControlStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarPenConfigurationControlStatics {
    type Vtable = IInkToolbarPenConfigurationControlStatics_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarPenConfigurationControlStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarPenConfigurationControlStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x48a61bef_19ce_41bb_abe0_7c8726fae75e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarPenConfigurationControlStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PenButtonProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarPencilButton(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarPencilButton {
    type Vtable = IInkToolbarPencilButton_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarPencilButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarPencilButton {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5b112832_1984_4148_9f25_382b35db087f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarPencilButton_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarPencilButtonFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarPencilButtonFactory {
    type Vtable = IInkToolbarPencilButtonFactory_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarPencilButtonFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarPencilButtonFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xdb66d85f_cfd6_495f_93ab_b8566af9f8af,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarPencilButtonFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarStatics {
    type Vtable = IInkToolbarStatics_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa3b493bb_cb4f_4e6b_a33d_f11e7a295efa,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub InitialControlsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ChildrenProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ActiveToolProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub InkDrawingAttributesProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsRulerButtonCheckedProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TargetInkCanvasProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarStatics2 {
    type Vtable = IInkToolbarStatics2_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xaac1f8f2_2c1f_4e9c_b3f3_31ff22b51c7a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsStencilButtonCheckedProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ButtonFlyoutPlacementProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OrientationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarStatics3 {
    type Vtable = IInkToolbarStatics3_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa0ee663d_b63f_516e_a0a4_0704c4544d62,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TargetInkPresenterProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarStencilButton(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarStencilButton {
    type Vtable = IInkToolbarStencilButton_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarStencilButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarStencilButton {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x306a2616_5b40_4bf3_92b7_f1df936aeff5,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarStencilButton_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    Ruler: usize,
    Protractor: usize,
    pub SelectedStencil: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut InkToolbarStencilKind,
    ) -> ::windows_core::HRESULT,
    pub SetSelectedStencil: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: InkToolbarStencilKind,
    ) -> ::windows_core::HRESULT,
    pub IsRulerItemVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsRulerItemVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsProtractorItemVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsProtractorItemVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarStencilButtonFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarStencilButtonFactory {
    type Vtable = IInkToolbarStencilButtonFactory_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarStencilButtonFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarStencilButtonFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa20701d1_8a70_4d77_89d4_1730a3a58edf,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarStencilButtonFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarStencilButtonStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarStencilButtonStatics {
    type Vtable = IInkToolbarStencilButtonStatics_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarStencilButtonStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarStencilButtonStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4748c07f_63e4_420d_939a_6b7243e9d124,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarStencilButtonStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub RulerProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ProtractorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedStencilProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsRulerItemVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsProtractorItemVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarToggleButton(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarToggleButton {
    type Vtable = IInkToolbarToggleButton_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarToggleButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarToggleButton {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb4a278fa_f5f0_4b1f_beb0_0b8a29905a4a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarToggleButton_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ToggleKind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut InkToolbarToggle,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarToggleButtonFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarToggleButtonFactory {
    type Vtable = IInkToolbarToggleButtonFactory_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarToggleButtonFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarToggleButtonFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb2f90710_e5a1_4365_9d1a_e5b7ad8b9668,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarToggleButtonFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarToolButton(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarToolButton {
    type Vtable = IInkToolbarToolButton_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarToolButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarToolButton {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5c5af41e_ccb7_4458_8064_a9849d31561b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarToolButton_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ToolKind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut InkToolbarTool,
    ) -> ::windows_core::HRESULT,
    pub IsExtensionGlyphShown: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsExtensionGlyphShown: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarToolButtonFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarToolButtonFactory {
    type Vtable = IInkToolbarToolButtonFactory_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarToolButtonFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarToolButtonFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6293bf4b_89fe_4ed0_a1a6_88d3eba917b2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarToolButtonFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInkToolbarToolButtonStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IInkToolbarToolButtonStatics {
    type Vtable = IInkToolbarToolButtonStatics_Vtbl;
}
impl ::core::clone::Clone for IInkToolbarToolButtonStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInkToolbarToolButtonStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9e097d18_d136_4ef6_b0fd_1a78c2884a01,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInkToolbarToolButtonStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsExtensionGlyphShownProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct IInsertionPanel(::windows_core::IUnknown);
impl IInsertionPanel {}
::windows_core::imp::interface_hierarchy!(
    IInsertionPanel, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::core::cmp::PartialEq for IInsertionPanel {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IInsertionPanel {}
impl ::core::fmt::Debug for IInsertionPanel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IInsertionPanel").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for IInsertionPanel {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{6b8de08f-6527-4d39-bcbf-58b01da923d7}",
    );
}
unsafe impl ::windows_core::Interface for IInsertionPanel {
    type Vtable = IInsertionPanel_Vtbl;
}
impl ::core::clone::Clone for IInsertionPanel {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInsertionPanel {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6b8de08f_6527_4d39_bcbf_58b01da923d7,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInsertionPanel_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub GetInsertionIndexes: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        position: super::super::super::Foundation::Point,
        first: *mut i32,
        second: *mut i32,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IIsTextTrimmedChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IIsTextTrimmedChangedEventArgs {
    type Vtable = IIsTextTrimmedChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IIsTextTrimmedChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IIsTextTrimmedChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x16f597cd_ebff_4fb4_8714_26147418b945,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IIsTextTrimmedChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IItemClickEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IItemClickEventArgs {
    type Vtable = IItemClickEventArgs_Vtbl;
}
impl ::core::clone::Clone for IItemClickEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemClickEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9c314242_f29a_494d_a3a5_d4c7b2a46852,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemClickEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ClickedItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IItemContainerGenerator(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IItemContainerGenerator {
    type Vtable = IItemContainerGenerator_Vtbl;
}
impl ::core::clone::Clone for IItemContainerGenerator {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemContainerGenerator {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x40765f00_83f0_4d7f_b1b8_f19de4f1d5da,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemContainerGenerator_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ItemsChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveItemsChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    ItemFromContainer: usize,
    ContainerFromItem: usize,
    IndexFromContainer: usize,
    ContainerFromIndex: usize,
    pub GetItemContainerGeneratorForPanel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        panel: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub StartAt: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        position: Primitives::GeneratorPosition,
        direction: Primitives::GeneratorDirection,
        allowstartatrealizeditem: bool,
    ) -> ::windows_core::HRESULT,
    pub Stop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GenerateNext: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        isnewlyrealized: *mut bool,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PrepareItemContainer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        container: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RemoveAll: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Remove: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        position: Primitives::GeneratorPosition,
        count: i32,
    ) -> ::windows_core::HRESULT,
    pub GeneratorPositionFromIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        itemindex: i32,
        result__: *mut Primitives::GeneratorPosition,
    ) -> ::windows_core::HRESULT,
    pub IndexFromGeneratorPosition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        position: Primitives::GeneratorPosition,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub Recycle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        position: Primitives::GeneratorPosition,
        count: i32,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct IItemContainerMapping(::windows_core::IUnknown);
impl IItemContainerMapping {}
::windows_core::imp::interface_hierarchy!(
    IItemContainerMapping, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::core::cmp::PartialEq for IItemContainerMapping {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IItemContainerMapping {}
impl ::core::fmt::Debug for IItemContainerMapping {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IItemContainerMapping").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for IItemContainerMapping {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{53c9f23a-f25d-446a-99b8-c7aeb839050f}",
    );
}
unsafe impl ::windows_core::Interface for IItemContainerMapping {
    type Vtable = IItemContainerMapping_Vtbl;
}
impl ::core::clone::Clone for IItemContainerMapping {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemContainerMapping {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x53c9f23a_f25d_446a_99b8_c7aeb839050f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemContainerMapping_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ItemFromContainer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        container: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContainerFromItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        item: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IndexFromContainer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        container: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub ContainerFromIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        index: i32,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IItemsControl(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IItemsControl {
    type Vtable = IItemsControl_Vtbl;
}
impl ::core::clone::Clone for IItemsControl {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemsControl {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf4a91dd8_d979_4381_8652_bda0342a765e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsControl_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ItemsSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetItemsSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Items: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetItemTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemTemplateSelector: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetItemTemplateSelector: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemsPanel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetItemsPanel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DisplayMemberPath: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetDisplayMemberPath: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub ItemContainerStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetItemContainerStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemContainerStyleSelector: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetItemContainerStyleSelector: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemContainerGenerator: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    ItemContainerTransitions: usize,
    SetItemContainerTransitions: usize,
    pub GroupStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GroupStyleSelector: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetGroupStyleSelector: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsGrouping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IItemsControl2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IItemsControl2 {
    type Vtable = IItemsControl2_Vtbl;
}
impl ::core::clone::Clone for IItemsControl2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemsControl2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x754c3266_0529_45e3_8748_bf747d158357,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsControl2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ItemsPanelRoot: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IItemsControl3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IItemsControl3 {
    type Vtable = IItemsControl3_Vtbl;
}
impl ::core::clone::Clone for IItemsControl3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemsControl3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x502b7489_aee4_4de3_a2ab_195ac20c4212,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsControl3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub GroupHeaderContainerFromItemContainer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        itemcontainer: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IItemsControlFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IItemsControlFactory {
    type Vtable = IItemsControlFactory_Vtbl;
}
impl ::core::clone::Clone for IItemsControlFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemsControlFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf7bbc359_f8fd_471c_bcb2_2c74be8ebf8c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsControlFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IItemsControlOverrides(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IItemsControlOverrides {
    type Vtable = IItemsControlOverrides_Vtbl;
}
impl ::core::clone::Clone for IItemsControlOverrides {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemsControlOverrides {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc79bb41b_a084_4301_a496_72971f364ed1,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsControlOverrides_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsItemItsOwnContainerOverride: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        item: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub GetContainerForItemOverride: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ClearContainerForItemOverride: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        item: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PrepareContainerForItemOverride: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        item: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnItemsChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnItemContainerStyleChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        olditemcontainerstyle: *mut ::core::ffi::c_void,
        newitemcontainerstyle: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnItemContainerStyleSelectorChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        olditemcontainerstyleselector: *mut ::core::ffi::c_void,
        newitemcontainerstyleselector: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnItemTemplateChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        olditemtemplate: *mut ::core::ffi::c_void,
        newitemtemplate: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnItemTemplateSelectorChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        olditemtemplateselector: *mut ::core::ffi::c_void,
        newitemtemplateselector: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnGroupStyleSelectorChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        oldgroupstyleselector: *mut ::core::ffi::c_void,
        newgroupstyleselector: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IItemsControlStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IItemsControlStatics {
    type Vtable = IItemsControlStatics_Vtbl;
}
impl ::core::clone::Clone for IItemsControlStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemsControlStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x37dabd89_dcfb_45b8_9afe_874df097905e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsControlStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ItemsSourceProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemTemplateSelectorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemsPanelProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DisplayMemberPathProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemContainerStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemContainerStyleSelectorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemContainerTransitionsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GroupStyleSelectorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsGroupingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetItemsOwner: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemsControlFromItemContainer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        container: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IItemsPanelTemplate(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IItemsPanelTemplate {
    type Vtable = IItemsPanelTemplate_Vtbl;
}
impl ::core::clone::Clone for IItemsPanelTemplate {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemsPanelTemplate {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x14ead768_34b2_4b97_bf3c_e8d73230a2aa,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsPanelTemplate_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IItemsPickedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IItemsPickedEventArgs {
    type Vtable = IItemsPickedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IItemsPickedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemsPickedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf95b9aac_a621_488e_9156_8ee31165be04,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsPickedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub AddedItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RemovedItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IItemsPresenter(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IItemsPresenter {
    type Vtable = IItemsPresenter_Vtbl;
}
impl ::core::clone::Clone for IItemsPresenter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemsPresenter {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc271569b_6dca_4e2b_8e14_c55136b02a71,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsPresenter_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Header: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    HeaderTransitions: usize,
    SetHeaderTransitions: usize,
    pub Padding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetPadding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IItemsPresenter2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IItemsPresenter2 {
    type Vtable = IItemsPresenter2_Vtbl;
}
impl ::core::clone::Clone for IItemsPresenter2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemsPresenter2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5c04aa33_1df3_4731_a4c9_da818378d63d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsPresenter2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Footer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetFooter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FooterTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetFooterTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    FooterTransitions: usize,
    SetFooterTransitions: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IItemsPresenterStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IItemsPresenterStatics {
    type Vtable = IItemsPresenterStatics_Vtbl;
}
impl ::core::clone::Clone for IItemsPresenterStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemsPresenterStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x18de66cd_4a6c_4b2e_aa86_cb126c9a2920,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsPresenterStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTransitionsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PaddingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IItemsPresenterStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IItemsPresenterStatics2 {
    type Vtable = IItemsPresenterStatics2_Vtbl;
}
impl ::core::clone::Clone for IItemsPresenterStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemsPresenterStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8971632e_7867_4d66_9630_29f1c5f7403f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsPresenterStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub FooterProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FooterTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FooterTransitionsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IItemsStackPanel(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IItemsStackPanel {
    type Vtable = IItemsStackPanel_Vtbl;
}
impl ::core::clone::Clone for IItemsStackPanel {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemsStackPanel {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xdf7ab79d_7ad5_4b58_9363_919af90226e6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsStackPanel_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub GroupPadding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetGroupPadding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub Orientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Orientation,
    ) -> ::windows_core::HRESULT,
    pub SetOrientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Orientation,
    ) -> ::windows_core::HRESULT,
    pub FirstCacheIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub FirstVisibleIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub LastVisibleIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub LastCacheIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub ScrollingDirection: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut PanelScrollingDirection,
    ) -> ::windows_core::HRESULT,
    pub GroupHeaderPlacement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Primitives::GroupHeaderPlacement,
    ) -> ::windows_core::HRESULT,
    pub SetGroupHeaderPlacement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Primitives::GroupHeaderPlacement,
    ) -> ::windows_core::HRESULT,
    pub ItemsUpdatingScrollMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ItemsUpdatingScrollMode,
    ) -> ::windows_core::HRESULT,
    pub SetItemsUpdatingScrollMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ItemsUpdatingScrollMode,
    ) -> ::windows_core::HRESULT,
    pub CacheLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetCacheLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IItemsStackPanel2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IItemsStackPanel2 {
    type Vtable = IItemsStackPanel2_Vtbl;
}
impl ::core::clone::Clone for IItemsStackPanel2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemsStackPanel2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xeeeecdb0_00b4_4534_937b_56318b293e92,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsStackPanel2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub AreStickyGroupHeadersEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAreStickyGroupHeadersEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IItemsStackPanelStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IItemsStackPanelStatics {
    type Vtable = IItemsStackPanelStatics_Vtbl;
}
impl ::core::clone::Clone for IItemsStackPanelStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemsStackPanelStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xca25d63f_044f_4b6b_b315_0b60e0b4f87d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsStackPanelStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub GroupPaddingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OrientationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GroupHeaderPlacementProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CacheLengthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IItemsStackPanelStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IItemsStackPanelStatics2 {
    type Vtable = IItemsStackPanelStatics2_Vtbl;
}
impl ::core::clone::Clone for IItemsStackPanelStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemsStackPanelStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3972eb2c_384a_48bf_adfd_772e2572c504,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsStackPanelStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub AreStickyGroupHeadersEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IItemsWrapGrid(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IItemsWrapGrid {
    type Vtable = IItemsWrapGrid_Vtbl;
}
impl ::core::clone::Clone for IItemsWrapGrid {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemsWrapGrid {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xddfe6b5f_ba88_4a7d_8a5b_e58caf0f4e2d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsWrapGrid_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub GroupPadding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetGroupPadding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub Orientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Orientation,
    ) -> ::windows_core::HRESULT,
    pub SetOrientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Orientation,
    ) -> ::windows_core::HRESULT,
    pub MaximumRowsOrColumns: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetMaximumRowsOrColumns: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub ItemWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetItemWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub ItemHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetItemHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub FirstCacheIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub FirstVisibleIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub LastVisibleIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub LastCacheIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub ScrollingDirection: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut PanelScrollingDirection,
    ) -> ::windows_core::HRESULT,
    pub GroupHeaderPlacement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Primitives::GroupHeaderPlacement,
    ) -> ::windows_core::HRESULT,
    pub SetGroupHeaderPlacement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Primitives::GroupHeaderPlacement,
    ) -> ::windows_core::HRESULT,
    pub CacheLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetCacheLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IItemsWrapGrid2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IItemsWrapGrid2 {
    type Vtable = IItemsWrapGrid2_Vtbl;
}
impl ::core::clone::Clone for IItemsWrapGrid2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemsWrapGrid2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x80c21c0f_63ec_4258_bd61_d4a6956c864a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsWrapGrid2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub AreStickyGroupHeadersEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAreStickyGroupHeadersEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IItemsWrapGridStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IItemsWrapGridStatics {
    type Vtable = IItemsWrapGridStatics_Vtbl;
}
impl ::core::clone::Clone for IItemsWrapGridStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemsWrapGridStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4ec5427d_24a0_449a_b763_3077ba0f2dd5,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsWrapGridStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub GroupPaddingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OrientationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaximumRowsOrColumnsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemWidthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemHeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GroupHeaderPlacementProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CacheLengthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IItemsWrapGridStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IItemsWrapGridStatics2 {
    type Vtable = IItemsWrapGridStatics2_Vtbl;
}
impl ::core::clone::Clone for IItemsWrapGridStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemsWrapGridStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x2e27d3f7_feaa_478d_bfd1_29338adc5a03,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsWrapGridStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub AreStickyGroupHeadersEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListBox(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListBox {
    type Vtable = IListBox_Vtbl;
}
impl ::core::clone::Clone for IListBox {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListBox {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe9f3b9ff_8e91_4ecf_a707_c927f694f881,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListBox_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectedItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectionMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut SelectionMode,
    ) -> ::windows_core::HRESULT,
    pub SetSelectionMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: SelectionMode,
    ) -> ::windows_core::HRESULT,
    pub ScrollIntoView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        item: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectAll: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListBox2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListBox2 {
    type Vtable = IListBox2_Vtbl;
}
impl ::core::clone::Clone for IListBox2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListBox2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x70572aba_8ad1_4085_9350_deee359294e3,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListBox2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SingleSelectionFollowsFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetSingleSelectionFollowsFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListBoxFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListBoxFactory {
    type Vtable = IListBoxFactory_Vtbl;
}
impl ::core::clone::Clone for IListBoxFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListBoxFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x60cdfda2_2f44_444b_9c94_b8c9fda46f59,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListBoxFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListBoxItem(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListBoxItem {
    type Vtable = IListBoxItem_Vtbl;
}
impl ::core::clone::Clone for IListBoxItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListBoxItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x43c13323_6edf_4e4b_b6b2_3a93eec41d95,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListBoxItem_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListBoxItemFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListBoxItemFactory {
    type Vtable = IListBoxItemFactory_Vtbl;
}
impl ::core::clone::Clone for IListBoxItemFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListBoxItemFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4398b8d4_a3de_402c_b23d_190384b27ca8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListBoxItemFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListBoxStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListBoxStatics {
    type Vtable = IListBoxStatics_Vtbl;
}
impl ::core::clone::Clone for IListBoxStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListBoxStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6d3f7f73_706a_4e53_a9aa_c9a53c9cdd70,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListBoxStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectionModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListBoxStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListBoxStatics2 {
    type Vtable = IListBoxStatics2_Vtbl;
}
impl ::core::clone::Clone for IListBoxStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListBoxStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0089adeb_b709_4c8d_b1ed_4a7d97ee7716,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListBoxStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SingleSelectionFollowsFocusProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListPickerFlyout(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListPickerFlyout {
    type Vtable = IListPickerFlyout_Vtbl;
}
impl ::core::clone::Clone for IListPickerFlyout {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListPickerFlyout {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0f0cb9d7_e5f3_45e6_9063_ff7bbb193c47,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListPickerFlyout_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ItemsSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetItemsSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetItemTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DisplayMemberPath: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetDisplayMemberPath: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SelectionMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ListPickerFlyoutSelectionMode,
    ) -> ::windows_core::HRESULT,
    pub SetSelectionMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ListPickerFlyoutSelectionMode,
    ) -> ::windows_core::HRESULT,
    pub SelectedIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetSelectedIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub SelectedItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectedItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectedValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedValuePath: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetSelectedValuePath: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SelectedItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemsPicked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveItemsPicked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub ShowAtAsync: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListPickerFlyoutPresenter(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListPickerFlyoutPresenter {
    type Vtable = IListPickerFlyoutPresenter_Vtbl;
}
impl ::core::clone::Clone for IListPickerFlyoutPresenter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListPickerFlyoutPresenter {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x68155fb3_883e_417a_80d0_e2fd88410084,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListPickerFlyoutPresenter_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListPickerFlyoutStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListPickerFlyoutStatics {
    type Vtable = IListPickerFlyoutStatics_Vtbl;
}
impl ::core::clone::Clone for IListPickerFlyoutStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListPickerFlyoutStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xfee25b97_8b96_4602_81d2_82fd8e0f7ea8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListPickerFlyoutStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ItemsSourceProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DisplayMemberPathProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectionModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedIndexProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedItemProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedValueProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedValuePathProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListView(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListView {
    type Vtable = IListView_Vtbl;
}
impl ::core::clone::Clone for IListView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListView {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf6ce8c6d_fe96_41ad_a64a_c2b81c4af7f8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListView_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListViewBase(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListViewBase {
    type Vtable = IListViewBase_Vtbl;
}
impl ::core::clone::Clone for IListViewBase {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListViewBase {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3d0813ba_6890_4537_bfe5_796d9458edd6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListViewBase_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectedItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectionMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ListViewSelectionMode,
    ) -> ::windows_core::HRESULT,
    pub SetSelectionMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ListViewSelectionMode,
    ) -> ::windows_core::HRESULT,
    pub IsSwipeEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsSwipeEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub CanDragItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCanDragItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub CanReorderItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCanReorderItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsItemClickEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsItemClickEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub DataFetchSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetDataFetchSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub IncrementalLoadingThreshold: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetIncrementalLoadingThreshold: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub IncrementalLoadingTrigger: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut IncrementalLoadingTrigger,
    ) -> ::windows_core::HRESULT,
    pub SetIncrementalLoadingTrigger: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: IncrementalLoadingTrigger,
    ) -> ::windows_core::HRESULT,
    pub ItemClick: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveItemClick: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub DragItemsStarting: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveDragItemsStarting: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub ScrollIntoView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        item: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectAll: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    LoadMoreItemsAsync: usize,
    pub ScrollIntoViewWithAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        item: *mut ::core::ffi::c_void,
        alignment: ScrollIntoViewAlignment,
    ) -> ::windows_core::HRESULT,
    pub Header: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    HeaderTransitions: usize,
    SetHeaderTransitions: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListViewBase2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListViewBase2 {
    type Vtable = IListViewBase2_Vtbl;
}
impl ::core::clone::Clone for IListViewBase2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListViewBase2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd1c2a4f7_78a3_4491_86e0_2ddebc007ac5,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListViewBase2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ShowsScrollingPlaceholders: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetShowsScrollingPlaceholders: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub ContainerContentChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveContainerContentChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub SetDesiredContainerUpdateDuration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        duration: super::super::super::Foundation::TimeSpan,
    ) -> ::windows_core::HRESULT,
    pub Footer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetFooter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FooterTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetFooterTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    FooterTransitions: usize,
    SetFooterTransitions: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListViewBase3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListViewBase3 {
    type Vtable = IListViewBase3_Vtbl;
}
impl ::core::clone::Clone for IListViewBase3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListViewBase3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb364c035_0a13_406f_a3fb_f30e7ddca94c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListViewBase3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ReorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ListViewReorderMode,
    ) -> ::windows_core::HRESULT,
    pub SetReorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ListViewReorderMode,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListViewBase4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListViewBase4 {
    type Vtable = IListViewBase4_Vtbl;
}
impl ::core::clone::Clone for IListViewBase4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListViewBase4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x18b7792b_11dc_4eb6_a7bc_741adb3eeb79,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListViewBase4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    SelectedRanges: usize,
    pub IsMultiSelectCheckBoxEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsMultiSelectCheckBoxEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub DragItemsCompleted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveDragItemsCompleted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub ChoosingItemContainer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveChoosingItemContainer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub ChoosingGroupHeaderContainer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveChoosingGroupHeaderContainer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    SelectRange: usize,
    DeselectRange: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListViewBase5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListViewBase5 {
    type Vtable = IListViewBase5_Vtbl;
}
impl ::core::clone::Clone for IListViewBase5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListViewBase5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1a9c6e99_1719_4b80_b335_628331a07019,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListViewBase5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SingleSelectionFollowsFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetSingleSelectionFollowsFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsDragSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListViewBase6(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListViewBase6 {
    type Vtable = IListViewBase6_Vtbl;
}
impl ::core::clone::Clone for IListViewBase6 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListViewBase6 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf8a42637_965b_483b_94e5_e5c9fef0e352,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListViewBase6_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    TryStartConnectedAnimationAsync: usize,
    PrepareConnectedAnimation: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListViewBaseFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListViewBaseFactory {
    type Vtable = IListViewBaseFactory_Vtbl;
}
impl ::core::clone::Clone for IListViewBaseFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListViewBaseFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe67e6c7f_150f_46d0_a6ac_c5002bd9ca53,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListViewBaseFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListViewBaseHeaderItem(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListViewBaseHeaderItem {
    type Vtable = IListViewBaseHeaderItem_Vtbl;
}
impl ::core::clone::Clone for IListViewBaseHeaderItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListViewBaseHeaderItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6d0ded27_0d19_4091_8917_ce7c85c1e630,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListViewBaseHeaderItem_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListViewBaseHeaderItemFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListViewBaseHeaderItemFactory {
    type Vtable = IListViewBaseHeaderItemFactory_Vtbl;
}
impl ::core::clone::Clone for IListViewBaseHeaderItemFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListViewBaseHeaderItemFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3872a6a1_ea19_455f_9df7_147cc41d329c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListViewBaseHeaderItemFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListViewBaseStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListViewBaseStatics {
    type Vtable = IListViewBaseStatics_Vtbl;
}
impl ::core::clone::Clone for IListViewBaseStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListViewBaseStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8532b8f7_3e16_455b_89a8_c1346223f6d3,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListViewBaseStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectionModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsSwipeEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CanDragItemsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CanReorderItemsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsItemClickEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DataFetchSizeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IncrementalLoadingThresholdProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IncrementalLoadingTriggerProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SemanticZoomOwnerProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsActiveViewProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsZoomedInViewProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTransitionsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListViewBaseStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListViewBaseStatics2 {
    type Vtable = IListViewBaseStatics2_Vtbl;
}
impl ::core::clone::Clone for IListViewBaseStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListViewBaseStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x821c00c8_78cc_411f_9f2e_a55758227f3e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListViewBaseStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ShowsScrollingPlaceholdersProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FooterProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FooterTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FooterTransitionsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListViewBaseStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListViewBaseStatics3 {
    type Vtable = IListViewBaseStatics3_Vtbl;
}
impl ::core::clone::Clone for IListViewBaseStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListViewBaseStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3b539091_31c6_4d0c_90af_5dc1d6ae9c05,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListViewBaseStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ReorderModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListViewBaseStatics4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListViewBaseStatics4 {
    type Vtable = IListViewBaseStatics4_Vtbl;
}
impl ::core::clone::Clone for IListViewBaseStatics4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListViewBaseStatics4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xad13258b_fbd0_4f18_8bf8_9b8613951c22,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListViewBaseStatics4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsMultiSelectCheckBoxEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListViewBaseStatics5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListViewBaseStatics5 {
    type Vtable = IListViewBaseStatics5_Vtbl;
}
impl ::core::clone::Clone for IListViewBaseStatics5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListViewBaseStatics5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x40346fcf_0476_4259_895f_a6569738620f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListViewBaseStatics5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SingleSelectionFollowsFocusProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListViewFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListViewFactory {
    type Vtable = IListViewFactory_Vtbl;
}
impl ::core::clone::Clone for IListViewFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListViewFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xbdff696d_3f22_41f9_97a6_883134a76113,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListViewFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListViewHeaderItem(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListViewHeaderItem {
    type Vtable = IListViewHeaderItem_Vtbl;
}
impl ::core::clone::Clone for IListViewHeaderItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListViewHeaderItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1b61baeb_e196_4b3b_a5f9_1ed636f3f79b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListViewHeaderItem_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListViewHeaderItemFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListViewHeaderItemFactory {
    type Vtable = IListViewHeaderItemFactory_Vtbl;
}
impl ::core::clone::Clone for IListViewHeaderItemFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListViewHeaderItemFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x68d2c96a_96b0_4f08_a7a5_f1086720a0fa,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListViewHeaderItemFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListViewItem(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListViewItem {
    type Vtable = IListViewItem_Vtbl;
}
impl ::core::clone::Clone for IListViewItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListViewItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb7bb4305_3dd9_43de_a8c0_c472f085bc11,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListViewItem_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TemplateSettings: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListViewItemFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListViewItemFactory {
    type Vtable = IListViewItemFactory_Vtbl;
}
impl ::core::clone::Clone for IListViewItemFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListViewItemFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf431073d_9cac_42a2_82df_0f4490bc4e2e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListViewItemFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListViewPersistenceHelper(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListViewPersistenceHelper {
    type Vtable = IListViewPersistenceHelper_Vtbl;
}
impl ::core::clone::Clone for IListViewPersistenceHelper {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListViewPersistenceHelper {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x05bde8a6_2191_4b4b_8c22_9b25676e806e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListViewPersistenceHelper_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IListViewPersistenceHelperStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IListViewPersistenceHelperStatics {
    type Vtable = IListViewPersistenceHelperStatics_Vtbl;
}
impl ::core::clone::Clone for IListViewPersistenceHelperStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IListViewPersistenceHelperStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6d0c2b08_bb9b_44f9_8063_5c3f9c21884b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IListViewPersistenceHelperStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub GetRelativeScrollPosition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        listviewbase: *mut ::core::ffi::c_void,
        itemtokeyhandler: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetRelativeScrollPositionAsync: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        listviewbase: *mut ::core::ffi::c_void,
        relativescrollposition: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
        keytoitemhandler: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMediaElement(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaElement {
    type Vtable = IMediaElement_Vtbl;
}
impl ::core::clone::Clone for IMediaElement {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMediaElement {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa38ed2cf_13de_4299_ade2_ae18f74ed353,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaElement_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PosterSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPosterSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsMuted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsMuted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsAudioOnly: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub AutoPlay: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAutoPlay: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Volume: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetVolume: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub Balance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetBalance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub NaturalVideoHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub NaturalVideoWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub NaturalDuration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Duration,
    ) -> ::windows_core::HRESULT,
    pub Position: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::TimeSpan,
    ) -> ::windows_core::HRESULT,
    pub SetPosition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::Foundation::TimeSpan,
    ) -> ::windows_core::HRESULT,
    pub DownloadProgress: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub BufferingProgress: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub DownloadProgressOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub CurrentState: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Media::MediaElementState,
    ) -> ::windows_core::HRESULT,
    pub Markers: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CanSeek: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub CanPause: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub AudioStreamCount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub AudioStreamIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetAudioStreamIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PlaybackRate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetPlaybackRate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub IsLooping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsLooping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    PlayToSource: usize,
    pub DefaultPlaybackRate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetDefaultPlaybackRate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub AspectRatioWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub AspectRatioHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub RealTimePlayback: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetRealTimePlayback: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub AudioCategory: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Media::AudioCategory,
    ) -> ::windows_core::HRESULT,
    pub SetAudioCategory: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Media::AudioCategory,
    ) -> ::windows_core::HRESULT,
    pub AudioDeviceType: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Media::AudioDeviceType,
    ) -> ::windows_core::HRESULT,
    pub SetAudioDeviceType: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Media::AudioDeviceType,
    ) -> ::windows_core::HRESULT,
    ProtectionManager: usize,
    SetProtectionManager: usize,
    pub Stereo3DVideoPackingMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Media::Stereo3DVideoPackingMode,
    ) -> ::windows_core::HRESULT,
    pub SetStereo3DVideoPackingMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Media::Stereo3DVideoPackingMode,
    ) -> ::windows_core::HRESULT,
    pub Stereo3DVideoRenderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Media::Stereo3DVideoRenderMode,
    ) -> ::windows_core::HRESULT,
    pub SetStereo3DVideoRenderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Media::Stereo3DVideoRenderMode,
    ) -> ::windows_core::HRESULT,
    pub IsStereo3DVideo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub MediaOpened: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveMediaOpened: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub MediaEnded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveMediaEnded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub MediaFailed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveMediaFailed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub DownloadProgressChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveDownloadProgressChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub BufferingProgressChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveBufferingProgressChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub CurrentStateChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveCurrentStateChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub MarkerReached: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveMarkerReached: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RateChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveRateChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub VolumeChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveVolumeChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub SeekCompleted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveSeekCompleted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub Stop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Play: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Pause: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CanPlayType: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        r#type: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
        result__: *mut super::Media::MediaCanPlayResponse,
    ) -> ::windows_core::HRESULT,
    SetSource2: usize,
    pub GetAudioStreamLanguage: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        index: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub AddAudioEffect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        effectid: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
        effectoptional: bool,
        effectconfiguration: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AddVideoEffect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        effectid: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
        effectoptional: bool,
        effectconfiguration: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RemoveAllEffects: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ActualStereo3DVideoPackingMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Media::Stereo3DVideoPackingMode,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMediaElement2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaElement2 {
    type Vtable = IMediaElement2_Vtbl;
}
impl ::core::clone::Clone for IMediaElement2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMediaElement2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xfd53da65_b186_4654_bfdb_180ed26cad07,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaElement2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub AreTransportControlsEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAreTransportControlsEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Stretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Media::Stretch,
    ) -> ::windows_core::HRESULT,
    pub SetStretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Media::Stretch,
    ) -> ::windows_core::HRESULT,
    pub IsFullWindow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsFullWindow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    SetMediaStreamSource: usize,
    PlayToPreferredSourceUri: usize,
    SetPlayToPreferredSourceUri: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMediaElement3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaElement3 {
    type Vtable = IMediaElement3_Vtbl;
}
impl ::core::clone::Clone for IMediaElement3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMediaElement3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x479f6f13_0fdb_4ed8_928a_4d39169c3cd2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaElement3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TransportControls: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTransportControls: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PartialMediaFailureDetected: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemovePartialMediaFailureDetected: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    SetPlaybackSource: usize,
    GetAsCastingSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMediaElementStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaElementStatics {
    type Vtable = IMediaElementStatics_Vtbl;
}
impl ::core::clone::Clone for IMediaElementStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMediaElementStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xdccd2cb9_7568_4682_a72a_8ddf2a2665ca,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaElementStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PosterSourceProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SourceProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsMutedProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsAudioOnlyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AutoPlayProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub VolumeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BalanceProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub NaturalVideoHeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub NaturalVideoWidthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub NaturalDurationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PositionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DownloadProgressProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BufferingProgressProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DownloadProgressOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CurrentStateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CanSeekProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CanPauseProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AudioStreamCountProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AudioStreamIndexProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PlaybackRateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsLoopingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    PlayToSourceProperty: usize,
    pub DefaultPlaybackRateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AspectRatioWidthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AspectRatioHeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RealTimePlaybackProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AudioCategoryProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AudioDeviceTypeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ProtectionManagerProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Stereo3DVideoPackingModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Stereo3DVideoRenderModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsStereo3DVideoProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ActualStereo3DVideoPackingModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMediaElementStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaElementStatics2 {
    type Vtable = IMediaElementStatics2_Vtbl;
}
impl ::core::clone::Clone for IMediaElementStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMediaElementStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9ee7f826_f154_4dc6_8014_a6eba987f847,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaElementStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub AreTransportControlsEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub StretchProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsFullWindowProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    PlayToPreferredSourceUriProperty: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMediaPlayerElement(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaPlayerElement {
    type Vtable = IMediaPlayerElement_Vtbl;
}
impl ::core::clone::Clone for IMediaPlayerElement {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMediaPlayerElement {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3b4ca526_2e25_4598_bc71_d491f8e8de39,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaPlayerElement_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    Source: usize,
    SetSource: usize,
    pub TransportControls: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTransportControls: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AreTransportControlsEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAreTransportControlsEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub PosterSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPosterSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Stretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Media::Stretch,
    ) -> ::windows_core::HRESULT,
    pub SetStretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Media::Stretch,
    ) -> ::windows_core::HRESULT,
    pub AutoPlay: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAutoPlay: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsFullWindow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsFullWindow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    MediaPlayer: usize,
    SetMediaPlayer: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMediaPlayerElementFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaPlayerElementFactory {
    type Vtable = IMediaPlayerElementFactory_Vtbl;
}
impl ::core::clone::Clone for IMediaPlayerElementFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMediaPlayerElementFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x77e525c3_eb17_4b8d_889d_1ea8abdbd4ef,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaPlayerElementFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMediaPlayerElementStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaPlayerElementStatics {
    type Vtable = IMediaPlayerElementStatics_Vtbl;
}
impl ::core::clone::Clone for IMediaPlayerElementStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMediaPlayerElementStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1e7c4020_ac57_42dd_ad1c_3ebc2d7f08ba,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaPlayerElementStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SourceProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AreTransportControlsEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PosterSourceProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub StretchProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AutoPlayProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsFullWindowProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MediaPlayerProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMediaPlayerPresenter(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaPlayerPresenter {
    type Vtable = IMediaPlayerPresenter_Vtbl;
}
impl ::core::clone::Clone for IMediaPlayerPresenter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMediaPlayerPresenter {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x77a92326_0c5b_41fc_bf49_15f6c3524b6b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaPlayerPresenter_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    MediaPlayer: usize,
    SetMediaPlayer: usize,
    pub Stretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Media::Stretch,
    ) -> ::windows_core::HRESULT,
    pub SetStretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Media::Stretch,
    ) -> ::windows_core::HRESULT,
    pub IsFullWindow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsFullWindow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMediaPlayerPresenterFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaPlayerPresenterFactory {
    type Vtable = IMediaPlayerPresenterFactory_Vtbl;
}
impl ::core::clone::Clone for IMediaPlayerPresenterFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMediaPlayerPresenterFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe6766fb7_d96f_4b95_b33c_59e81cb1e9ba,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaPlayerPresenterFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMediaPlayerPresenterStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaPlayerPresenterStatics {
    type Vtable = IMediaPlayerPresenterStatics_Vtbl;
}
impl ::core::clone::Clone for IMediaPlayerPresenterStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMediaPlayerPresenterStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x84d774fe_ead4_4957_b42b_223158ca0de7,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaPlayerPresenterStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub MediaPlayerProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub StretchProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsFullWindowProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMediaTransportControls(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaTransportControls {
    type Vtable = IMediaTransportControls_Vtbl;
}
impl ::core::clone::Clone for IMediaTransportControls {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMediaTransportControls {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd6f69e7d_0825_49a9_9fce_5586d8694f0c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaTransportControls_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsFullWindowButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsFullWindowButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsFullWindowEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsFullWindowEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsZoomButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsZoomButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsZoomEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsZoomEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsFastForwardButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsFastForwardButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsFastForwardEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsFastForwardEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsFastRewindButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsFastRewindButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsFastRewindEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsFastRewindEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsStopButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsStopButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsStopEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsStopEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsVolumeButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsVolumeButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsVolumeEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsVolumeEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsPlaybackRateButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsPlaybackRateButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsPlaybackRateEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsPlaybackRateEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsSeekBarVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsSeekBarVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsSeekEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsSeekEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsCompact: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsCompact: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMediaTransportControls2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaTransportControls2 {
    type Vtable = IMediaTransportControls2_Vtbl;
}
impl ::core::clone::Clone for IMediaTransportControls2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMediaTransportControls2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x2b89efec_1bea_451e_8bcd_cfe2d9423262,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaTransportControls2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsSkipForwardButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsSkipForwardButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsSkipForwardEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsSkipForwardEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsSkipBackwardButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsSkipBackwardButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsSkipBackwardEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsSkipBackwardEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsNextTrackButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsNextTrackButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsPreviousTrackButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsPreviousTrackButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub FastPlayFallbackBehaviour: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Media::FastPlayFallbackBehaviour,
    ) -> ::windows_core::HRESULT,
    pub SetFastPlayFallbackBehaviour: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Media::FastPlayFallbackBehaviour,
    ) -> ::windows_core::HRESULT,
    pub ThumbnailRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveThumbnailRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMediaTransportControls3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaTransportControls3 {
    type Vtable = IMediaTransportControls3_Vtbl;
}
impl ::core::clone::Clone for IMediaTransportControls3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMediaTransportControls3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5086430e_0940_11e7_93ae_92361f002671,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaTransportControls3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ShowAndHideAutomatically: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetShowAndHideAutomatically: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsRepeatEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsRepeatEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsRepeatButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsRepeatButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Show: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Hide: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMediaTransportControls4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaTransportControls4 {
    type Vtable = IMediaTransportControls4_Vtbl;
}
impl ::core::clone::Clone for IMediaTransportControls4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMediaTransportControls4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0fb17c58_9f23_11e7_abc4_cec278b6b50a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaTransportControls4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsCompactOverlayButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsCompactOverlayButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsCompactOverlayEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsCompactOverlayEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMediaTransportControlsFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaTransportControlsFactory {
    type Vtable = IMediaTransportControlsFactory_Vtbl;
}
impl ::core::clone::Clone for IMediaTransportControlsFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMediaTransportControlsFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1da2015a_a8e4_4c1b_88c9_0b183ecc62e3,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaTransportControlsFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMediaTransportControlsHelper(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaTransportControlsHelper {
    type Vtable = IMediaTransportControlsHelper_Vtbl;
}
impl ::core::clone::Clone for IMediaTransportControlsHelper {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMediaTransportControlsHelper {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3d41d509_ff44_4420_807e_8f7a2e2c4251,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaTransportControlsHelper_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMediaTransportControlsHelperStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaTransportControlsHelperStatics {
    type Vtable = IMediaTransportControlsHelperStatics_Vtbl;
}
impl ::core::clone::Clone for IMediaTransportControlsHelperStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMediaTransportControlsHelperStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5a772047_a9a1_4625_9270_7f49875d4394,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaTransportControlsHelperStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DropoutOrderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetDropoutOrder: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetDropoutOrder: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMediaTransportControlsStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaTransportControlsStatics {
    type Vtable = IMediaTransportControlsStatics_Vtbl;
}
impl ::core::clone::Clone for IMediaTransportControlsStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMediaTransportControlsStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x590ea907_d2ef_4c1a_9429_b4b15d64fd56,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaTransportControlsStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsFullWindowButtonVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsFullWindowEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsZoomButtonVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsZoomEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsFastForwardButtonVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsFastForwardEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsFastRewindButtonVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsFastRewindEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsStopButtonVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsStopEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsVolumeButtonVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsVolumeEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsPlaybackRateButtonVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsPlaybackRateEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsSeekBarVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsSeekEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsCompactProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMediaTransportControlsStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaTransportControlsStatics2 {
    type Vtable = IMediaTransportControlsStatics2_Vtbl;
}
impl ::core::clone::Clone for IMediaTransportControlsStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMediaTransportControlsStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1728cfdc_561f_4386_a7f8_090d95f68d96,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaTransportControlsStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsSkipForwardButtonVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsSkipForwardEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsSkipBackwardButtonVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsSkipBackwardEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsNextTrackButtonVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsPreviousTrackButtonVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FastPlayFallbackBehaviourProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMediaTransportControlsStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaTransportControlsStatics3 {
    type Vtable = IMediaTransportControlsStatics3_Vtbl;
}
impl ::core::clone::Clone for IMediaTransportControlsStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMediaTransportControlsStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5fe05542_0940_11e7_93ae_92361f002671,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaTransportControlsStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ShowAndHideAutomaticallyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsRepeatEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsRepeatButtonVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMediaTransportControlsStatics4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaTransportControlsStatics4 {
    type Vtable = IMediaTransportControlsStatics4_Vtbl;
}
impl ::core::clone::Clone for IMediaTransportControlsStatics4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMediaTransportControlsStatics4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0fb18144_9f23_11e7_abc4_cec278b6b50a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaTransportControlsStatics4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsCompactOverlayButtonVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsCompactOverlayEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuBar(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuBar {
    type Vtable = IMenuBar_Vtbl;
}
impl ::core::clone::Clone for IMenuBar {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuBar {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc8f67b0c_0e76_5af2_bade_785049c80a41,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuBar_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Items: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuBarFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuBarFactory {
    type Vtable = IMenuBarFactory_Vtbl;
}
impl ::core::clone::Clone for IMenuBarFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuBarFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xdc619e50_72ba_513f_80aa_ddd093825dde,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuBarFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuBarItem(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuBarItem {
    type Vtable = IMenuBarItem_Vtbl;
}
impl ::core::clone::Clone for IMenuBarItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuBarItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xbf643b4c_8125_5b53_a454_06e896a5acee,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuBarItem_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Title: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetTitle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub Items: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuBarItemFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuBarItemFactory {
    type Vtable = IMenuBarItemFactory_Vtbl;
}
impl ::core::clone::Clone for IMenuBarItemFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuBarItemFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xecf86f62_c394_50e2_a568_17af8cf26874,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuBarItemFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuBarItemFlyout(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuBarItemFlyout {
    type Vtable = IMenuBarItemFlyout_Vtbl;
}
impl ::core::clone::Clone for IMenuBarItemFlyout {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuBarItemFlyout {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xed00d2d8_b686_55fe_8dbb_f04a640e42ef,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuBarItemFlyout_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuBarItemFlyoutFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuBarItemFlyoutFactory {
    type Vtable = IMenuBarItemFlyoutFactory_Vtbl;
}
impl ::core::clone::Clone for IMenuBarItemFlyoutFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuBarItemFlyoutFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1d24f9bd_bd19_5d95_b573_711f649fcbe9,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuBarItemFlyoutFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuBarItemStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuBarItemStatics {
    type Vtable = IMenuBarItemStatics_Vtbl;
}
impl ::core::clone::Clone for IMenuBarItemStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuBarItemStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x60a9e3fb_b405_50d0_bb78_d396a34da267,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuBarItemStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TitleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuBarStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuBarStatics {
    type Vtable = IMenuBarStatics_Vtbl;
}
impl ::core::clone::Clone for IMenuBarStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuBarStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xbed31c25_7db8_51cc_9706_1d79327daf93,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuBarStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ItemsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyout(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyout {
    type Vtable = IMenuFlyout_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyout {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyout {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xad3210f1_985b_4171_bbba_67bcc729649b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyout_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Items: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MenuFlyoutPresenterStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetMenuFlyoutPresenterStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyout2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyout2 {
    type Vtable = IMenuFlyout2_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyout2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyout2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x507c7bad_d9d1_4c05_9d4b_cda8de9ab242,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyout2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ShowAt: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        targetelement: *mut ::core::ffi::c_void,
        point: super::super::super::Foundation::Point,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyoutFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyoutFactory {
    type Vtable = IMenuFlyoutFactory_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyoutFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyoutFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x644533ab_bbb9_499b_9ff3_30d40e2c56d8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyoutFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyoutItem(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyoutItem {
    type Vtable = IMenuFlyoutItem_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyoutItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyoutItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x160775cf_b598_44af_a488_c3ce2af6d3f0,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyoutItem_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Text: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    Command: usize,
    SetCommand: usize,
    pub CommandParameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetCommandParameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Click: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveClick: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyoutItem2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyoutItem2 {
    type Vtable = IMenuFlyoutItem2_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyoutItem2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyoutItem2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0ae266eb_028c_4423_a8e3_989fd9dd7126,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyoutItem2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Icon: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetIcon: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyoutItem3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyoutItem3 {
    type Vtable = IMenuFlyoutItem3_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyoutItem3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyoutItem3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9727b2e3_b2b6_49dc_8c22_e0138b941559,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyoutItem3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub KeyboardAcceleratorTextOverride: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetKeyboardAcceleratorTextOverride: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub TemplateSettings: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyoutItemBase(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyoutItemBase {
    type Vtable = IMenuFlyoutItemBase_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyoutItemBase {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyoutItemBase {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf9b56047_8da6_4730_9208_144125c6b396,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyoutItemBase_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyoutItemBaseFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyoutItemBaseFactory {
    type Vtable = IMenuFlyoutItemBaseFactory_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyoutItemBaseFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyoutItemBaseFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x83e6dbad_fc67_41d5_8797_60acd1ceb1d9,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyoutItemBaseFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyoutItemFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyoutItemFactory {
    type Vtable = IMenuFlyoutItemFactory_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyoutItemFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyoutItemFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc5aa39e2_44f3_455e_9c5b_62bb6afce3ad,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyoutItemFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyoutItemStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyoutItemStatics {
    type Vtable = IMenuFlyoutItemStatics_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyoutItemStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyoutItemStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4950b424_a43a_41f7_aa3a_9ce9619747d5,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyoutItemStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CommandProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CommandParameterProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyoutItemStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyoutItemStatics2 {
    type Vtable = IMenuFlyoutItemStatics2_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyoutItemStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyoutItemStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xaca4f564_1790_4601_916e_5ae1f01f4bd6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyoutItemStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IconProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyoutItemStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyoutItemStatics3 {
    type Vtable = IMenuFlyoutItemStatics3_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyoutItemStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyoutItemStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd83fd7c3_0aeb_4ef3_8270_8b9b95f2b298,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyoutItemStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub KeyboardAcceleratorTextOverrideProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyoutPresenter(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyoutPresenter {
    type Vtable = IMenuFlyoutPresenter_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyoutPresenter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyoutPresenter {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x906e0304_254e_413f_b219_c7b97f003752,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyoutPresenter_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyoutPresenter2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyoutPresenter2 {
    type Vtable = IMenuFlyoutPresenter2_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyoutPresenter2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyoutPresenter2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x895894df_5a9f_4a1f_85ec_6f3c1b6dcb89,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyoutPresenter2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TemplateSettings: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyoutPresenter3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyoutPresenter3 {
    type Vtable = IMenuFlyoutPresenter3_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyoutPresenter3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyoutPresenter3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6afd4e16_aee0_584a_9849_edaa323a484f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyoutPresenter3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsDefaultShadowEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsDefaultShadowEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyoutPresenterFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyoutPresenterFactory {
    type Vtable = IMenuFlyoutPresenterFactory_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyoutPresenterFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyoutPresenterFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb88b5091_101c_41f8_aac1_1b105c14fb99,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyoutPresenterFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyoutPresenterStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyoutPresenterStatics3 {
    type Vtable = IMenuFlyoutPresenterStatics3_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyoutPresenterStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyoutPresenterStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3772a818_825a_520c_80ae_4d39a2d59ab5,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyoutPresenterStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsDefaultShadowEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyoutSeparator(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyoutSeparator {
    type Vtable = IMenuFlyoutSeparator_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyoutSeparator {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyoutSeparator {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x71fa2b7d_0b51_4950_a1a4_bbc42eac4c12,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyoutSeparator_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyoutSeparatorFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyoutSeparatorFactory {
    type Vtable = IMenuFlyoutSeparatorFactory_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyoutSeparatorFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyoutSeparatorFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc159dcc8_b437_44e0_b24b_5720aea1dbac,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyoutSeparatorFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyoutStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyoutStatics {
    type Vtable = IMenuFlyoutStatics_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyoutStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyoutStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3dbefba1_9522_4045_9e58_c99b13aab9b9,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyoutStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub MenuFlyoutPresenterStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyoutSubItem(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyoutSubItem {
    type Vtable = IMenuFlyoutSubItem_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyoutSubItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyoutSubItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe5386550_fe2c_43e2_a73f_62168f619973,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyoutSubItem_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Items: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Text: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyoutSubItem2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyoutSubItem2 {
    type Vtable = IMenuFlyoutSubItem2_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyoutSubItem2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyoutSubItem2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xac935626_190a_4de2_8d71_7cc4747da580,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyoutSubItem2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Icon: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetIcon: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyoutSubItemStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyoutSubItemStatics {
    type Vtable = IMenuFlyoutSubItemStatics_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyoutSubItemStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyoutSubItemStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xddb27a36_1874_4aef_837d_6fec9da4e681,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyoutSubItemStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMenuFlyoutSubItemStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMenuFlyoutSubItemStatics2 {
    type Vtable = IMenuFlyoutSubItemStatics2_Vtbl;
}
impl ::core::clone::Clone for IMenuFlyoutSubItemStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuFlyoutSubItemStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xac14d09b_3e93_4785_94ef_fdb23baba965,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuFlyoutSubItemStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IconProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct INavigate(::windows_core::IUnknown);
impl INavigate {}
::windows_core::imp::interface_hierarchy!(
    INavigate, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::core::cmp::PartialEq for INavigate {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for INavigate {}
impl ::core::fmt::Debug for INavigate {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("INavigate").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for INavigate {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{bf2195a9-f4ea-4336-977c-f8fcf78b0d9e}",
    );
}
unsafe impl ::windows_core::Interface for INavigate {
    type Vtable = INavigate_Vtbl;
}
impl ::core::clone::Clone for INavigate {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigate {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xbf2195a9_f4ea_4336_977c_f8fcf78b0d9e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigate_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    Navigate: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationView(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationView {
    type Vtable = INavigationView_Vtbl;
}
impl ::core::clone::Clone for INavigationView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationView {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf209ce15_391a_42ca_9fc6_f79da65aca32,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationView_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsPaneOpen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsPaneOpen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub CompactModeThresholdWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetCompactModeThresholdWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub ExpandedModeThresholdWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetExpandedModeThresholdWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub PaneFooter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPaneFooter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Header: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DisplayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut NavigationViewDisplayMode,
    ) -> ::windows_core::HRESULT,
    pub IsSettingsVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsSettingsVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsPaneToggleButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsPaneToggleButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub AlwaysShowHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAlwaysShowHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub CompactPaneLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetCompactPaneLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub OpenPaneLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetOpenPaneLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub PaneToggleButtonStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPaneToggleButtonStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectedItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MenuItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MenuItemsSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetMenuItemsSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SettingsItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AutoSuggestBox: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetAutoSuggestBox: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MenuItemTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetMenuItemTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MenuItemTemplateSelector: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetMenuItemTemplateSelector: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MenuItemContainerStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetMenuItemContainerStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MenuItemContainerStyleSelector: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetMenuItemContainerStyleSelector: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MenuItemFromContainer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        container: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContainerFromMenuItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        item: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectionChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveSelectionChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub ItemInvoked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveItemInvoked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub DisplayModeChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveDisplayModeChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationView2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationView2 {
    type Vtable = INavigationView2_Vtbl;
}
impl ::core::clone::Clone for INavigationView2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationView2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x2be49737_7c13_4c44_86c3_8b25e697a80e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationView2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsBackButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut NavigationViewBackButtonVisible,
    ) -> ::windows_core::HRESULT,
    pub SetIsBackButtonVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: NavigationViewBackButtonVisible,
    ) -> ::windows_core::HRESULT,
    pub IsBackEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsBackEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub PaneTitle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetPaneTitle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub BackRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveBackRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub PaneClosed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemovePaneClosed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub PaneClosing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemovePaneClosing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub PaneOpened: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemovePaneOpened: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub PaneOpening: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemovePaneOpening: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationView3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationView3 {
    type Vtable = INavigationView3_Vtbl;
}
impl ::core::clone::Clone for INavigationView3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationView3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8fdfab66_9bbc_5fa3_9043_a02bb4f8ef37,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationView3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PaneDisplayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut NavigationViewPaneDisplayMode,
    ) -> ::windows_core::HRESULT,
    pub SetPaneDisplayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: NavigationViewPaneDisplayMode,
    ) -> ::windows_core::HRESULT,
    pub PaneHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPaneHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PaneCustomContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPaneCustomContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContentOverlay: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetContentOverlay: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsPaneVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsPaneVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub SelectionFollowsFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut NavigationViewSelectionFollowsFocus,
    ) -> ::windows_core::HRESULT,
    pub SetSelectionFollowsFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: NavigationViewSelectionFollowsFocus,
    ) -> ::windows_core::HRESULT,
    pub TemplateSettings: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ShoulderNavigationEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut NavigationViewShoulderNavigationEnabled,
    ) -> ::windows_core::HRESULT,
    pub SetShoulderNavigationEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: NavigationViewShoulderNavigationEnabled,
    ) -> ::windows_core::HRESULT,
    pub OverflowLabelMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut NavigationViewOverflowLabelMode,
    ) -> ::windows_core::HRESULT,
    pub SetOverflowLabelMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: NavigationViewOverflowLabelMode,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewBackRequestedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewBackRequestedEventArgs {
    type Vtable = INavigationViewBackRequestedEventArgs_Vtbl;
}
impl ::core::clone::Clone for INavigationViewBackRequestedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewBackRequestedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x446700e1_9a9d_4500_a71d_25c15809b879,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewBackRequestedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewDisplayModeChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewDisplayModeChangedEventArgs {
    type Vtable = INavigationViewDisplayModeChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for INavigationViewDisplayModeChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewDisplayModeChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb7c1ad35_5544_40c1_9b33_acfe1d6c8094,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewDisplayModeChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DisplayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut NavigationViewDisplayMode,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewFactory {
    type Vtable = INavigationViewFactory_Vtbl;
}
impl ::core::clone::Clone for INavigationViewFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe50687c1_b7c2_4975_ad7a_5f4fe6a514c9,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewItem(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewItem {
    type Vtable = INavigationViewItem_Vtbl;
}
impl ::core::clone::Clone for INavigationViewItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8614be0f_b7b6_4851_960a_f5e3f69f624a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewItem_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Icon: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetIcon: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CompactPaneLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewItem2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewItem2 {
    type Vtable = INavigationViewItem2_Vtbl;
}
impl ::core::clone::Clone for INavigationViewItem2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewItem2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xee488ef9_ea9c_5e04_b26c_83bf9655342f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewItem2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectsOnInvoked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetSelectsOnInvoked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewItemBase(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewItemBase {
    type Vtable = INavigationViewItemBase_Vtbl;
}
impl ::core::clone::Clone for INavigationViewItemBase {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewItemBase {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xedf04eb1_37d1_471f_8570_3829ee5b2bc6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewItemBase_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewItemBaseFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewItemBaseFactory {
    type Vtable = INavigationViewItemBaseFactory_Vtbl;
}
impl ::core::clone::Clone for INavigationViewItemBaseFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewItemBaseFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xeb014cef_7890_4ebb_8245_02e8510f321d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewItemBaseFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewItemFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewItemFactory {
    type Vtable = INavigationViewItemFactory_Vtbl;
}
impl ::core::clone::Clone for INavigationViewItemFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewItemFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x973bdb4a_7e08_4f76_923c_f12bd685e86e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewItemFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewItemHeader(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewItemHeader {
    type Vtable = INavigationViewItemHeader_Vtbl;
}
impl ::core::clone::Clone for INavigationViewItemHeader {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewItemHeader {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe21df22c_da4a_4e74_9ffc_b163bd7adacd,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewItemHeader_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewItemHeaderFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewItemHeaderFactory {
    type Vtable = INavigationViewItemHeaderFactory_Vtbl;
}
impl ::core::clone::Clone for INavigationViewItemHeaderFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewItemHeaderFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf3105988_7768_45d3_8bb0_6ded9e43a98b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewItemHeaderFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewItemInvokedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewItemInvokedEventArgs {
    type Vtable = INavigationViewItemInvokedEventArgs_Vtbl;
}
impl ::core::clone::Clone for INavigationViewItemInvokedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewItemInvokedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x29496822_55d2_49fa_964b_f1dbafef85c4,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewItemInvokedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub InvokedItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsSettingsInvoked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewItemInvokedEventArgs2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewItemInvokedEventArgs2 {
    type Vtable = INavigationViewItemInvokedEventArgs2_Vtbl;
}
impl ::core::clone::Clone for INavigationViewItemInvokedEventArgs2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewItemInvokedEventArgs2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb568f2dd_515e_5770_a466_bd5f43fb6442,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewItemInvokedEventArgs2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub InvokedItemContainer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    RecommendedNavigationTransitionInfo: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewItemSeparator(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewItemSeparator {
    type Vtable = INavigationViewItemSeparator_Vtbl;
}
impl ::core::clone::Clone for INavigationViewItemSeparator {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewItemSeparator {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xde62c951_bb9b_471e_83e3_af4791e7096a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewItemSeparator_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewItemSeparatorFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewItemSeparatorFactory {
    type Vtable = INavigationViewItemSeparatorFactory_Vtbl;
}
impl ::core::clone::Clone for INavigationViewItemSeparatorFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewItemSeparatorFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x71cf3a66_db86_49e0_8154_5fd356aedec0,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewItemSeparatorFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewItemStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewItemStatics {
    type Vtable = INavigationViewItemStatics_Vtbl;
}
impl ::core::clone::Clone for INavigationViewItemStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewItemStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x803c0081_fda5_4b90_aace_3f2306dbe5c4,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewItemStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IconProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CompactPaneLengthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewItemStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewItemStatics2 {
    type Vtable = INavigationViewItemStatics2_Vtbl;
}
impl ::core::clone::Clone for INavigationViewItemStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewItemStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf4f2f77c_54b4_541d_b747_3a96e9ff3d55,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewItemStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectsOnInvokedProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewList(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewList {
    type Vtable = INavigationViewList_Vtbl;
}
impl ::core::clone::Clone for INavigationViewList {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewList {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4f726f85_5ce0_48cd_8ef2_1a29458a3404,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewList_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewListFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewListFactory {
    type Vtable = INavigationViewListFactory_Vtbl;
}
impl ::core::clone::Clone for INavigationViewListFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewListFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xfaee9541_c3bf_47bf_b904_6155f4df6b4f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewListFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewPaneClosingEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewPaneClosingEventArgs {
    type Vtable = INavigationViewPaneClosingEventArgs_Vtbl;
}
impl ::core::clone::Clone for INavigationViewPaneClosingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewPaneClosingEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x955575ba_75f5_432d_b49b_60e47552d5ee,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewPaneClosingEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Cancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewSelectionChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewSelectionChangedEventArgs {
    type Vtable = INavigationViewSelectionChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for INavigationViewSelectionChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewSelectionChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5aa509a0_3a5e_4f54_896c_98b85f819508,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewSelectionChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectedItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsSettingsSelected: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewSelectionChangedEventArgs2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewSelectionChangedEventArgs2 {
    type Vtable = INavigationViewSelectionChangedEventArgs2_Vtbl;
}
impl ::core::clone::Clone for INavigationViewSelectionChangedEventArgs2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewSelectionChangedEventArgs2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xfd5af806_d10a_5e8b_973f_3b8fda944625,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewSelectionChangedEventArgs2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectedItemContainer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    RecommendedNavigationTransitionInfo: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewStatics {
    type Vtable = INavigationViewStatics_Vtbl;
}
impl ::core::clone::Clone for INavigationViewStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x363a86c7_72da_4420_b871_15d9d0d45756,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsPaneOpenProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CompactModeThresholdWidthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ExpandedModeThresholdWidthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PaneFooterProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DisplayModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsSettingsVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsPaneToggleButtonVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AlwaysShowHeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CompactPaneLengthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OpenPaneLengthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PaneToggleButtonStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MenuItemsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MenuItemsSourceProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedItemProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SettingsItemProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AutoSuggestBoxProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MenuItemTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MenuItemTemplateSelectorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MenuItemContainerStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MenuItemContainerStyleSelectorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewStatics2 {
    type Vtable = INavigationViewStatics2_Vtbl;
}
impl ::core::clone::Clone for INavigationViewStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8cc50d74_1a42_4852_ab5a_6dc82f28a4ba,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsBackButtonVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsBackEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PaneTitleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewStatics3 {
    type Vtable = INavigationViewStatics3_Vtbl;
}
impl ::core::clone::Clone for INavigationViewStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9b6b69b7_f746_5550_91e1_ee0c9a85c05e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PaneDisplayModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PaneHeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PaneCustomContentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContentOverlayProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsPaneVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectionFollowsFocusProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TemplateSettingsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ShoulderNavigationEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OverflowLabelModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewTemplateSettings(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewTemplateSettings {
    type Vtable = INavigationViewTemplateSettings_Vtbl;
}
impl ::core::clone::Clone for INavigationViewTemplateSettings {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewTemplateSettings {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x2956cbc4_0528_55d5_b2d1_eae807aea6da,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewTemplateSettings_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TopPadding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub OverflowButtonVisibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Visibility,
    ) -> ::windows_core::HRESULT,
    pub PaneToggleButtonVisibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Visibility,
    ) -> ::windows_core::HRESULT,
    pub BackButtonVisibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Visibility,
    ) -> ::windows_core::HRESULT,
    pub TopPaneVisibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Visibility,
    ) -> ::windows_core::HRESULT,
    pub LeftPaneVisibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Visibility,
    ) -> ::windows_core::HRESULT,
    pub SingleSelectionFollowsFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewTemplateSettingsFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewTemplateSettingsFactory {
    type Vtable = INavigationViewTemplateSettingsFactory_Vtbl;
}
impl ::core::clone::Clone for INavigationViewTemplateSettingsFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewTemplateSettingsFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x28a6a351_64bc_5b60_8f74_e9ee908a240e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewTemplateSettingsFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationViewTemplateSettingsStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INavigationViewTemplateSettingsStatics {
    type Vtable = INavigationViewTemplateSettingsStatics_Vtbl;
}
impl ::core::clone::Clone for INavigationViewTemplateSettingsStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INavigationViewTemplateSettingsStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x2c885e59_f7b9_5078_aeb6_8d7a03c05d02,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationViewTemplateSettingsStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TopPaddingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OverflowButtonVisibilityProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PaneToggleButtonVisibilityProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BackButtonVisibilityProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TopPaneVisibilityProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub LeftPaneVisibilityProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SingleSelectionFollowsFocusProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INotifyEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INotifyEventArgs {
    type Vtable = INotifyEventArgs_Vtbl;
}
impl ::core::clone::Clone for INotifyEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INotifyEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xaf0e05f7_c4b7_44c5_b09d_5cb7052b3a97,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INotifyEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Value: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INotifyEventArgs2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for INotifyEventArgs2 {
    type Vtable = INotifyEventArgs2_Vtbl;
}
impl ::core::clone::Clone for INotifyEventArgs2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INotifyEventArgs2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0d140f56_1dce_4fcd_85bc_5a5572273b9c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct INotifyEventArgs2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CallingUri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPage(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPage {
    type Vtable = IPage_Vtbl;
}
impl ::core::clone::Clone for IPage {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPage {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc4b27075_e641_453e_824d_012fc7cf95cf,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPage_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Frame: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    NavigationCacheMode: usize,
    SetNavigationCacheMode: usize,
    pub TopAppBar: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTopAppBar: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BottomAppBar: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetBottomAppBar: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPageFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPageFactory {
    type Vtable = IPageFactory_Vtbl;
}
impl ::core::clone::Clone for IPageFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPageFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xdfa149ac_1849_445e_937c_40a9590cc076,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPageFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPageOverrides(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPageOverrides {
    type Vtable = IPageOverrides_Vtbl;
}
impl ::core::clone::Clone for IPageOverrides {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPageOverrides {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x230b9cb8_3419_4306_aabe_4a8e680d3627,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPageOverrides_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    OnNavigatedFrom: usize,
    OnNavigatedTo: usize,
    OnNavigatingFrom: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPageStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPageStatics {
    type Vtable = IPageStatics_Vtbl;
}
impl ::core::clone::Clone for IPageStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPageStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x376dde71_f725_46dd_8d80_eeeaf7da74e5,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPageStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub FrameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TopAppBarProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BottomAppBarProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPanel(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPanel {
    type Vtable = IPanel_Vtbl;
}
impl ::core::clone::Clone for IPanel {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPanel {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa50a4bbd_8361_469c_90da_e9a40c7474df,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPanel_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Children: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Background: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsItemsHost: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    ChildrenTransitions: usize,
    SetChildrenTransitions: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPanel2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPanel2 {
    type Vtable = IPanel2_Vtbl;
}
impl ::core::clone::Clone for IPanel2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPanel2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x709133c7_38f3_5083_a4bb_06a548a1d231,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPanel2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BackgroundTransition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetBackgroundTransition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPanelFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPanelFactory {
    type Vtable = IPanelFactory_Vtbl;
}
impl ::core::clone::Clone for IPanelFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPanelFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xeee68111_c7cc_433f_95cd_d630c34302dd,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPanelFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPanelStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPanelStatics {
    type Vtable = IPanelStatics_Vtbl;
}
impl ::core::clone::Clone for IPanelStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPanelStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf23d6b5d_8330_47a6_a046_25f509b25232,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPanelStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BackgroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsItemsHostProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ChildrenTransitionsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IParallaxView(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IParallaxView {
    type Vtable = IParallaxView_Vtbl;
}
impl ::core::clone::Clone for IParallaxView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IParallaxView {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6b84fcd4_4083_5b4b_bc40_d9204e19b41a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IParallaxView_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Child: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetChild: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HorizontalShift: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalShift: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub HorizontalSourceEndOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalSourceEndOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub HorizontalSourceOffsetKind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ParallaxSourceOffsetKind,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalSourceOffsetKind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ParallaxSourceOffsetKind,
    ) -> ::windows_core::HRESULT,
    pub HorizontalSourceStartOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalSourceStartOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub IsHorizontalShiftClamped: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsHorizontalShiftClamped: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsVerticalShiftClamped: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsVerticalShiftClamped: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub MaxHorizontalShiftRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetMaxHorizontalShiftRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub MaxVerticalShiftRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetMaxVerticalShiftRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub VerticalShift: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalShift: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub VerticalSourceEndOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalSourceEndOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub VerticalSourceOffsetKind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ParallaxSourceOffsetKind,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalSourceOffsetKind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ParallaxSourceOffsetKind,
    ) -> ::windows_core::HRESULT,
    pub VerticalSourceStartOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalSourceStartOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub RefreshAutomaticHorizontalOffsets: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RefreshAutomaticVerticalOffsets: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IParallaxViewFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IParallaxViewFactory {
    type Vtable = IParallaxViewFactory_Vtbl;
}
impl ::core::clone::Clone for IParallaxViewFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IParallaxViewFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe4eb9642_3e8e_5a26_94f2_9121d121b916,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IParallaxViewFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IParallaxViewStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IParallaxViewStatics {
    type Vtable = IParallaxViewStatics_Vtbl;
}
impl ::core::clone::Clone for IParallaxViewStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IParallaxViewStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8836e49c_0e0e_57d8_9395_f0a9a0d1bb28,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IParallaxViewStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ChildProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HorizontalSourceEndOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HorizontalSourceOffsetKindProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HorizontalSourceStartOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxHorizontalShiftRatioProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HorizontalShiftProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsHorizontalShiftClampedProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsVerticalShiftClampedProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SourceProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub VerticalSourceEndOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub VerticalSourceOffsetKindProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub VerticalSourceStartOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxVerticalShiftRatioProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub VerticalShiftProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPasswordBox(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPasswordBox {
    type Vtable = IPasswordBox_Vtbl;
}
impl ::core::clone::Clone for IPasswordBox {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPasswordBox {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x02b9aa11_0b47_4e7d_ad91_3a4168ed230d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPasswordBox_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Password: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetPassword: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub PasswordChar: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetPasswordChar: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    IsPasswordRevealButtonEnabled: usize,
    SetIsPasswordRevealButtonEnabled: usize,
    pub MaxLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetMaxLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub PasswordChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemovePasswordChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub ContextMenuOpening: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveContextMenuOpening: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub SelectAll: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPasswordBox2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPasswordBox2 {
    type Vtable = IPasswordBox2_Vtbl;
}
impl ::core::clone::Clone for IPasswordBox2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPasswordBox2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5ed738df_212f_4aeb_b5b8_2c219aec3c0c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPasswordBox2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Header: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PlaceholderText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetPlaceholderText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SelectionHighlightColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectionHighlightColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PreventKeyboardDisplayOnProgrammaticFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetPreventKeyboardDisplayOnProgrammaticFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Paste: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemovePaste: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPasswordBox3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPasswordBox3 {
    type Vtable = IPasswordBox3_Vtbl;
}
impl ::core::clone::Clone for IPasswordBox3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPasswordBox3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6024d9d1_56b7_41f0_9558_3934c14244d6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPasswordBox3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PasswordRevealMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut PasswordRevealMode,
    ) -> ::windows_core::HRESULT,
    pub SetPasswordRevealMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: PasswordRevealMode,
    ) -> ::windows_core::HRESULT,
    pub TextReadingOrder: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextReadingOrder,
    ) -> ::windows_core::HRESULT,
    pub SetTextReadingOrder: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextReadingOrder,
    ) -> ::windows_core::HRESULT,
    InputScope: usize,
    SetInputScope: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPasswordBox4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPasswordBox4 {
    type Vtable = IPasswordBox4_Vtbl;
}
impl ::core::clone::Clone for IPasswordBox4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPasswordBox4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x569f4343_8e6c_44bf_808d_0e03964ed32f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPasswordBox4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PasswordChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemovePasswordChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPasswordBox5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPasswordBox5 {
    type Vtable = IPasswordBox5_Vtbl;
}
impl ::core::clone::Clone for IPasswordBox5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPasswordBox5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf96c2753_e1d4_5142_86c2_7318bfbbc705,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPasswordBox5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CanPasteClipboardContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SelectionFlyout: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectionFlyout: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Description: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetDescription: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PasteFromClipboard: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPasswordBoxPasswordChangingEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPasswordBoxPasswordChangingEventArgs {
    type Vtable = IPasswordBoxPasswordChangingEventArgs_Vtbl;
}
impl ::core::clone::Clone for IPasswordBoxPasswordChangingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPasswordBoxPasswordChangingEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x142eda22_3552_4ab8_81a6_a48620ee9c53,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPasswordBoxPasswordChangingEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsContentChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPasswordBoxStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPasswordBoxStatics {
    type Vtable = IPasswordBoxStatics_Vtbl;
}
impl ::core::clone::Clone for IPasswordBoxStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPasswordBoxStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5ee67563_2d74_4ace_bd79_fcab61a7d77b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPasswordBoxStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PasswordProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PasswordCharProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    IsPasswordRevealButtonEnabledProperty: usize,
    pub MaxLengthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPasswordBoxStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPasswordBoxStatics2 {
    type Vtable = IPasswordBoxStatics2_Vtbl;
}
impl ::core::clone::Clone for IPasswordBoxStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPasswordBoxStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xfc57935f_98fa_4066_b785_fa725ecde232,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPasswordBoxStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PlaceholderTextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectionHighlightColorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PreventKeyboardDisplayOnProgrammaticFocusProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPasswordBoxStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPasswordBoxStatics3 {
    type Vtable = IPasswordBoxStatics3_Vtbl;
}
impl ::core::clone::Clone for IPasswordBoxStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPasswordBoxStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa2cdd319_ad6a_4352_b590_f696ffcb8e3f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPasswordBoxStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PasswordRevealModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextReadingOrderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub InputScopeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPasswordBoxStatics5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPasswordBoxStatics5 {
    type Vtable = IPasswordBoxStatics5_Vtbl;
}
impl ::core::clone::Clone for IPasswordBoxStatics5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPasswordBoxStatics5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4bdac1ac_6b42_55f3_bfa4_65c7235078d6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPasswordBoxStatics5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CanPasteClipboardContentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectionFlyoutProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DescriptionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPathIcon(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPathIcon {
    type Vtable = IPathIcon_Vtbl;
}
impl ::core::clone::Clone for IPathIcon {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPathIcon {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x214c62db_c366_4a0e_b9ad_dcf168d7ec0c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPathIcon_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Data: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetData: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPathIconFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPathIconFactory {
    type Vtable = IPathIconFactory_Vtbl;
}
impl ::core::clone::Clone for IPathIconFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPathIconFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xaf9d9652_9c5d_4a37_9e1a_044abeef792b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPathIconFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPathIconSource(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPathIconSource {
    type Vtable = IPathIconSource_Vtbl;
}
impl ::core::clone::Clone for IPathIconSource {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPathIconSource {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1f47010e_b305_4863_8b7a_15d08d633c7a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPathIconSource_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Data: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetData: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPathIconSourceFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPathIconSourceFactory {
    type Vtable = IPathIconSourceFactory_Vtbl;
}
impl ::core::clone::Clone for IPathIconSourceFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPathIconSourceFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8f7f85b9_5247_4f3b_833f_e384bf7e9c84,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPathIconSourceFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPathIconSourceStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPathIconSourceStatics {
    type Vtable = IPathIconSourceStatics_Vtbl;
}
impl ::core::clone::Clone for IPathIconSourceStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPathIconSourceStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xdf7027d5_3682_43ff_80f0_afa256b2fdc3,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPathIconSourceStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DataProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPathIconStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPathIconStatics {
    type Vtable = IPathIconStatics_Vtbl;
}
impl ::core::clone::Clone for IPathIconStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPathIconStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x77b75db8_fb15_491a_b6e3_7dbba911bafe,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPathIconStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DataProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPersonPicture(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPersonPicture {
    type Vtable = IPersonPicture_Vtbl;
}
impl ::core::clone::Clone for IPersonPicture {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPersonPicture {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6c230b6d_0d75_4059_91bc_7b174d1d7315,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPersonPicture_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BadgeNumber: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetBadgeNumber: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub BadgeGlyph: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetBadgeGlyph: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub BadgeImageSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetBadgeImageSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BadgeText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetBadgeText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub IsGroup: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsGroup: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    Contact: usize,
    SetContact: usize,
    pub DisplayName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetDisplayName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub Initials: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetInitials: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub PreferSmallImage: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetPreferSmallImage: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub ProfilePicture: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetProfilePicture: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPersonPictureFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPersonPictureFactory {
    type Vtable = IPersonPictureFactory_Vtbl;
}
impl ::core::clone::Clone for IPersonPictureFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPersonPictureFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4f18330d_0416_4b92_bfd3_bf5780b46ab2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPersonPictureFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPersonPictureStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPersonPictureStatics {
    type Vtable = IPersonPictureStatics_Vtbl;
}
impl ::core::clone::Clone for IPersonPictureStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPersonPictureStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xdbec0982_3c10_4639_9614_aa5b7cdc32ca,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPersonPictureStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BadgeNumberProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BadgeGlyphProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BadgeImageSourceProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BadgeTextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsGroupProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContactProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DisplayNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub InitialsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PreferSmallImageProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ProfilePictureProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPickerConfirmedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPickerConfirmedEventArgs {
    type Vtable = IPickerConfirmedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IPickerConfirmedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPickerConfirmedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x447a9b51_1e23_4779_992b_986849713941,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPickerConfirmedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPickerFlyout(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPickerFlyout {
    type Vtable = IPickerFlyout_Vtbl;
}
impl ::core::clone::Clone for IPickerFlyout {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPickerFlyout {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa336ffdb_08d9_43e6_944e_f2e5c7cee630,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPickerFlyout_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Content: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ConfirmationButtonsVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetConfirmationButtonsVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Confirmed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveConfirmed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub ShowAtAsync: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPickerFlyoutPresenter(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPickerFlyoutPresenter {
    type Vtable = IPickerFlyoutPresenter_Vtbl;
}
impl ::core::clone::Clone for IPickerFlyoutPresenter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPickerFlyoutPresenter {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5884c978_6b27_4b38_a9ae_677c2994652e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPickerFlyoutPresenter_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPickerFlyoutStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPickerFlyoutStatics {
    type Vtable = IPickerFlyoutStatics_Vtbl;
}
impl ::core::clone::Clone for IPickerFlyoutStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPickerFlyoutStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xaf18a436_f38a_4abd_b933_6286c115b07f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPickerFlyoutStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ContentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ConfirmationButtonsVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPivot(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPivot {
    type Vtable = IPivot_Vtbl;
}
impl ::core::clone::Clone for IPivot {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPivot {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x103e9b13_3400_4a16_90b9_6912bf06974e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPivot_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Title: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTitle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TitleTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTitleTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetSelectedIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub SelectedItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectedItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsLocked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsLocked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub SelectionChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveSelectionChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub PivotItemLoading: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemovePivotItemLoading: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub PivotItemLoaded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemovePivotItemLoaded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub PivotItemUnloading: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemovePivotItemUnloading: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub PivotItemUnloaded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemovePivotItemUnloaded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPivot2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPivot2 {
    type Vtable = IPivot2_Vtbl;
}
impl ::core::clone::Clone for IPivot2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPivot2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8b8a8660_1a55_411c_a82d_18991c3f0d6f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPivot2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LeftHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetLeftHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub LeftHeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetLeftHeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RightHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetRightHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RightHeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetRightHeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPivot3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPivot3 {
    type Vtable = IPivot3_Vtbl;
}
impl ::core::clone::Clone for IPivot3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPivot3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x95bcbf96_f0da_4089_8c65_e8b81354c766,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPivot3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HeaderFocusVisualPlacement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut PivotHeaderFocusVisualPlacement,
    ) -> ::windows_core::HRESULT,
    pub SetHeaderFocusVisualPlacement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: PivotHeaderFocusVisualPlacement,
    ) -> ::windows_core::HRESULT,
    pub IsHeaderItemsCarouselEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsHeaderItemsCarouselEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPivotFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPivotFactory {
    type Vtable = IPivotFactory_Vtbl;
}
impl ::core::clone::Clone for IPivotFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPivotFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1b0a818e_2529_4762_ba44_9abc68c3ceca,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPivotFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPivotItem(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPivotItem {
    type Vtable = IPivotItem_Vtbl;
}
impl ::core::clone::Clone for IPivotItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPivotItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa4764371_a502_47a3_915e_4aa096daf87f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPivotItem_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Header: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPivotItemEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPivotItemEventArgs {
    type Vtable = IPivotItemEventArgs_Vtbl;
}
impl ::core::clone::Clone for IPivotItemEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPivotItemEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1a6f7254_1ed5_4bc5_a060_655530bca6ba,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPivotItemEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Item: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPivotItemFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPivotItemFactory {
    type Vtable = IPivotItemFactory_Vtbl;
}
impl ::core::clone::Clone for IPivotItemFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPivotItemFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0dced981_636e_4a34_8a3f_8ee018639285,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPivotItemFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPivotItemStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPivotItemStatics {
    type Vtable = IPivotItemStatics_Vtbl;
}
impl ::core::clone::Clone for IPivotItemStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPivotItemStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe147ad0c_488b_4a6e_becd_a5dbd9941754,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPivotItemStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPivotStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPivotStatics {
    type Vtable = IPivotStatics_Vtbl;
}
impl ::core::clone::Clone for IPivotStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPivotStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xee22c7f4_c15d_4ff3_8a94_f50dfdfbe899,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPivotStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TitleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TitleTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedIndexProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedItemProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsLockedProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SlideInAnimationGroupProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetSlideInAnimationGroup: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut PivotSlideInAnimationGroup,
    ) -> ::windows_core::HRESULT,
    pub SetSlideInAnimationGroup: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: PivotSlideInAnimationGroup,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPivotStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPivotStatics2 {
    type Vtable = IPivotStatics2_Vtbl;
}
impl ::core::clone::Clone for IPivotStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPivotStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd7518add_be75_4023_8deb_c6513c3192a3,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPivotStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LeftHeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub LeftHeaderTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RightHeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RightHeaderTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPivotStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPivotStatics3 {
    type Vtable = IPivotStatics3_Vtbl;
}
impl ::core::clone::Clone for IPivotStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPivotStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x78b6274e_6616_4600_a039_922a5d09330b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPivotStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HeaderFocusVisualPlacementProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsHeaderItemsCarouselEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IProgressBar(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IProgressBar {
    type Vtable = IProgressBar_Vtbl;
}
impl ::core::clone::Clone for IProgressBar {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IProgressBar {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xae752c89_0067_4963_bf4c_29db0c4a507e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IProgressBar_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsIndeterminate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsIndeterminate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub ShowError: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetShowError: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub ShowPaused: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetShowPaused: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub TemplateSettings: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IProgressBarFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IProgressBarFactory {
    type Vtable = IProgressBarFactory_Vtbl;
}
impl ::core::clone::Clone for IProgressBarFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IProgressBarFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xda9a8c11_1591_400b_a993_0f1c5cc12f3b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IProgressBarFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IProgressBarStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IProgressBarStatics {
    type Vtable = IProgressBarStatics_Vtbl;
}
impl ::core::clone::Clone for IProgressBarStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IProgressBarStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x7a129fda_5837_4e26_b3b4_e1c092cebbec,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IProgressBarStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsIndeterminateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ShowErrorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ShowPausedProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IProgressRing(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IProgressRing {
    type Vtable = IProgressRing_Vtbl;
}
impl ::core::clone::Clone for IProgressRing {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IProgressRing {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6da5e49e_6e9d_425c_bd7c_02173e39763f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IProgressRing_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsActive: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsActive: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub TemplateSettings: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IProgressRingStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IProgressRingStatics {
    type Vtable = IProgressRingStatics_Vtbl;
}
impl ::core::clone::Clone for IProgressRingStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IProgressRingStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe8b62507_4e2c_47d5_a54a_c6c48a5e6989,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IProgressRingStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsActiveProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRadioButton(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRadioButton {
    type Vtable = IRadioButton_Vtbl;
}
impl ::core::clone::Clone for IRadioButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRadioButton {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x325c44e0_9a03_4bf3_abd6_6fbb46c9a486,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRadioButton_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub GroupName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetGroupName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRadioButtonFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRadioButtonFactory {
    type Vtable = IRadioButtonFactory_Vtbl;
}
impl ::core::clone::Clone for IRadioButtonFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRadioButtonFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf1d04933_34e1_4a5c_b2ae_ca3b1c0b20de,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRadioButtonFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRadioButtonStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRadioButtonStatics {
    type Vtable = IRadioButtonStatics_Vtbl;
}
impl ::core::clone::Clone for IRadioButtonStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRadioButtonStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6b149293_f50f_4bd8_b0ac_5c162f33a208,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRadioButtonStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub GroupNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRatingControl(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRatingControl {
    type Vtable = IRatingControl_Vtbl;
}
impl ::core::clone::Clone for IRatingControl {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRatingControl {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa7d91ca7_e5cf_4963_a24e_9673fe5ffdd5,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRatingControl_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Caption: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetCaption: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub InitialSetValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetInitialSetValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub IsClearEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsClearEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsReadOnly: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsReadOnly: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub MaxRating: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetMaxRating: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub PlaceholderValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetPlaceholderValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub ItemInfo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetItemInfo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Value: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub ValueChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveValueChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRatingControlFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRatingControlFactory {
    type Vtable = IRatingControlFactory_Vtbl;
}
impl ::core::clone::Clone for IRatingControlFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRatingControlFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x18d81716_c542_4ccb_b347_5e62c5db782e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRatingControlFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRatingControlStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRatingControlStatics {
    type Vtable = IRatingControlStatics_Vtbl;
}
impl ::core::clone::Clone for IRatingControlStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRatingControlStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd062d399_ad85_4c1c_b2c4_35dd4432275e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRatingControlStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CaptionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub InitialSetValueProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsClearEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsReadOnlyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxRatingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PlaceholderValueProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemInfoProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ValueProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRatingItemFontInfo(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRatingItemFontInfo {
    type Vtable = IRatingItemFontInfo_Vtbl;
}
impl ::core::clone::Clone for IRatingItemFontInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRatingItemFontInfo {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x054723e9_7989_4d5c_9d01_a7eb876f1071,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRatingItemFontInfo_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DisabledGlyph: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetDisabledGlyph: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub Glyph: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetGlyph: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub PointerOverGlyph: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetPointerOverGlyph: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub PointerOverPlaceholderGlyph: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetPointerOverPlaceholderGlyph: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub PlaceholderGlyph: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetPlaceholderGlyph: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub UnsetGlyph: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetUnsetGlyph: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRatingItemFontInfoFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRatingItemFontInfoFactory {
    type Vtable = IRatingItemFontInfoFactory_Vtbl;
}
impl ::core::clone::Clone for IRatingItemFontInfoFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRatingItemFontInfoFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9603fe56_9e9f_40b5_bae1_4481bb73bcd3,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRatingItemFontInfoFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRatingItemFontInfoStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRatingItemFontInfoStatics {
    type Vtable = IRatingItemFontInfoStatics_Vtbl;
}
impl ::core::clone::Clone for IRatingItemFontInfoStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRatingItemFontInfoStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xfb214f01_6434_4eeb_82ff_7ce5d40bf510,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRatingItemFontInfoStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DisabledGlyphProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GlyphProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PlaceholderGlyphProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PointerOverGlyphProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PointerOverPlaceholderGlyphProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub UnsetGlyphProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRatingItemImageInfo(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRatingItemImageInfo {
    type Vtable = IRatingItemImageInfo_Vtbl;
}
impl ::core::clone::Clone for IRatingItemImageInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRatingItemImageInfo {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x25240e8c_e0d2_490e_b8f8_96c8ee0512b9,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRatingItemImageInfo_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DisabledImage: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetDisabledImage: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Image: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetImage: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PlaceholderImage: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPlaceholderImage: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PointerOverImage: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPointerOverImage: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PointerOverPlaceholderImage: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPointerOverPlaceholderImage: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub UnsetImage: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetUnsetImage: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRatingItemImageInfoFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRatingItemImageInfoFactory {
    type Vtable = IRatingItemImageInfoFactory_Vtbl;
}
impl ::core::clone::Clone for IRatingItemImageInfoFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRatingItemImageInfoFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x269e03f2_da79_4787_9f4a_24a6fa56cde2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRatingItemImageInfoFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRatingItemImageInfoStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRatingItemImageInfoStatics {
    type Vtable = IRatingItemImageInfoStatics_Vtbl;
}
impl ::core::clone::Clone for IRatingItemImageInfoStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRatingItemImageInfoStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8438486b_4b1c_4123_ba0b_73484d68c338,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRatingItemImageInfoStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DisabledImageProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ImageProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PlaceholderImageProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PointerOverImageProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PointerOverPlaceholderImageProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub UnsetImageProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRatingItemInfo(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRatingItemInfo {
    type Vtable = IRatingItemInfo_Vtbl;
}
impl ::core::clone::Clone for IRatingItemInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRatingItemInfo {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9ccbe6a2_591e_47a0_a318_6a1f7947da2d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRatingItemInfo_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRatingItemInfoFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRatingItemInfoFactory {
    type Vtable = IRatingItemInfoFactory_Vtbl;
}
impl ::core::clone::Clone for IRatingItemInfoFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRatingItemInfoFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb0fd43d6_cfec_43c8_9ac5_0b0d5e25d862,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRatingItemInfoFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRefreshContainer(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRefreshContainer {
    type Vtable = IRefreshContainer_Vtbl;
}
impl ::core::clone::Clone for IRefreshContainer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRefreshContainer {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x535dc413_b1d5_43c1_b057_8658ce1e0ba2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRefreshContainer_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Visualizer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetVisualizer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PullDirection: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut RefreshPullDirection,
    ) -> ::windows_core::HRESULT,
    pub SetPullDirection: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: RefreshPullDirection,
    ) -> ::windows_core::HRESULT,
    pub RefreshRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveRefreshRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RequestRefresh: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRefreshContainerFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRefreshContainerFactory {
    type Vtable = IRefreshContainerFactory_Vtbl;
}
impl ::core::clone::Clone for IRefreshContainerFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRefreshContainerFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0a04777f_089e_4239_baeb_c4641484c37e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRefreshContainerFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRefreshContainerStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRefreshContainerStatics {
    type Vtable = IRefreshContainerStatics_Vtbl;
}
impl ::core::clone::Clone for IRefreshContainerStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRefreshContainerStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa20af5a5_7015_475d_9de3_81a0479dda38,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRefreshContainerStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub VisualizerProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PullDirectionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRefreshInteractionRatioChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRefreshInteractionRatioChangedEventArgs {
    type Vtable = IRefreshInteractionRatioChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IRefreshInteractionRatioChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRefreshInteractionRatioChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd7e47820_dc47_4b8e_bb27_7f0a83f29a07,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRefreshInteractionRatioChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub InteractionRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRefreshRequestedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRefreshRequestedEventArgs {
    type Vtable = IRefreshRequestedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IRefreshRequestedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRefreshRequestedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1b089f43_cfcf_4ac6_b31f_8dab6eefdd93,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRefreshRequestedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub GetDeferral: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRefreshStateChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRefreshStateChangedEventArgs {
    type Vtable = IRefreshStateChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IRefreshStateChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRefreshStateChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xbb6c901e_21fe_4109_af80_73ec661b678a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRefreshStateChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OldState: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut RefreshVisualizerState,
    ) -> ::windows_core::HRESULT,
    pub NewState: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut RefreshVisualizerState,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRefreshVisualizer(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRefreshVisualizer {
    type Vtable = IRefreshVisualizer_Vtbl;
}
impl ::core::clone::Clone for IRefreshVisualizer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRefreshVisualizer {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc0e30122_f3eb_4baa_a11f_c3f87342cbf4,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRefreshVisualizer_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub RequestRefresh: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Orientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut RefreshVisualizerOrientation,
    ) -> ::windows_core::HRESULT,
    pub SetOrientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: RefreshVisualizerOrientation,
    ) -> ::windows_core::HRESULT,
    pub Content: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub State: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut RefreshVisualizerState,
    ) -> ::windows_core::HRESULT,
    pub RefreshRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveRefreshRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RefreshStateChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveRefreshStateChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRefreshVisualizerFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRefreshVisualizerFactory {
    type Vtable = IRefreshVisualizerFactory_Vtbl;
}
impl ::core::clone::Clone for IRefreshVisualizerFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRefreshVisualizerFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6f5c6132_6e09_4c10_824a_127d36672715,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRefreshVisualizerFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRefreshVisualizerStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRefreshVisualizerStatics {
    type Vtable = IRefreshVisualizerStatics_Vtbl;
}
impl ::core::clone::Clone for IRefreshVisualizerStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRefreshVisualizerStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xafea56af_362a_4015_b155_733a1f869831,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRefreshVisualizerStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub InfoProviderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OrientationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub StateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRelativePanel(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRelativePanel {
    type Vtable = IRelativePanel_Vtbl;
}
impl ::core::clone::Clone for IRelativePanel {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRelativePanel {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x2eabfaeb_b35a_4035_acea_3c4a3730683f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRelativePanel_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BorderThickness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetBorderThickness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub CornerRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CornerRadius,
    ) -> ::windows_core::HRESULT,
    pub SetCornerRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CornerRadius,
    ) -> ::windows_core::HRESULT,
    pub Padding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetPadding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRelativePanel2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRelativePanel2 {
    type Vtable = IRelativePanel2_Vtbl;
}
impl ::core::clone::Clone for IRelativePanel2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRelativePanel2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc09bd88c_1e82_53b3_8c01_7d0432f5f7db,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRelativePanel2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BackgroundSizing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut BackgroundSizing,
    ) -> ::windows_core::HRESULT,
    pub SetBackgroundSizing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: BackgroundSizing,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRelativePanelFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRelativePanelFactory {
    type Vtable = IRelativePanelFactory_Vtbl;
}
impl ::core::clone::Clone for IRelativePanelFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRelativePanelFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8460193c_361b_44ba_a17e_b84c9dcdc772,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRelativePanelFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRelativePanelStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRelativePanelStatics {
    type Vtable = IRelativePanelStatics_Vtbl;
}
impl ::core::clone::Clone for IRelativePanelStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRelativePanelStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x15903c27_f18c_4c35_8e19_6a7459d907b6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRelativePanelStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LeftOfProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetLeftOf: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetLeftOf: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AboveProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetAbove: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetAbove: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RightOfProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetRightOf: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetRightOf: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BelowProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetBelow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetBelow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AlignHorizontalCenterWithProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetAlignHorizontalCenterWith: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetAlignHorizontalCenterWith: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AlignVerticalCenterWithProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetAlignVerticalCenterWith: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetAlignVerticalCenterWith: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AlignLeftWithProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetAlignLeftWith: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetAlignLeftWith: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AlignTopWithProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetAlignTopWith: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetAlignTopWith: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AlignRightWithProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetAlignRightWith: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetAlignRightWith: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AlignBottomWithProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetAlignBottomWith: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetAlignBottomWith: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AlignLeftWithPanelProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetAlignLeftWithPanel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAlignLeftWithPanel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub AlignTopWithPanelProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetAlignTopWithPanel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAlignTopWithPanel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub AlignRightWithPanelProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetAlignRightWithPanel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAlignRightWithPanel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub AlignBottomWithPanelProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetAlignBottomWithPanel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAlignBottomWithPanel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub AlignHorizontalCenterWithPanelProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetAlignHorizontalCenterWithPanel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAlignHorizontalCenterWithPanel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub AlignVerticalCenterWithPanelProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetAlignVerticalCenterWithPanel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAlignVerticalCenterWithPanel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub BorderBrushProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BorderThicknessProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CornerRadiusProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PaddingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRelativePanelStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRelativePanelStatics2 {
    type Vtable = IRelativePanelStatics2_Vtbl;
}
impl ::core::clone::Clone for IRelativePanelStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRelativePanelStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8d6b3444_5fbc_5d8b_8b46_22176f21fa8e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRelativePanelStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BackgroundSizingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichEditBox(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichEditBox {
    type Vtable = IRichEditBox_Vtbl;
}
impl ::core::clone::Clone for IRichEditBox {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichEditBox {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x90a57a40_80b6_4fce_b1ec_e3c616284b6a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichEditBox_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsReadOnly: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsReadOnly: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub AcceptsReturn: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAcceptsReturn: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub TextAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetTextAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextAlignment,
    ) -> ::windows_core::HRESULT,
    pub TextWrapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextWrapping,
    ) -> ::windows_core::HRESULT,
    pub SetTextWrapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextWrapping,
    ) -> ::windows_core::HRESULT,
    pub IsSpellCheckEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsSpellCheckEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsTextPredictionEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsTextPredictionEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Document: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    InputScope: usize,
    SetInputScope: usize,
    pub TextChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveTextChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub SelectionChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveSelectionChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub ContextMenuOpening: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveContextMenuOpening: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichEditBox2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichEditBox2 {
    type Vtable = IRichEditBox2_Vtbl;
}
impl ::core::clone::Clone for IRichEditBox2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichEditBox2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xbbea6ead_e805_47a4_bbe7_47e59b8f74a7,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichEditBox2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Header: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PlaceholderText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetPlaceholderText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SelectionHighlightColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectionHighlightColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PreventKeyboardDisplayOnProgrammaticFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetPreventKeyboardDisplayOnProgrammaticFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsColorFontEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsColorFontEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Paste: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemovePaste: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichEditBox3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichEditBox3 {
    type Vtable = IRichEditBox3_Vtbl;
}
impl ::core::clone::Clone for IRichEditBox3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichEditBox3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6b17a462_fbb6_4fff_9991_9399cb9c0b90,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichEditBox3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TextCompositionStarted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveTextCompositionStarted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub TextCompositionChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveTextCompositionChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub TextCompositionEnded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveTextCompositionEnded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub TextReadingOrder: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextReadingOrder,
    ) -> ::windows_core::HRESULT,
    pub SetTextReadingOrder: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextReadingOrder,
    ) -> ::windows_core::HRESULT,
    pub DesiredCandidateWindowAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CandidateWindowAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetDesiredCandidateWindowAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CandidateWindowAlignment,
    ) -> ::windows_core::HRESULT,
    pub CandidateWindowBoundsChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveCandidateWindowBoundsChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub TextChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveTextChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichEditBox4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichEditBox4 {
    type Vtable = IRichEditBox4_Vtbl;
}
impl ::core::clone::Clone for IRichEditBox4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichEditBox4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5caa8d35_c838_4bad_a07c_204183bb751f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichEditBox4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub GetLinguisticAlternativesAsync: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ClipboardCopyFormat: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut RichEditClipboardFormat,
    ) -> ::windows_core::HRESULT,
    pub SetClipboardCopyFormat: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: RichEditClipboardFormat,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichEditBox5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichEditBox5 {
    type Vtable = IRichEditBox5_Vtbl;
}
impl ::core::clone::Clone for IRichEditBox5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichEditBox5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa66d9cea_6391_4f3b_9fd3_1fd01f49f327,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichEditBox5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectionHighlightColorWhenNotFocused: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectionHighlightColorWhenNotFocused: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetMaxLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichEditBox6(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichEditBox6 {
    type Vtable = IRichEditBox6_Vtbl;
}
impl ::core::clone::Clone for IRichEditBox6 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichEditBox6 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0c89d500_e8d8_4eae_8804_33649205d7d2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichEditBox6_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HorizontalTextAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalTextAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextAlignment,
    ) -> ::windows_core::HRESULT,
    pub CharacterCasing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CharacterCasing,
    ) -> ::windows_core::HRESULT,
    pub SetCharacterCasing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CharacterCasing,
    ) -> ::windows_core::HRESULT,
    pub DisabledFormattingAccelerators: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut DisabledFormattingAccelerators,
    ) -> ::windows_core::HRESULT,
    pub SetDisabledFormattingAccelerators: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: DisabledFormattingAccelerators,
    ) -> ::windows_core::HRESULT,
    pub CopyingToClipboard: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveCopyingToClipboard: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub CuttingToClipboard: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveCuttingToClipboard: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichEditBox7(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichEditBox7 {
    type Vtable = IRichEditBox7_Vtbl;
}
impl ::core::clone::Clone for IRichEditBox7 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichEditBox7 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x980c93ea_241f_4f6a_a539_9d185c8cf18a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichEditBox7_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ContentLinkForegroundColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetContentLinkForegroundColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContentLinkBackgroundColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetContentLinkBackgroundColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    ContentLinkProviders: usize,
    SetContentLinkProviders: usize,
    pub HandwritingView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHandwritingView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsHandwritingViewEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsHandwritingViewEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub ContentLinkChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveContentLinkChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    ContentLinkInvoked: usize,
    pub RemoveContentLinkInvoked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichEditBox8(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichEditBox8 {
    type Vtable = IRichEditBox8_Vtbl;
}
impl ::core::clone::Clone for IRichEditBox8 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichEditBox8 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa098e0b8_18e2_513e_9d8d_4e9703410c03,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichEditBox8_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TextDocument: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectionFlyout: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectionFlyout: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ProofingMenuFlyout: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Description: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetDescription: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectionChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveSelectionChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichEditBoxFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichEditBoxFactory {
    type Vtable = IRichEditBoxFactory_Vtbl;
}
impl ::core::clone::Clone for IRichEditBoxFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichEditBoxFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x61a1df62_2806_41ed_88ed_ae21f47ab422,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichEditBoxFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichEditBoxSelectionChangingEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichEditBoxSelectionChangingEventArgs {
    type Vtable = IRichEditBoxSelectionChangingEventArgs_Vtbl;
}
impl ::core::clone::Clone for IRichEditBoxSelectionChangingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichEditBoxSelectionChangingEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x90e0035c_e8b8_5c33_9896_4e989d65829c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichEditBoxSelectionChangingEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectionStart: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SelectionLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub Cancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichEditBoxStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichEditBoxStatics {
    type Vtable = IRichEditBoxStatics_Vtbl;
}
impl ::core::clone::Clone for IRichEditBoxStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichEditBoxStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf5e03a74_88ea_479b_9a05_37089ff30ede,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichEditBoxStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsReadOnlyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AcceptsReturnProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextWrappingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsSpellCheckEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsTextPredictionEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub InputScopeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichEditBoxStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichEditBoxStatics2 {
    type Vtable = IRichEditBoxStatics2_Vtbl;
}
impl ::core::clone::Clone for IRichEditBoxStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichEditBoxStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe3eb26de_2748_420b_b1fc_ce95b6e85eec,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichEditBoxStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PlaceholderTextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectionHighlightColorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PreventKeyboardDisplayOnProgrammaticFocusProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsColorFontEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichEditBoxStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichEditBoxStatics3 {
    type Vtable = IRichEditBoxStatics3_Vtbl;
}
impl ::core::clone::Clone for IRichEditBoxStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichEditBoxStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6d17eec5_1fb3_4c8b_aa23_f5e15d6ab64e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichEditBoxStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DesiredCandidateWindowAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextReadingOrderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichEditBoxStatics4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichEditBoxStatics4 {
    type Vtable = IRichEditBoxStatics4_Vtbl;
}
impl ::core::clone::Clone for IRichEditBoxStatics4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichEditBoxStatics4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf5d54fd7_7796_42a5_a5e5_2cd211ee8176,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichEditBoxStatics4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ClipboardCopyFormatProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichEditBoxStatics5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichEditBoxStatics5 {
    type Vtable = IRichEditBoxStatics5_Vtbl;
}
impl ::core::clone::Clone for IRichEditBoxStatics5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichEditBoxStatics5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4b5c4568_43d5_43e6_bbb9_cb4e6250f45a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichEditBoxStatics5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectionHighlightColorWhenNotFocusedProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxLengthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichEditBoxStatics6(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichEditBoxStatics6 {
    type Vtable = IRichEditBoxStatics6_Vtbl;
}
impl ::core::clone::Clone for IRichEditBoxStatics6 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichEditBoxStatics6 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xfe40e287_82ed_4f7e_92ba_66f67bc1ff44,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichEditBoxStatics6_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HorizontalTextAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CharacterCasingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DisabledFormattingAcceleratorsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichEditBoxStatics7(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichEditBoxStatics7 {
    type Vtable = IRichEditBoxStatics7_Vtbl;
}
impl ::core::clone::Clone for IRichEditBoxStatics7 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichEditBoxStatics7 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x59fa898f_f861_43da_a7ce_4b9c21d835f9,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichEditBoxStatics7_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ContentLinkForegroundColorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContentLinkBackgroundColorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContentLinkProvidersProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HandwritingViewProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsHandwritingViewEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichEditBoxStatics8(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichEditBoxStatics8 {
    type Vtable = IRichEditBoxStatics8_Vtbl;
}
impl ::core::clone::Clone for IRichEditBoxStatics8 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichEditBoxStatics8 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x58045172_106b_56a9_a8e4_4b74bf347d4e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichEditBoxStatics8_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectionFlyoutProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ProofingMenuFlyoutProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DescriptionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichEditBoxTextChangingEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichEditBoxTextChangingEventArgs {
    type Vtable = IRichEditBoxTextChangingEventArgs_Vtbl;
}
impl ::core::clone::Clone for IRichEditBoxTextChangingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichEditBoxTextChangingEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x54065018_2813_4922_9f8e_b6bbafd995d8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichEditBoxTextChangingEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichEditBoxTextChangingEventArgs2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichEditBoxTextChangingEventArgs2 {
    type Vtable = IRichEditBoxTextChangingEventArgs2_Vtbl;
}
impl ::core::clone::Clone for IRichEditBoxTextChangingEventArgs2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichEditBoxTextChangingEventArgs2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x395b0db5_636e_413e_9eb4_fc22ebfa3628,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichEditBoxTextChangingEventArgs2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsContentChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichTextBlock(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichTextBlock {
    type Vtable = IRichTextBlock_Vtbl;
}
impl ::core::clone::Clone for IRichTextBlock {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichTextBlock {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe5fff9e2_b968_49e7_97d4_8cca2ac3ae7c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichTextBlock_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub FontSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetFontSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub FontFamily: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetFontFamily: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontWeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontWeight,
    ) -> ::windows_core::HRESULT,
    pub SetFontWeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontWeight,
    ) -> ::windows_core::HRESULT,
    pub FontStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontStyle,
    ) -> ::windows_core::HRESULT,
    pub SetFontStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontStyle,
    ) -> ::windows_core::HRESULT,
    pub FontStretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontStretch,
    ) -> ::windows_core::HRESULT,
    pub SetFontStretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontStretch,
    ) -> ::windows_core::HRESULT,
    pub Foreground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextWrapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextWrapping,
    ) -> ::windows_core::HRESULT,
    pub SetTextWrapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextWrapping,
    ) -> ::windows_core::HRESULT,
    pub TextTrimming: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextTrimming,
    ) -> ::windows_core::HRESULT,
    pub SetTextTrimming: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextTrimming,
    ) -> ::windows_core::HRESULT,
    pub TextAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetTextAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextAlignment,
    ) -> ::windows_core::HRESULT,
    Blocks: usize,
    pub Padding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetPadding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub LineHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetLineHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub LineStackingStrategy: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::LineStackingStrategy,
    ) -> ::windows_core::HRESULT,
    pub SetLineStackingStrategy: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::LineStackingStrategy,
    ) -> ::windows_core::HRESULT,
    pub CharacterSpacing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetCharacterSpacing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub OverflowContentTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetOverflowContentTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsTextSelectionEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsTextSelectionEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub HasOverflowContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SelectedText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    ContentStart: usize,
    ContentEnd: usize,
    SelectionStart: usize,
    SelectionEnd: usize,
    pub BaselineOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SelectionChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveSelectionChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub ContextMenuOpening: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveContextMenuOpening: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub SelectAll: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    Select: usize,
    GetPositionFromPoint: usize,
    pub Focus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::FocusState,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub TextIndent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetTextIndent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichTextBlock2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichTextBlock2 {
    type Vtable = IRichTextBlock2_Vtbl;
}
impl ::core::clone::Clone for IRichTextBlock2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichTextBlock2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3f209013_03e7_4508_964a_91aedab3d11e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichTextBlock2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub MaxLines: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetMaxLines: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub TextLineBounds: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextLineBounds,
    ) -> ::windows_core::HRESULT,
    pub SetTextLineBounds: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextLineBounds,
    ) -> ::windows_core::HRESULT,
    pub SelectionHighlightColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectionHighlightColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OpticalMarginAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::OpticalMarginAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetOpticalMarginAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::OpticalMarginAlignment,
    ) -> ::windows_core::HRESULT,
    pub IsColorFontEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsColorFontEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub TextReadingOrder: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextReadingOrder,
    ) -> ::windows_core::HRESULT,
    pub SetTextReadingOrder: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextReadingOrder,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichTextBlock3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichTextBlock3 {
    type Vtable = IRichTextBlock3_Vtbl;
}
impl ::core::clone::Clone for IRichTextBlock3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichTextBlock3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x7d39ae83_8918_4613_b007_7c898ba2950e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichTextBlock3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsTextScaleFactorEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsTextScaleFactorEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichTextBlock4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichTextBlock4 {
    type Vtable = IRichTextBlock4_Vtbl;
}
impl ::core::clone::Clone for IRichTextBlock4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichTextBlock4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3577c1ea_24fd_4f50_bbe4_3fb654ea58c5,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichTextBlock4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TextDecorations: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::TextDecorations,
    ) -> ::windows_core::HRESULT,
    pub SetTextDecorations: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::TextDecorations,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichTextBlock5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichTextBlock5 {
    type Vtable = IRichTextBlock5_Vtbl;
}
impl ::core::clone::Clone for IRichTextBlock5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichTextBlock5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9c7dc0c6_7a9f_45b6_8818_822c549ba094,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichTextBlock5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsTextTrimmed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub HorizontalTextAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalTextAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextAlignment,
    ) -> ::windows_core::HRESULT,
    TextHighlighters: usize,
    pub IsTextTrimmedChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveIsTextTrimmedChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichTextBlock6(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichTextBlock6 {
    type Vtable = IRichTextBlock6_Vtbl;
}
impl ::core::clone::Clone for IRichTextBlock6 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichTextBlock6 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xae9010cd_e899_526e_927e_88e0eed693c8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichTextBlock6_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectionFlyout: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectionFlyout: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CopySelectionToClipboard: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichTextBlockOverflow(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichTextBlockOverflow {
    type Vtable = IRichTextBlockOverflow_Vtbl;
}
impl ::core::clone::Clone for IRichTextBlockOverflow {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichTextBlockOverflow {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4f93749b_dac3_4a42_9cbb_99f0de37c071,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichTextBlockOverflow_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OverflowContentTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetOverflowContentTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Padding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetPadding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub ContentSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HasOverflowContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    ContentStart: usize,
    ContentEnd: usize,
    pub BaselineOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    GetPositionFromPoint: usize,
    pub Focus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::FocusState,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichTextBlockOverflow2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichTextBlockOverflow2 {
    type Vtable = IRichTextBlockOverflow2_Vtbl;
}
impl ::core::clone::Clone for IRichTextBlockOverflow2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichTextBlockOverflow2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8742624e_a882_4826_b929_4d5c3905b9a1,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichTextBlockOverflow2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub MaxLines: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetMaxLines: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichTextBlockOverflow3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichTextBlockOverflow3 {
    type Vtable = IRichTextBlockOverflow3_Vtbl;
}
impl ::core::clone::Clone for IRichTextBlockOverflow3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichTextBlockOverflow3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x7f69587b_5c7f_4b5f_bdbc_fb95c90e10de,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichTextBlockOverflow3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsTextTrimmed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub IsTextTrimmedChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveIsTextTrimmedChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichTextBlockOverflowStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichTextBlockOverflowStatics {
    type Vtable = IRichTextBlockOverflowStatics_Vtbl;
}
impl ::core::clone::Clone for IRichTextBlockOverflowStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichTextBlockOverflowStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x041ac2f7_4f2b_43c3_a122_3fea9ca9dc87,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichTextBlockOverflowStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OverflowContentTargetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PaddingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HasOverflowContentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichTextBlockOverflowStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichTextBlockOverflowStatics2 {
    type Vtable = IRichTextBlockOverflowStatics2_Vtbl;
}
impl ::core::clone::Clone for IRichTextBlockOverflowStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichTextBlockOverflowStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb5ebed4c_f8c4_4a3a_907f_e53e78279fa3,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichTextBlockOverflowStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub MaxLinesProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichTextBlockOverflowStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichTextBlockOverflowStatics3 {
    type Vtable = IRichTextBlockOverflowStatics3_Vtbl;
}
impl ::core::clone::Clone for IRichTextBlockOverflowStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichTextBlockOverflowStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd1d4a705_eb0b_4ecb_b9b7_e65d03087c8e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichTextBlockOverflowStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsTextTrimmedProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichTextBlockStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichTextBlockStatics {
    type Vtable = IRichTextBlockStatics_Vtbl;
}
impl ::core::clone::Clone for IRichTextBlockStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichTextBlockStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x492d883c_adea_433c_be1c_208a164262be,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichTextBlockStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub FontSizeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontFamilyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontWeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontStretchProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextWrappingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextTrimmingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PaddingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub LineHeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub LineStackingStrategyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CharacterSpacingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OverflowContentTargetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsTextSelectionEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HasOverflowContentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedTextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextIndentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichTextBlockStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichTextBlockStatics2 {
    type Vtable = IRichTextBlockStatics2_Vtbl;
}
impl ::core::clone::Clone for IRichTextBlockStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichTextBlockStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0d6131e1_af29_48ce_8aaf_74ecc28bfbb0,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichTextBlockStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub MaxLinesProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextLineBoundsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectionHighlightColorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OpticalMarginAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsColorFontEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextReadingOrderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichTextBlockStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichTextBlockStatics3 {
    type Vtable = IRichTextBlockStatics3_Vtbl;
}
impl ::core::clone::Clone for IRichTextBlockStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichTextBlockStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x073f7ef4_ca2b_4b49_a59a_31d8fa743332,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichTextBlockStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsTextScaleFactorEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichTextBlockStatics4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichTextBlockStatics4 {
    type Vtable = IRichTextBlockStatics4_Vtbl;
}
impl ::core::clone::Clone for IRichTextBlockStatics4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichTextBlockStatics4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x80155bc4_6d96_4b08_ad57_13db0f046412,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichTextBlockStatics4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TextDecorationsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichTextBlockStatics5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichTextBlockStatics5 {
    type Vtable = IRichTextBlockStatics5_Vtbl;
}
impl ::core::clone::Clone for IRichTextBlockStatics5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichTextBlockStatics5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xac9283a1_4f25_4280_8868_3eeee82821e8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichTextBlockStatics5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsTextTrimmedProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HorizontalTextAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRichTextBlockStatics6(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRichTextBlockStatics6 {
    type Vtable = IRichTextBlockStatics6_Vtbl;
}
impl ::core::clone::Clone for IRichTextBlockStatics6 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRichTextBlockStatics6 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x073057e7_91c5_5857_be7c_e72621239786,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRichTextBlockStatics6_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectionFlyoutProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRowDefinition(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRowDefinition {
    type Vtable = IRowDefinition_Vtbl;
}
impl ::core::clone::Clone for IRowDefinition {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRowDefinition {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4abae829_d80c_4a5e_a48c_f8b3d3b6533d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRowDefinition_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Height: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::GridLength,
    ) -> ::windows_core::HRESULT,
    pub SetHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::GridLength,
    ) -> ::windows_core::HRESULT,
    pub MaxHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetMaxHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub MinHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetMinHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub ActualHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRowDefinitionStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRowDefinitionStatics {
    type Vtable = IRowDefinitionStatics_Vtbl;
}
impl ::core::clone::Clone for IRowDefinitionStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRowDefinitionStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5adf3fe5_2056_4724_94d6_e4812b022ec8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRowDefinitionStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxHeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MinHeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct IScrollAnchorProvider(::windows_core::IUnknown);
impl IScrollAnchorProvider {}
::windows_core::imp::interface_hierarchy!(
    IScrollAnchorProvider, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::core::cmp::PartialEq for IScrollAnchorProvider {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IScrollAnchorProvider {}
impl ::core::fmt::Debug for IScrollAnchorProvider {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IScrollAnchorProvider").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for IScrollAnchorProvider {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{6ae99a0f-478c-5440-b2c6-ead4378ef8e4}",
    );
}
unsafe impl ::windows_core::Interface for IScrollAnchorProvider {
    type Vtable = IScrollAnchorProvider_Vtbl;
}
impl ::core::clone::Clone for IScrollAnchorProvider {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IScrollAnchorProvider {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6ae99a0f_478c_5440_b2c6_ead4378ef8e4,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IScrollAnchorProvider_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CurrentAnchor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RegisterAnchorCandidate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub UnregisterAnchorCandidate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IScrollContentPresenter(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IScrollContentPresenter {
    type Vtable = IScrollContentPresenter_Vtbl;
}
impl ::core::clone::Clone for IScrollContentPresenter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IScrollContentPresenter {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5712ee2b_0eeb_46d3_aa31_5f6801b8de20,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IScrollContentPresenter_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CanVerticallyScroll: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCanVerticallyScroll: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub CanHorizontallyScroll: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCanHorizontallyScroll: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub ExtentWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub ExtentHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub ViewportWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub ViewportHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub HorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub VerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub ScrollOwner: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetScrollOwner: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub LineUp: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub LineDown: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub LineLeft: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub LineRight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PageUp: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PageDown: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PageLeft: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PageRight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MouseWheelUp: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MouseWheelDown: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MouseWheelLeft: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MouseWheelRight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        offset: f64,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        offset: f64,
    ) -> ::windows_core::HRESULT,
    pub MakeVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        visual: *mut ::core::ffi::c_void,
        rectangle: super::super::super::Foundation::Rect,
        result__: *mut super::super::super::Foundation::Rect,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IScrollContentPresenter2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IScrollContentPresenter2 {
    type Vtable = IScrollContentPresenter2_Vtbl;
}
impl ::core::clone::Clone for IScrollContentPresenter2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IScrollContentPresenter2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5f9f2737_2318_5999_8a62_c3ed3c0e98b6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IScrollContentPresenter2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CanContentRenderOutsideBounds: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCanContentRenderOutsideBounds: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub SizesContentToTemplatedParent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetSizesContentToTemplatedParent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IScrollContentPresenterStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IScrollContentPresenterStatics2 {
    type Vtable = IScrollContentPresenterStatics2_Vtbl;
}
impl ::core::clone::Clone for IScrollContentPresenterStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IScrollContentPresenterStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe172ff1a_c676_524b_8f20_96152149d05e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IScrollContentPresenterStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CanContentRenderOutsideBoundsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SizesContentToTemplatedParentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IScrollViewer(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IScrollViewer {
    type Vtable = IScrollViewer_Vtbl;
}
impl ::core::clone::Clone for IScrollViewer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IScrollViewer {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x64e9be00_4dc1_493d_abe7_cbd3c577490d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IScrollViewer_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HorizontalScrollBarVisibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ScrollBarVisibility,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalScrollBarVisibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ScrollBarVisibility,
    ) -> ::windows_core::HRESULT,
    pub VerticalScrollBarVisibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ScrollBarVisibility,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalScrollBarVisibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ScrollBarVisibility,
    ) -> ::windows_core::HRESULT,
    pub IsHorizontalRailEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsHorizontalRailEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsVerticalRailEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsVerticalRailEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsHorizontalScrollChainingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsHorizontalScrollChainingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsVerticalScrollChainingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsVerticalScrollChainingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsZoomChainingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsZoomChainingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsScrollInertiaEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsScrollInertiaEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsZoomInertiaEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsZoomInertiaEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub HorizontalScrollMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ScrollMode,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalScrollMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ScrollMode,
    ) -> ::windows_core::HRESULT,
    pub VerticalScrollMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ScrollMode,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalScrollMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ScrollMode,
    ) -> ::windows_core::HRESULT,
    pub ZoomMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ZoomMode,
    ) -> ::windows_core::HRESULT,
    pub SetZoomMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ZoomMode,
    ) -> ::windows_core::HRESULT,
    pub HorizontalSnapPointsAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Primitives::SnapPointsAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalSnapPointsAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Primitives::SnapPointsAlignment,
    ) -> ::windows_core::HRESULT,
    pub VerticalSnapPointsAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Primitives::SnapPointsAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalSnapPointsAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Primitives::SnapPointsAlignment,
    ) -> ::windows_core::HRESULT,
    pub HorizontalSnapPointsType: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut SnapPointsType,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalSnapPointsType: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: SnapPointsType,
    ) -> ::windows_core::HRESULT,
    pub VerticalSnapPointsType: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut SnapPointsType,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalSnapPointsType: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: SnapPointsType,
    ) -> ::windows_core::HRESULT,
    pub ZoomSnapPointsType: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut SnapPointsType,
    ) -> ::windows_core::HRESULT,
    pub SetZoomSnapPointsType: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: SnapPointsType,
    ) -> ::windows_core::HRESULT,
    pub HorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub ViewportWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub ScrollableWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub ComputedHorizontalScrollBarVisibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Visibility,
    ) -> ::windows_core::HRESULT,
    pub ExtentWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub VerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub ViewportHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub ScrollableHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub ComputedVerticalScrollBarVisibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Visibility,
    ) -> ::windows_core::HRESULT,
    pub ExtentHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub MinZoomFactor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows_core::HRESULT,
    pub SetMinZoomFactor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows_core::HRESULT,
    pub MaxZoomFactor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows_core::HRESULT,
    pub SetMaxZoomFactor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows_core::HRESULT,
    pub ZoomFactor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows_core::HRESULT,
    pub ZoomSnapPoints: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ViewChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveViewChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    ScrollToHorizontalOffset: usize,
    ScrollToVerticalOffset: usize,
    ZoomToFactor: usize,
    pub InvalidateScrollInfo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsDeferredScrollingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsDeferredScrollingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub BringIntoViewOnFocusChange: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetBringIntoViewOnFocusChange: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IScrollViewer2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IScrollViewer2 {
    type Vtable = IScrollViewer2_Vtbl;
}
impl ::core::clone::Clone for IScrollViewer2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IScrollViewer2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x64e9be10_4dd1_494d_abf7_cbd3c577491d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IScrollViewer2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TopLeftHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTopLeftHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub LeftHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetLeftHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TopHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTopHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ViewChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveViewChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub ChangeView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        horizontaloffset: *mut ::core::ffi::c_void,
        verticaloffset: *mut ::core::ffi::c_void,
        zoomfactor: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub ChangeViewWithOptionalAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        horizontaloffset: *mut ::core::ffi::c_void,
        verticaloffset: *mut ::core::ffi::c_void,
        zoomfactor: *mut ::core::ffi::c_void,
        disableanimation: bool,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IScrollViewer3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IScrollViewer3 {
    type Vtable = IScrollViewer3_Vtbl;
}
impl ::core::clone::Clone for IScrollViewer3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IScrollViewer3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x74e9be21_5de2_595e_bc08_dbd3c577492c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IScrollViewer3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DirectManipulationStarted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveDirectManipulationStarted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub DirectManipulationCompleted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveDirectManipulationCompleted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IScrollViewer4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IScrollViewer4 {
    type Vtable = IScrollViewer4_Vtbl;
}
impl ::core::clone::Clone for IScrollViewer4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IScrollViewer4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x786fb0c4_50a9_5a45_8a92_7bf372e19098,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IScrollViewer4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ReduceViewportForCoreInputViewOcclusions: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetReduceViewportForCoreInputViewOcclusions: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub HorizontalAnchorRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalAnchorRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub VerticalAnchorRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalAnchorRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub CanContentRenderOutsideBounds: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCanContentRenderOutsideBounds: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub AnchorRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveAnchorRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IScrollViewerStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IScrollViewerStatics {
    type Vtable = IScrollViewerStatics_Vtbl;
}
impl ::core::clone::Clone for IScrollViewerStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IScrollViewerStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x33d1299d_8d6e_4290_bf22_905cccd04d31,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IScrollViewerStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HorizontalSnapPointsAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub VerticalSnapPointsAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HorizontalSnapPointsTypeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub VerticalSnapPointsTypeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ZoomSnapPointsTypeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HorizontalOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ViewportWidthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ScrollableWidthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ComputedHorizontalScrollBarVisibilityProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ExtentWidthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub VerticalOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ViewportHeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ScrollableHeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ComputedVerticalScrollBarVisibilityProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ExtentHeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MinZoomFactorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxZoomFactorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ZoomFactorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ZoomSnapPointsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HorizontalScrollBarVisibilityProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetHorizontalScrollBarVisibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut ScrollBarVisibility,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalScrollBarVisibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        horizontalscrollbarvisibility: ScrollBarVisibility,
    ) -> ::windows_core::HRESULT,
    pub VerticalScrollBarVisibilityProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetVerticalScrollBarVisibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut ScrollBarVisibility,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalScrollBarVisibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        verticalscrollbarvisibility: ScrollBarVisibility,
    ) -> ::windows_core::HRESULT,
    pub IsHorizontalRailEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetIsHorizontalRailEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsHorizontalRailEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        ishorizontalrailenabled: bool,
    ) -> ::windows_core::HRESULT,
    pub IsVerticalRailEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetIsVerticalRailEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsVerticalRailEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        isverticalrailenabled: bool,
    ) -> ::windows_core::HRESULT,
    pub IsHorizontalScrollChainingEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetIsHorizontalScrollChainingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsHorizontalScrollChainingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        ishorizontalscrollchainingenabled: bool,
    ) -> ::windows_core::HRESULT,
    pub IsVerticalScrollChainingEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetIsVerticalScrollChainingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsVerticalScrollChainingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        isverticalscrollchainingenabled: bool,
    ) -> ::windows_core::HRESULT,
    pub IsZoomChainingEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetIsZoomChainingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsZoomChainingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        iszoomchainingenabled: bool,
    ) -> ::windows_core::HRESULT,
    pub IsScrollInertiaEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetIsScrollInertiaEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsScrollInertiaEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        isscrollinertiaenabled: bool,
    ) -> ::windows_core::HRESULT,
    pub IsZoomInertiaEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetIsZoomInertiaEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsZoomInertiaEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        iszoominertiaenabled: bool,
    ) -> ::windows_core::HRESULT,
    pub HorizontalScrollModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetHorizontalScrollMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut ScrollMode,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalScrollMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        horizontalscrollmode: ScrollMode,
    ) -> ::windows_core::HRESULT,
    pub VerticalScrollModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetVerticalScrollMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut ScrollMode,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalScrollMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        verticalscrollmode: ScrollMode,
    ) -> ::windows_core::HRESULT,
    pub ZoomModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetZoomMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut ZoomMode,
    ) -> ::windows_core::HRESULT,
    pub SetZoomMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        zoommode: ZoomMode,
    ) -> ::windows_core::HRESULT,
    pub IsDeferredScrollingEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetIsDeferredScrollingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsDeferredScrollingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        isdeferredscrollingenabled: bool,
    ) -> ::windows_core::HRESULT,
    pub BringIntoViewOnFocusChangeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetBringIntoViewOnFocusChange: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetBringIntoViewOnFocusChange: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        bringintoviewonfocuschange: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IScrollViewerStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IScrollViewerStatics2 {
    type Vtable = IScrollViewerStatics2_Vtbl;
}
impl ::core::clone::Clone for IScrollViewerStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IScrollViewerStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x33d129ad_8d7e_42a0_bf32_905cccd04d41,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IScrollViewerStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TopLeftHeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub LeftHeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TopHeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IScrollViewerStatics4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IScrollViewerStatics4 {
    type Vtable = IScrollViewerStatics4_Vtbl;
}
impl ::core::clone::Clone for IScrollViewerStatics4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IScrollViewerStatics4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x220cf7cc_4f46_59f1_af9b_67fa8eb33d01,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IScrollViewerStatics4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ReduceViewportForCoreInputViewOcclusionsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HorizontalAnchorRatioProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub VerticalAnchorRatioProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CanContentRenderOutsideBoundsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetCanContentRenderOutsideBounds: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCanContentRenderOutsideBounds: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        cancontentrenderoutsidebounds: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IScrollViewerView(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IScrollViewerView {
    type Vtable = IScrollViewerView_Vtbl;
}
impl ::core::clone::Clone for IScrollViewerView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IScrollViewerView {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x64e9be01_4dc2_493e_abe8_cbd3c577490e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IScrollViewerView_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub VerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub ZoomFactor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IScrollViewerViewChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IScrollViewerViewChangedEventArgs {
    type Vtable = IScrollViewerViewChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IScrollViewerViewChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IScrollViewerViewChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4dd04f7e_7a11_4b2e_9933_577df39252b6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IScrollViewerViewChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsIntermediate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IScrollViewerViewChangingEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IScrollViewerViewChangingEventArgs {
    type Vtable = IScrollViewerViewChangingEventArgs_Vtbl;
}
impl ::core::clone::Clone for IScrollViewerViewChangingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IScrollViewerViewChangingEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4dd04f7f_7a11_4b2e_9933_577df39252b6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IScrollViewerViewChangingEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub NextView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FinalView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsInertial: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISearchBox(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISearchBox {
    type Vtable = ISearchBox_Vtbl;
}
impl ::core::clone::Clone for ISearchBox {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISearchBox {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf89ecc5a_99ba_4bd4_966c_f11fa443d13c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISearchBox_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SearchHistoryEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetSearchHistoryEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub SearchHistoryContext: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetSearchHistoryContext: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub PlaceholderText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetPlaceholderText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub QueryText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetQueryText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub FocusOnKeyboardInput: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetFocusOnKeyboardInput: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub ChooseSuggestionOnEnter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetChooseSuggestionOnEnter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub QueryChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveQueryChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub SuggestionsRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveSuggestionsRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub QuerySubmitted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveQuerySubmitted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub ResultSuggestionChosen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveResultSuggestionChosen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub PrepareForFocusOnKeyboardInput: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemovePrepareForFocusOnKeyboardInput: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    SetLocalContentSuggestionSettings: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISearchBoxFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISearchBoxFactory {
    type Vtable = ISearchBoxFactory_Vtbl;
}
impl ::core::clone::Clone for ISearchBoxFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISearchBoxFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xcd743f6d_8685_46b4_9ddd_202f6941b701,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISearchBoxFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISearchBoxQueryChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISearchBoxQueryChangedEventArgs {
    type Vtable = ISearchBoxQueryChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for ISearchBoxQueryChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISearchBoxQueryChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa9a70f8f_0cb0_4bd2_9998_2fb57ad5e731,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISearchBoxQueryChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub QueryText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub Language: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    LinguisticDetails: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISearchBoxQuerySubmittedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISearchBoxQuerySubmittedEventArgs {
    type Vtable = ISearchBoxQuerySubmittedEventArgs_Vtbl;
}
impl ::core::clone::Clone for ISearchBoxQuerySubmittedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISearchBoxQuerySubmittedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x126e90fd_3c4e_4ccb_9aef_4705d19fe548,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISearchBoxQuerySubmittedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub QueryText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub Language: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    LinguisticDetails: usize,
    KeyModifiers: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISearchBoxResultSuggestionChosenEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISearchBoxResultSuggestionChosenEventArgs {
    type Vtable = ISearchBoxResultSuggestionChosenEventArgs_Vtbl;
}
impl ::core::clone::Clone for ISearchBoxResultSuggestionChosenEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISearchBoxResultSuggestionChosenEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x18918c23_e4c3_4662_a03b_d054ffd0f905,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISearchBoxResultSuggestionChosenEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Tag: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    KeyModifiers: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISearchBoxStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISearchBoxStatics {
    type Vtable = ISearchBoxStatics_Vtbl;
}
impl ::core::clone::Clone for ISearchBoxStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISearchBoxStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb123634f_6871_48cd_92df_4cff22459082,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISearchBoxStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SearchHistoryEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SearchHistoryContextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PlaceholderTextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub QueryTextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FocusOnKeyboardInputProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ChooseSuggestionOnEnterProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISearchBoxSuggestionsRequestedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISearchBoxSuggestionsRequestedEventArgs {
    type Vtable = ISearchBoxSuggestionsRequestedEventArgs_Vtbl;
}
impl ::core::clone::Clone for ISearchBoxSuggestionsRequestedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISearchBoxSuggestionsRequestedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xda15170e_e566_48cb_bd11_fe4b0f30a44d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISearchBoxSuggestionsRequestedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub QueryText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub Language: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    LinguisticDetails: usize,
    Request: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISectionsInViewChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISectionsInViewChangedEventArgs {
    type Vtable = ISectionsInViewChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for ISectionsInViewChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISectionsInViewChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xdd49ee6b_d165_430f_a37d_b807064f85e1,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISectionsInViewChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub AddedSections: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RemovedSections: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISectionsInViewChangedEventArgsFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISectionsInViewChangedEventArgsFactory {
    type Vtable = ISectionsInViewChangedEventArgsFactory_Vtbl;
}
impl ::core::clone::Clone for ISectionsInViewChangedEventArgsFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISectionsInViewChangedEventArgsFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x557f5244_92f8_4150_b730_e6346e8f50d1,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISectionsInViewChangedEventArgsFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISelectionChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISelectionChangedEventArgs {
    type Vtable = ISelectionChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for ISelectionChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISelectionChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc972d2dc_b609_4758_851e_a799c21de97d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISelectionChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub AddedItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RemovedItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISelectionChangedEventArgsFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISelectionChangedEventArgsFactory {
    type Vtable = ISelectionChangedEventArgsFactory_Vtbl;
}
impl ::core::clone::Clone for ISelectionChangedEventArgsFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISelectionChangedEventArgsFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x11a8b6b5_2830_4517_84cd_5524c8b88b45,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISelectionChangedEventArgsFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstanceWithRemovedItemsAndAddedItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        removeditems: *mut ::core::ffi::c_void,
        addeditems: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISemanticZoom(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISemanticZoom {
    type Vtable = ISemanticZoom_Vtbl;
}
impl ::core::clone::Clone for ISemanticZoom {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISemanticZoom {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x019fff21_ece6_4fbc_bf40_8938d4813e27,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISemanticZoom_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ZoomedInView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetZoomedInView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ZoomedOutView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetZoomedOutView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsZoomedInViewActive: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsZoomedInViewActive: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub CanChangeViews: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCanChangeViews: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub ViewChangeStarted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveViewChangeStarted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub ViewChangeCompleted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveViewChangeCompleted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub ToggleActiveView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsZoomOutButtonEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsZoomOutButtonEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct ISemanticZoomInformation(::windows_core::IUnknown);
impl ISemanticZoomInformation {}
::windows_core::imp::interface_hierarchy!(
    ISemanticZoomInformation, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::core::cmp::PartialEq for ISemanticZoomInformation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ISemanticZoomInformation {}
impl ::core::fmt::Debug for ISemanticZoomInformation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ISemanticZoomInformation").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ISemanticZoomInformation {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{a76a3b63-229b-4dc5-aa11-9d922fbf8a98}",
    );
}
unsafe impl ::windows_core::Interface for ISemanticZoomInformation {
    type Vtable = ISemanticZoomInformation_Vtbl;
}
impl ::core::clone::Clone for ISemanticZoomInformation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISemanticZoomInformation {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa76a3b63_229b_4dc5_aa11_9d922fbf8a98,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISemanticZoomInformation_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SemanticZoomOwner: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSemanticZoomOwner: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsActiveView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsActiveView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsZoomedInView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsZoomedInView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub InitializeViewChange: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CompleteViewChange: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MakeVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        item: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub StartViewChangeFrom: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
        destination: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub StartViewChangeTo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
        destination: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CompleteViewChangeFrom: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
        destination: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CompleteViewChangeTo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
        destination: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISemanticZoomLocation(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISemanticZoomLocation {
    type Vtable = ISemanticZoomLocation_Vtbl;
}
impl ::core::clone::Clone for ISemanticZoomLocation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISemanticZoomLocation {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x42011736_e3c2_496b_bc4e_d750d4375b9a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISemanticZoomLocation_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Item: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Bounds: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::Rect,
    ) -> ::windows_core::HRESULT,
    pub SetBounds: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::Foundation::Rect,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISemanticZoomStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISemanticZoomStatics {
    type Vtable = ISemanticZoomStatics_Vtbl;
}
impl ::core::clone::Clone for ISemanticZoomStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISemanticZoomStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8ef17ef2_9898_4666_b285_3ed38a07910e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISemanticZoomStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ZoomedInViewProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ZoomedOutViewProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsZoomedInViewActiveProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CanChangeViewsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsZoomOutButtonEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISemanticZoomViewChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISemanticZoomViewChangedEventArgs {
    type Vtable = ISemanticZoomViewChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for ISemanticZoomViewChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISemanticZoomViewChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x47dfc068_b569_4b19_842d_8e6cf90989af,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISemanticZoomViewChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsSourceZoomedInView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsSourceZoomedInView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub SourceItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSourceItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DestinationItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetDestinationItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISettingsFlyout(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISettingsFlyout {
    type Vtable = ISettingsFlyout_Vtbl;
}
impl ::core::clone::Clone for ISettingsFlyout {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISettingsFlyout {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x830ba82b_c55b_4e32_a51c_5791e024c8af,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISettingsFlyout_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Title: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetTitle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub HeaderBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeaderBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeaderForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IconSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetIconSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TemplateSettings: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BackClick: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveBackClick: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub Show: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ShowIndependent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Hide: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISettingsFlyoutFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISettingsFlyoutFactory {
    type Vtable = ISettingsFlyoutFactory_Vtbl;
}
impl ::core::clone::Clone for ISettingsFlyoutFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISettingsFlyoutFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x480c7011_57aa_4db6_b6fd_ec676f6d414e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISettingsFlyoutFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISettingsFlyoutStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISettingsFlyoutStatics {
    type Vtable = ISettingsFlyoutStatics_Vtbl;
}
impl ::core::clone::Clone for ISettingsFlyoutStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISettingsFlyoutStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd0e3b535_9157_4be4_a42a_f591698846ac,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISettingsFlyoutStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TitleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderBackgroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IconSourceProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISlider(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISlider {
    type Vtable = ISlider_Vtbl;
}
impl ::core::clone::Clone for ISlider {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISlider {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x89572027_4c48_4700_8076_497ba73d9c18,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISlider_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IntermediateValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetIntermediateValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub StepFrequency: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetStepFrequency: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub SnapsTo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Primitives::SliderSnapsTo,
    ) -> ::windows_core::HRESULT,
    pub SetSnapsTo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Primitives::SliderSnapsTo,
    ) -> ::windows_core::HRESULT,
    pub TickFrequency: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetTickFrequency: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub TickPlacement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Primitives::TickPlacement,
    ) -> ::windows_core::HRESULT,
    pub SetTickPlacement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Primitives::TickPlacement,
    ) -> ::windows_core::HRESULT,
    pub Orientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Orientation,
    ) -> ::windows_core::HRESULT,
    pub SetOrientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Orientation,
    ) -> ::windows_core::HRESULT,
    pub IsDirectionReversed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsDirectionReversed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsThumbToolTipEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsThumbToolTipEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    ThumbToolTipValueConverter: usize,
    SetThumbToolTipValueConverter: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISlider2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISlider2 {
    type Vtable = ISlider2_Vtbl;
}
impl ::core::clone::Clone for ISlider2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISlider2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x40a3c50e_87d6_4d2f_b1cf_b279cc996f26,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISlider2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Header: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISliderFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISliderFactory {
    type Vtable = ISliderFactory_Vtbl;
}
impl ::core::clone::Clone for ISliderFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISliderFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x03a67b37_c7bf_437c_848f_8cb5b753eab4,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISliderFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISliderStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISliderStatics {
    type Vtable = ISliderStatics_Vtbl;
}
impl ::core::clone::Clone for ISliderStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISliderStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8a4363d7_7fdf_4d30_98fe_ce78c05b31cf,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISliderStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IntermediateValueProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub StepFrequencyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SnapsToProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TickFrequencyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TickPlacementProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OrientationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsDirectionReversedProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsThumbToolTipEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ThumbToolTipValueConverterProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISliderStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISliderStatics2 {
    type Vtable = ISliderStatics2_Vtbl;
}
impl ::core::clone::Clone for ISliderStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISliderStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x00e7935d_79a5_4759_96a6_29e0a94add33,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISliderStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplitButton(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISplitButton {
    type Vtable = ISplitButton_Vtbl;
}
impl ::core::clone::Clone for ISplitButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISplitButton {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x58bbb066_c2ea_5499_8150_40faa75f6bb5,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplitButton_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Flyout: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetFlyout: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    Command: usize,
    SetCommand: usize,
    pub CommandParameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetCommandParameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Click: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveClick: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplitButtonAutomationPeer(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISplitButtonAutomationPeer {
    type Vtable = ISplitButtonAutomationPeer_Vtbl;
}
impl ::core::clone::Clone for ISplitButtonAutomationPeer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISplitButtonAutomationPeer {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc46a58b8_3828_5c36_aa13_f79f02c12f34,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplitButtonAutomationPeer_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplitButtonAutomationPeerFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISplitButtonAutomationPeerFactory {
    type Vtable = ISplitButtonAutomationPeerFactory_Vtbl;
}
impl ::core::clone::Clone for ISplitButtonAutomationPeerFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISplitButtonAutomationPeerFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd63a2534_77dc_5361_8422_4ad8750f45f4,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplitButtonAutomationPeerFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        owner: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplitButtonClickEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISplitButtonClickEventArgs {
    type Vtable = ISplitButtonClickEventArgs_Vtbl;
}
impl ::core::clone::Clone for ISplitButtonClickEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISplitButtonClickEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc227c2ca_26f4_5960_98d5_919149d1b525,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplitButtonClickEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplitButtonFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISplitButtonFactory {
    type Vtable = ISplitButtonFactory_Vtbl;
}
impl ::core::clone::Clone for ISplitButtonFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISplitButtonFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3201c32f_4d55_589d_97dd_617fa3642137,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplitButtonFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplitButtonStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISplitButtonStatics {
    type Vtable = ISplitButtonStatics_Vtbl;
}
impl ::core::clone::Clone for ISplitButtonStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISplitButtonStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8df07a81_0b1f_5ea9_be42_152ab9a4bc5e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplitButtonStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub FlyoutProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CommandProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CommandParameterProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplitView(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISplitView {
    type Vtable = ISplitView_Vtbl;
}
impl ::core::clone::Clone for ISplitView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISplitView {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x97222f31_3844_429e_939c_1673155322a1,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplitView_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Content: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Pane: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPane: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsPaneOpen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsPaneOpen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub OpenPaneLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetOpenPaneLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub CompactPaneLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetCompactPaneLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub PanePlacement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut SplitViewPanePlacement,
    ) -> ::windows_core::HRESULT,
    pub SetPanePlacement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: SplitViewPanePlacement,
    ) -> ::windows_core::HRESULT,
    pub DisplayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut SplitViewDisplayMode,
    ) -> ::windows_core::HRESULT,
    pub SetDisplayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: SplitViewDisplayMode,
    ) -> ::windows_core::HRESULT,
    pub TemplateSettings: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PaneBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPaneBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PaneClosing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemovePaneClosing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub PaneClosed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemovePaneClosed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplitView2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISplitView2 {
    type Vtable = ISplitView2_Vtbl;
}
impl ::core::clone::Clone for ISplitView2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISplitView2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5ea7dc10_cc83_409a_82f9_3e91d6d7084f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplitView2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LightDismissOverlayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut LightDismissOverlayMode,
    ) -> ::windows_core::HRESULT,
    pub SetLightDismissOverlayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: LightDismissOverlayMode,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplitView3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISplitView3 {
    type Vtable = ISplitView3_Vtbl;
}
impl ::core::clone::Clone for ISplitView3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISplitView3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0ea12d8d_1171_407b_96d3_5e1b470c3ec5,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplitView3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PaneOpening: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemovePaneOpening: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub PaneOpened: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemovePaneOpened: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplitViewFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISplitViewFactory {
    type Vtable = ISplitViewFactory_Vtbl;
}
impl ::core::clone::Clone for ISplitViewFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISplitViewFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf101773a_084e_4fb9_8442_63221b44533f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplitViewFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplitViewPaneClosingEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISplitViewPaneClosingEventArgs {
    type Vtable = ISplitViewPaneClosingEventArgs_Vtbl;
}
impl ::core::clone::Clone for ISplitViewPaneClosingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISplitViewPaneClosingEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x93cf494e_7a95_44d8_9562_1b348248da9f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplitViewPaneClosingEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Cancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplitViewStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISplitViewStatics {
    type Vtable = ISplitViewStatics_Vtbl;
}
impl ::core::clone::Clone for ISplitViewStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISplitViewStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x859b4f6f_44ab_4e4b_91c1_17b7056d9b5f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplitViewStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ContentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PaneProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsPaneOpenProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OpenPaneLengthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CompactPaneLengthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PanePlacementProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DisplayModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TemplateSettingsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PaneBackgroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplitViewStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISplitViewStatics2 {
    type Vtable = ISplitViewStatics2_Vtbl;
}
impl ::core::clone::Clone for ISplitViewStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISplitViewStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x14b7cd7a_dfbc_422c_80a9_585871297113,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplitViewStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LightDismissOverlayModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IStackPanel(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IStackPanel {
    type Vtable = IStackPanel_Vtbl;
}
impl ::core::clone::Clone for IStackPanel {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IStackPanel {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb8ae8fe2_d641_4fd7_80b4_7439207d2798,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IStackPanel_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub AreScrollSnapPointsRegular: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAreScrollSnapPointsRegular: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Orientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Orientation,
    ) -> ::windows_core::HRESULT,
    pub SetOrientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Orientation,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IStackPanel2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IStackPanel2 {
    type Vtable = IStackPanel2_Vtbl;
}
impl ::core::clone::Clone for IStackPanel2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IStackPanel2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x36f23359_040e_48f7_9a98_f2664591959c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IStackPanel2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetBorderBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BorderThickness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetBorderThickness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub CornerRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CornerRadius,
    ) -> ::windows_core::HRESULT,
    pub SetCornerRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CornerRadius,
    ) -> ::windows_core::HRESULT,
    pub Padding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetPadding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IStackPanel4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IStackPanel4 {
    type Vtable = IStackPanel4_Vtbl;
}
impl ::core::clone::Clone for IStackPanel4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IStackPanel4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x43ebf7f6_3196_412e_8a95_add002ff43f0,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IStackPanel4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Spacing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetSpacing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IStackPanel5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IStackPanel5 {
    type Vtable = IStackPanel5_Vtbl;
}
impl ::core::clone::Clone for IStackPanel5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IStackPanel5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf73e3117_61a8_5a01_865e_88511c04a992,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IStackPanel5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BackgroundSizing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut BackgroundSizing,
    ) -> ::windows_core::HRESULT,
    pub SetBackgroundSizing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: BackgroundSizing,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IStackPanelFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IStackPanelFactory {
    type Vtable = IStackPanelFactory_Vtbl;
}
impl ::core::clone::Clone for IStackPanelFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IStackPanelFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x63d8248a_8b34_445a_808f_b6ecd62a27d9,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IStackPanelFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IStackPanelStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IStackPanelStatics {
    type Vtable = IStackPanelStatics_Vtbl;
}
impl ::core::clone::Clone for IStackPanelStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IStackPanelStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf0d0cd93_4dbc_48a7_9914_954924657771,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IStackPanelStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub AreScrollSnapPointsRegularProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OrientationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IStackPanelStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IStackPanelStatics2 {
    type Vtable = IStackPanelStatics2_Vtbl;
}
impl ::core::clone::Clone for IStackPanelStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IStackPanelStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd97e6257_080d_412e_a91a_ce6e5d02aad3,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IStackPanelStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BorderBrushProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BorderThicknessProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CornerRadiusProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PaddingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IStackPanelStatics4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IStackPanelStatics4 {
    type Vtable = IStackPanelStatics4_Vtbl;
}
impl ::core::clone::Clone for IStackPanelStatics4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IStackPanelStatics4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x279cdd71_067b_459f_815f_ecd85c5e4843,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IStackPanelStatics4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SpacingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IStackPanelStatics5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IStackPanelStatics5 {
    type Vtable = IStackPanelStatics5_Vtbl;
}
impl ::core::clone::Clone for IStackPanelStatics5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IStackPanelStatics5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x87287490_bff2_5347_8787_fb5aec942878,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IStackPanelStatics5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub BackgroundSizingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IStyleSelector(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IStyleSelector {
    type Vtable = IStyleSelector_Vtbl;
}
impl ::core::clone::Clone for IStyleSelector {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IStyleSelector {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd1113f67_d8c1_4ae4_98f0_d8504502f08b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IStyleSelector_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        item: *mut ::core::ffi::c_void,
        container: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IStyleSelectorFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IStyleSelectorFactory {
    type Vtable = IStyleSelectorFactory_Vtbl;
}
impl ::core::clone::Clone for IStyleSelectorFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IStyleSelectorFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9e942ae7_3761_447f_8f97_29e39d5eb310,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IStyleSelectorFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IStyleSelectorOverrides(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IStyleSelectorOverrides {
    type Vtable = IStyleSelectorOverrides_Vtbl;
}
impl ::core::clone::Clone for IStyleSelectorOverrides {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IStyleSelectorOverrides {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x08add66d_0e2e_43a0_aeca_8faa94b9d017,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IStyleSelectorOverrides_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectStyleCore: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        item: *mut ::core::ffi::c_void,
        container: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISwapChainBackgroundPanel(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISwapChainBackgroundPanel {
    type Vtable = ISwapChainBackgroundPanel_Vtbl;
}
impl ::core::clone::Clone for ISwapChainBackgroundPanel {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISwapChainBackgroundPanel {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1c59db48_8233_4c0c_bcf5_02a5fb35ae00,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwapChainBackgroundPanel_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISwapChainBackgroundPanel2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISwapChainBackgroundPanel2 {
    type Vtable = ISwapChainBackgroundPanel2_Vtbl;
}
impl ::core::clone::Clone for ISwapChainBackgroundPanel2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISwapChainBackgroundPanel2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x21e672f2_2592_4c38_870f_28fbcf52c095,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwapChainBackgroundPanel2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    CreateCoreIndependentInputSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISwapChainBackgroundPanelFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISwapChainBackgroundPanelFactory {
    type Vtable = ISwapChainBackgroundPanelFactory_Vtbl;
}
impl ::core::clone::Clone for ISwapChainBackgroundPanelFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISwapChainBackgroundPanelFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x198289d4_c89b_49b2_896c_5917bf8adcae,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwapChainBackgroundPanelFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISwapChainPanel(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISwapChainPanel {
    type Vtable = ISwapChainPanel_Vtbl;
}
impl ::core::clone::Clone for ISwapChainPanel {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISwapChainPanel {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc589644f_eba8_427a_b75a_9f1f93a11ae9,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwapChainPanel_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CompositionScaleX: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows_core::HRESULT,
    pub CompositionScaleY: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows_core::HRESULT,
    pub CompositionScaleChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveCompositionScaleChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    CreateCoreIndependentInputSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISwapChainPanelFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISwapChainPanelFactory {
    type Vtable = ISwapChainPanelFactory_Vtbl;
}
impl ::core::clone::Clone for ISwapChainPanelFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISwapChainPanelFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf38f8d7f_1a48_49cb_86d2_10eaaaf6fd70,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwapChainPanelFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISwapChainPanelStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISwapChainPanelStatics {
    type Vtable = ISwapChainPanelStatics_Vtbl;
}
impl ::core::clone::Clone for ISwapChainPanelStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISwapChainPanelStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf89c0297_eea8_498c_99c4_257e3660df7e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwapChainPanelStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CompositionScaleXProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CompositionScaleYProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISwipeControl(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISwipeControl {
    type Vtable = ISwipeControl_Vtbl;
}
impl ::core::clone::Clone for ISwipeControl {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISwipeControl {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9ee3d96f_6704_4823_aa15_1c143bc53cf7,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwipeControl_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LeftItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetLeftItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RightItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetRightItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TopItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTopItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BottomItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetBottomItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Close: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISwipeControlFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISwipeControlFactory {
    type Vtable = ISwipeControlFactory_Vtbl;
}
impl ::core::clone::Clone for ISwipeControlFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISwipeControlFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc0aaa3ae_d141_4e12_a728_5f95b507e7ab,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwipeControlFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISwipeControlStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISwipeControlStatics {
    type Vtable = ISwipeControlStatics_Vtbl;
}
impl ::core::clone::Clone for ISwipeControlStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISwipeControlStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe57ae83c_2216_4717_9ef6_4662334c6501,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwipeControlStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LeftItemsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RightItemsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TopItemsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BottomItemsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISwipeItem(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISwipeItem {
    type Vtable = ISwipeItem_Vtbl;
}
impl ::core::clone::Clone for ISwipeItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISwipeItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x836edadc_45c8_4a00_90a0_7107fa894a1b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwipeItem_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Text: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub IconSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetIconSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Background: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Foreground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    Command: usize,
    SetCommand: usize,
    pub CommandParameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetCommandParameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BehaviorOnInvoked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut SwipeBehaviorOnInvoked,
    ) -> ::windows_core::HRESULT,
    pub SetBehaviorOnInvoked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: SwipeBehaviorOnInvoked,
    ) -> ::windows_core::HRESULT,
    pub Invoked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveInvoked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISwipeItemFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISwipeItemFactory {
    type Vtable = ISwipeItemFactory_Vtbl;
}
impl ::core::clone::Clone for ISwipeItemFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISwipeItemFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x844bd61a_1716_4097_bba2_7526da22de39,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwipeItemFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISwipeItemInvokedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISwipeItemInvokedEventArgs {
    type Vtable = ISwipeItemInvokedEventArgs_Vtbl;
}
impl ::core::clone::Clone for ISwipeItemInvokedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISwipeItemInvokedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc5b025f5_cb32_4733_8011_5d0d37f4550a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwipeItemInvokedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SwipeControl: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISwipeItemStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISwipeItemStatics {
    type Vtable = ISwipeItemStatics_Vtbl;
}
impl ::core::clone::Clone for ISwipeItemStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISwipeItemStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd0b44e96_2766_4d93_b5db_f5e1be832c2d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwipeItemStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IconSourceProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BackgroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CommandProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CommandParameterProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BehaviorOnInvokedProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISwipeItems(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISwipeItems {
    type Vtable = ISwipeItems_Vtbl;
}
impl ::core::clone::Clone for ISwipeItems {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISwipeItems {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb01726ff_969a_40d0_9f04_76084ce6d7b7,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwipeItems_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Mode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut SwipeMode,
    ) -> ::windows_core::HRESULT,
    pub SetMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: SwipeMode,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISwipeItemsFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISwipeItemsFactory {
    type Vtable = ISwipeItemsFactory_Vtbl;
}
impl ::core::clone::Clone for ISwipeItemsFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISwipeItemsFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x47c460ee_d5aa_445f_b31e_50c076c011b9,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwipeItemsFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISwipeItemsStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISwipeItemsStatics {
    type Vtable = ISwipeItemsStatics_Vtbl;
}
impl ::core::clone::Clone for ISwipeItemsStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISwipeItemsStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x376250df_48db_43e3_b0e9_089e5da9a114,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwipeItemsStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISymbolIcon(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISymbolIcon {
    type Vtable = ISymbolIcon_Vtbl;
}
impl ::core::clone::Clone for ISymbolIcon {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISymbolIcon {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x7a4774c9_a6a3_4b30_8ff1_9081d70e9a5c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISymbolIcon_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Symbol: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Symbol,
    ) -> ::windows_core::HRESULT,
    pub SetSymbol: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Symbol,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISymbolIconFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISymbolIconFactory {
    type Vtable = ISymbolIconFactory_Vtbl;
}
impl ::core::clone::Clone for ISymbolIconFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISymbolIconFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc7252b88_e76c_4b44_8a05_046b9dc772b8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISymbolIconFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstanceWithSymbol: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        symbol: Symbol,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISymbolIconSource(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISymbolIconSource {
    type Vtable = ISymbolIconSource_Vtbl;
}
impl ::core::clone::Clone for ISymbolIconSource {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISymbolIconSource {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x625d95a2_b6b1_408a_b289_eab2ecba62d8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISymbolIconSource_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Symbol: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Symbol,
    ) -> ::windows_core::HRESULT,
    pub SetSymbol: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Symbol,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISymbolIconSourceFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISymbolIconSourceFactory {
    type Vtable = ISymbolIconSourceFactory_Vtbl;
}
impl ::core::clone::Clone for ISymbolIconSourceFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISymbolIconSourceFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa526aab0_4130_4907_b049_21f9240c7a40,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISymbolIconSourceFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISymbolIconSourceStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISymbolIconSourceStatics {
    type Vtable = ISymbolIconSourceStatics_Vtbl;
}
impl ::core::clone::Clone for ISymbolIconSourceStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISymbolIconSourceStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8bc49738_d94e_4148_8d64_1adf0f23f25f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISymbolIconSourceStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SymbolProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISymbolIconStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISymbolIconStatics {
    type Vtable = ISymbolIconStatics_Vtbl;
}
impl ::core::clone::Clone for ISymbolIconStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISymbolIconStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8624fbdf_952c_4f76_b03f_30833be99572,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISymbolIconStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SymbolProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBlock(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBlock {
    type Vtable = ITextBlock_Vtbl;
}
impl ::core::clone::Clone for ITextBlock {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBlock {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xae2d9271_3b4a_45fc_8468_f7949548f4d5,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBlock_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub FontSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetFontSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub FontFamily: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetFontFamily: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontWeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontWeight,
    ) -> ::windows_core::HRESULT,
    pub SetFontWeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontWeight,
    ) -> ::windows_core::HRESULT,
    pub FontStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontStyle,
    ) -> ::windows_core::HRESULT,
    pub SetFontStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontStyle,
    ) -> ::windows_core::HRESULT,
    pub FontStretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::FontStretch,
    ) -> ::windows_core::HRESULT,
    pub SetFontStretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::FontStretch,
    ) -> ::windows_core::HRESULT,
    pub CharacterSpacing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetCharacterSpacing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub Foreground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextWrapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextWrapping,
    ) -> ::windows_core::HRESULT,
    pub SetTextWrapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextWrapping,
    ) -> ::windows_core::HRESULT,
    pub TextTrimming: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextTrimming,
    ) -> ::windows_core::HRESULT,
    pub SetTextTrimming: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextTrimming,
    ) -> ::windows_core::HRESULT,
    pub TextAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetTextAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextAlignment,
    ) -> ::windows_core::HRESULT,
    pub Text: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    Inlines: usize,
    pub Padding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetPadding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub LineHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetLineHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub LineStackingStrategy: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::LineStackingStrategy,
    ) -> ::windows_core::HRESULT,
    pub SetLineStackingStrategy: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::LineStackingStrategy,
    ) -> ::windows_core::HRESULT,
    pub IsTextSelectionEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsTextSelectionEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub SelectedText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    ContentStart: usize,
    ContentEnd: usize,
    SelectionStart: usize,
    SelectionEnd: usize,
    pub BaselineOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SelectionChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveSelectionChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub ContextMenuOpening: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveContextMenuOpening: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub SelectAll: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    Select: usize,
    pub Focus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::FocusState,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBlock2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBlock2 {
    type Vtable = ITextBlock2_Vtbl;
}
impl ::core::clone::Clone for ITextBlock2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBlock2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x45206a4c_0a4e_4fbf_aee9_335d5a205f6e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBlock2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectionHighlightColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectionHighlightColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxLines: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetMaxLines: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub TextLineBounds: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextLineBounds,
    ) -> ::windows_core::HRESULT,
    pub SetTextLineBounds: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextLineBounds,
    ) -> ::windows_core::HRESULT,
    pub OpticalMarginAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::OpticalMarginAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetOpticalMarginAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::OpticalMarginAlignment,
    ) -> ::windows_core::HRESULT,
    pub IsColorFontEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsColorFontEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub TextReadingOrder: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextReadingOrder,
    ) -> ::windows_core::HRESULT,
    pub SetTextReadingOrder: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextReadingOrder,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBlock3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBlock3 {
    type Vtable = ITextBlock3_Vtbl;
}
impl ::core::clone::Clone for ITextBlock3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBlock3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb651dd5a_424b_48c3_9b67_486f4e139899,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBlock3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsTextScaleFactorEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsTextScaleFactorEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBlock4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBlock4 {
    type Vtable = ITextBlock4_Vtbl;
}
impl ::core::clone::Clone for ITextBlock4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBlock4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb014f270_9808_4adc_b452_60cda54100c1,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBlock4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    GetAlphaMask: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBlock5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBlock5 {
    type Vtable = ITextBlock5_Vtbl;
}
impl ::core::clone::Clone for ITextBlock5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBlock5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x624a2d38_edbd_4a5a_b678_e49f1e07afbd,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBlock5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TextDecorations: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Text::TextDecorations,
    ) -> ::windows_core::HRESULT,
    pub SetTextDecorations: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Text::TextDecorations,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBlock6(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBlock6 {
    type Vtable = ITextBlock6_Vtbl;
}
impl ::core::clone::Clone for ITextBlock6 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBlock6 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x31816cd9_0404_410f_91ec_33b0a0bb92b2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBlock6_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsTextTrimmed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub HorizontalTextAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalTextAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextAlignment,
    ) -> ::windows_core::HRESULT,
    TextHighlighters: usize,
    pub IsTextTrimmedChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveIsTextTrimmedChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBlock7(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBlock7 {
    type Vtable = ITextBlock7_Vtbl;
}
impl ::core::clone::Clone for ITextBlock7 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBlock7 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xdfe20a4e_8be7_5e33_9f37_72416875b121,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBlock7_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectionFlyout: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectionFlyout: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CopySelectionToClipboard: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBlockStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBlockStatics {
    type Vtable = ITextBlockStatics_Vtbl;
}
impl ::core::clone::Clone for ITextBlockStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBlockStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x193ec042_a847_4552_b4e8_db36655b840a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBlockStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub FontSizeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontFamilyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontWeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FontStretchProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CharacterSpacingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextWrappingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextTrimmingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PaddingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub LineHeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub LineStackingStrategyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsTextSelectionEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedTextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBlockStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBlockStatics2 {
    type Vtable = ITextBlockStatics2_Vtbl;
}
impl ::core::clone::Clone for ITextBlockStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBlockStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x88100b1b_ff24_4b93_a0e6_f029c94871f1,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBlockStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectionHighlightColorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxLinesProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextLineBoundsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OpticalMarginAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsColorFontEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextReadingOrderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBlockStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBlockStatics3 {
    type Vtable = ITextBlockStatics3_Vtbl;
}
impl ::core::clone::Clone for ITextBlockStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBlockStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8d16b9eb_20a1_4eab_bbf2_1d6bdcbcd705,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBlockStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsTextScaleFactorEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBlockStatics5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBlockStatics5 {
    type Vtable = ITextBlockStatics5_Vtbl;
}
impl ::core::clone::Clone for ITextBlockStatics5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBlockStatics5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8e4d9c70_0d4e_48df_ae7f_bb7a9af6852e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBlockStatics5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TextDecorationsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBlockStatics6(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBlockStatics6 {
    type Vtable = ITextBlockStatics6_Vtbl;
}
impl ::core::clone::Clone for ITextBlockStatics6 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBlockStatics6 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3d1013a9_f9a6_43a2_99d3_573b89a83ca3,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBlockStatics6_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsTextTrimmedProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HorizontalTextAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBlockStatics7(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBlockStatics7 {
    type Vtable = ITextBlockStatics7_Vtbl;
}
impl ::core::clone::Clone for ITextBlockStatics7 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBlockStatics7 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xcfd57e3b_0256_585d_8b3f_feafb69d3320,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBlockStatics7_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectionFlyoutProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBox(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBox {
    type Vtable = ITextBox_Vtbl;
}
impl ::core::clone::Clone for ITextBox {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBox {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe48f5a8b_1dff_4352_a1f4_e516514ec882,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBox_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Text: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SelectedText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetSelectedText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SelectionLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetSelectionLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub SelectionStart: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetSelectionStart: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub MaxLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetMaxLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub IsReadOnly: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsReadOnly: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub AcceptsReturn: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAcceptsReturn: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub TextAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetTextAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextAlignment,
    ) -> ::windows_core::HRESULT,
    pub TextWrapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextWrapping,
    ) -> ::windows_core::HRESULT,
    pub SetTextWrapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextWrapping,
    ) -> ::windows_core::HRESULT,
    pub IsSpellCheckEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsSpellCheckEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsTextPredictionEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsTextPredictionEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    InputScope: usize,
    SetInputScope: usize,
    pub TextChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveTextChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub SelectionChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveSelectionChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub ContextMenuOpening: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveContextMenuOpening: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub Select: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        start: i32,
        length: i32,
    ) -> ::windows_core::HRESULT,
    pub SelectAll: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetRectFromCharacterIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        charindex: i32,
        trailingedge: bool,
        result__: *mut super::super::super::Foundation::Rect,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBox2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBox2 {
    type Vtable = ITextBox2_Vtbl;
}
impl ::core::clone::Clone for ITextBox2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBox2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf7168c00_1432_462a_9405_38f385bfc37c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBox2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Header: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PlaceholderText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetPlaceholderText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SelectionHighlightColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectionHighlightColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PreventKeyboardDisplayOnProgrammaticFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetPreventKeyboardDisplayOnProgrammaticFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsColorFontEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsColorFontEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Paste: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemovePaste: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBox3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBox3 {
    type Vtable = ITextBox3_Vtbl;
}
impl ::core::clone::Clone for ITextBox3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBox3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x7df18c3c_2826_425e_9a94_00b7f73f3756,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBox3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TextCompositionStarted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveTextCompositionStarted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub TextCompositionChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveTextCompositionChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub TextCompositionEnded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveTextCompositionEnded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub TextReadingOrder: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextReadingOrder,
    ) -> ::windows_core::HRESULT,
    pub SetTextReadingOrder: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextReadingOrder,
    ) -> ::windows_core::HRESULT,
    pub DesiredCandidateWindowAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CandidateWindowAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetDesiredCandidateWindowAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CandidateWindowAlignment,
    ) -> ::windows_core::HRESULT,
    pub CandidateWindowBoundsChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveCandidateWindowBoundsChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub TextChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveTextChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBox4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBox4 {
    type Vtable = ITextBox4_Vtbl;
}
impl ::core::clone::Clone for ITextBox4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBox4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb5f1a675_cce1_45af_aef9_c4787bbb5e30,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBox4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub GetLinguisticAlternativesAsync: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBox5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBox5 {
    type Vtable = ITextBox5_Vtbl;
}
impl ::core::clone::Clone for ITextBox5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBox5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x35f9cfc1_4176_44f4_b756_e9ccc4399805,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBox5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectionHighlightColorWhenNotFocused: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectionHighlightColorWhenNotFocused: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBox6(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBox6 {
    type Vtable = ITextBox6_Vtbl;
}
impl ::core::clone::Clone for ITextBox6 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBox6 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x41ff2d07_5085_4e52_a51c_f94b06cd558b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBox6_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HorizontalTextAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::TextAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalTextAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::TextAlignment,
    ) -> ::windows_core::HRESULT,
    pub CharacterCasing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CharacterCasing,
    ) -> ::windows_core::HRESULT,
    pub SetCharacterCasing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CharacterCasing,
    ) -> ::windows_core::HRESULT,
    pub PlaceholderForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPlaceholderForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CopyingToClipboard: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveCopyingToClipboard: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub CuttingToClipboard: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveCuttingToClipboard: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub BeforeTextChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveBeforeTextChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBox7(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBox7 {
    type Vtable = ITextBox7_Vtbl;
}
impl ::core::clone::Clone for ITextBox7 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBox7 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xda4911f9_ffe1_4c6a_ac6d_1b4a174ccf80,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBox7_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HandwritingView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHandwritingView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsHandwritingViewEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsHandwritingViewEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBox8(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBox8 {
    type Vtable = ITextBox8_Vtbl;
}
impl ::core::clone::Clone for ITextBox8 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBox8 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1eb6d027_0317_5c37_8aea_f747ae7f0463,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBox8_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CanPasteClipboardContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub CanUndo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub CanRedo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SelectionFlyout: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectionFlyout: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ProofingMenuFlyout: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Description: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetDescription: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectionChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveSelectionChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub Undo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Redo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PasteFromClipboard: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CopySelectionToClipboard: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CutSelectionToClipboard: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ClearUndoRedoHistory: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBoxBeforeTextChangingEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBoxBeforeTextChangingEventArgs {
    type Vtable = ITextBoxBeforeTextChangingEventArgs_Vtbl;
}
impl ::core::clone::Clone for ITextBoxBeforeTextChangingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBoxBeforeTextChangingEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa5541db3_7784_4258_aa83_e4bedd727467,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBoxBeforeTextChangingEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub NewText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub Cancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBoxFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBoxFactory {
    type Vtable = ITextBoxFactory_Vtbl;
}
impl ::core::clone::Clone for ITextBoxFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBoxFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x710e4278_8529_47d3_8d8e_307e34cff081,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBoxFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBoxSelectionChangingEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBoxSelectionChangingEventArgs {
    type Vtable = ITextBoxSelectionChangingEventArgs_Vtbl;
}
impl ::core::clone::Clone for ITextBoxSelectionChangingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBoxSelectionChangingEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x847a24dd_9abe_52df_a80a_0cce4b496632,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBoxSelectionChangingEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectionStart: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SelectionLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub Cancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBoxStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBoxStatics {
    type Vtable = ITextBoxStatics_Vtbl;
}
impl ::core::clone::Clone for ITextBoxStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBoxStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x7e37f4fb_a4bc_4625_8838_8eb2a9091283,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBoxStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxLengthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsReadOnlyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AcceptsReturnProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextWrappingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsSpellCheckEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsTextPredictionEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub InputScopeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBoxStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBoxStatics2 {
    type Vtable = ITextBoxStatics2_Vtbl;
}
impl ::core::clone::Clone for ITextBoxStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBoxStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x7592f37d_4e76_4ee4_8e0f_7d6e1a23326b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBoxStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PlaceholderTextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectionHighlightColorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PreventKeyboardDisplayOnProgrammaticFocusProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsColorFontEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBoxStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBoxStatics3 {
    type Vtable = ITextBoxStatics3_Vtbl;
}
impl ::core::clone::Clone for ITextBoxStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBoxStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0e1005c0_10b5_40f6_92c2_ce134b0d3457,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBoxStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DesiredCandidateWindowAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TextReadingOrderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBoxStatics5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBoxStatics5 {
    type Vtable = ITextBoxStatics5_Vtbl;
}
impl ::core::clone::Clone for ITextBoxStatics5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBoxStatics5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x07d04b45_1b2f_4627_82fd_683f197e5a75,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBoxStatics5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectionHighlightColorWhenNotFocusedProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBoxStatics6(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBoxStatics6 {
    type Vtable = ITextBoxStatics6_Vtbl;
}
impl ::core::clone::Clone for ITextBoxStatics6 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBoxStatics6 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xdc0d97e7_1cb7_433e_aa4f_9c64c98cdee5,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBoxStatics6_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HorizontalTextAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CharacterCasingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PlaceholderForegroundProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBoxStatics7(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBoxStatics7 {
    type Vtable = ITextBoxStatics7_Vtbl;
}
impl ::core::clone::Clone for ITextBoxStatics7 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBoxStatics7 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xcd6c6f47_147e_46f8_a4e8_749c49847a3e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBoxStatics7_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HandwritingViewProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsHandwritingViewEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBoxStatics8(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBoxStatics8 {
    type Vtable = ITextBoxStatics8_Vtbl;
}
impl ::core::clone::Clone for ITextBoxStatics8 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBoxStatics8 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x7f93d7c4_7d88_5f4d_8955_a5ad3848bcb6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBoxStatics8_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CanPasteClipboardContentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CanUndoProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CanRedoProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectionFlyoutProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ProofingMenuFlyoutProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DescriptionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBoxTextChangingEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBoxTextChangingEventArgs {
    type Vtable = ITextBoxTextChangingEventArgs_Vtbl;
}
impl ::core::clone::Clone for ITextBoxTextChangingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBoxTextChangingEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4e6a4b75_43dd_4e33_acbe_2d8796a17927,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBoxTextChangingEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextBoxTextChangingEventArgs2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextBoxTextChangingEventArgs2 {
    type Vtable = ITextBoxTextChangingEventArgs2_Vtbl;
}
impl ::core::clone::Clone for ITextBoxTextChangingEventArgs2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextBoxTextChangingEventArgs2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc0723d44_53a6_415f_a981_50dfaf1becbe,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBoxTextChangingEventArgs2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsContentChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextChangedEventArgs {
    type Vtable = ITextChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for ITextChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4dd04f7d_7a11_4b2e_9933_577df39252b6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextCommandBarFlyout(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextCommandBarFlyout {
    type Vtable = ITextCommandBarFlyout_Vtbl;
}
impl ::core::clone::Clone for ITextCommandBarFlyout {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextCommandBarFlyout {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x90384f66_cd3d_5325_8f40_59b076463c40,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextCommandBarFlyout_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextCommandBarFlyoutFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextCommandBarFlyoutFactory {
    type Vtable = ITextCommandBarFlyoutFactory_Vtbl;
}
impl ::core::clone::Clone for ITextCommandBarFlyoutFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextCommandBarFlyoutFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1b5918d8_b006_5ecd_ab72_6fdb48abc1f4,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextCommandBarFlyoutFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextCompositionChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextCompositionChangedEventArgs {
    type Vtable = ITextCompositionChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for ITextCompositionChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextCompositionChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb9c7e0f2_50b7_441d_990c_68553e2e056b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextCompositionChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub StartIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub Length: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextCompositionEndedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextCompositionEndedEventArgs {
    type Vtable = ITextCompositionEndedEventArgs_Vtbl;
}
impl ::core::clone::Clone for ITextCompositionEndedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextCompositionEndedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x46e34db2_77c0_4015_8eb4_92eefdfc5914,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextCompositionEndedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub StartIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub Length: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextCompositionStartedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextCompositionStartedEventArgs {
    type Vtable = ITextCompositionStartedEventArgs_Vtbl;
}
impl ::core::clone::Clone for ITextCompositionStartedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextCompositionStartedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xdf22abb2_10cf_491e_91e8_d3cd72d8a0d3,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextCompositionStartedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub StartIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub Length: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextControlCopyingToClipboardEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextControlCopyingToClipboardEventArgs {
    type Vtable = ITextControlCopyingToClipboardEventArgs_Vtbl;
}
impl ::core::clone::Clone for ITextControlCopyingToClipboardEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextControlCopyingToClipboardEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe405ef19_d0df_43da_ace6_16f9113868c3,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextControlCopyingToClipboardEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextControlCuttingToClipboardEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextControlCuttingToClipboardEventArgs {
    type Vtable = ITextControlCuttingToClipboardEventArgs_Vtbl;
}
impl ::core::clone::Clone for ITextControlCuttingToClipboardEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextControlCuttingToClipboardEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5f894995_a58d_4cf3_b589_b5e500e06475,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextControlCuttingToClipboardEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITextControlPasteEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITextControlPasteEventArgs {
    type Vtable = ITextControlPasteEventArgs_Vtbl;
}
impl ::core::clone::Clone for ITextControlPasteEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITextControlPasteEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4bd1d625_221a_477e_bb2c_ad0c1ed125e7,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextControlPasteEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITimePickedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITimePickedEventArgs {
    type Vtable = ITimePickedEventArgs_Vtbl;
}
impl ::core::clone::Clone for ITimePickedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITimePickedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8ad3ff21_5f66_4785_b999_24fef39fb6db,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITimePickedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OldTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::TimeSpan,
    ) -> ::windows_core::HRESULT,
    pub NewTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::TimeSpan,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITimePicker(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITimePicker {
    type Vtable = ITimePicker_Vtbl;
}
impl ::core::clone::Clone for ITimePicker {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITimePicker {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe39099f2_3aff_4792_909e_2d9941ec0357,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITimePicker_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Header: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ClockIdentifier: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetClockIdentifier: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub MinuteIncrement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetMinuteIncrement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub Time: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::TimeSpan,
    ) -> ::windows_core::HRESULT,
    pub SetTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::Foundation::TimeSpan,
    ) -> ::windows_core::HRESULT,
    pub TimeChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveTimeChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITimePicker2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITimePicker2 {
    type Vtable = ITimePicker2_Vtbl;
}
impl ::core::clone::Clone for ITimePicker2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITimePicker2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0ff0798c_f922_419f_8b3d_23ee7586d48e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITimePicker2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LightDismissOverlayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut LightDismissOverlayMode,
    ) -> ::windows_core::HRESULT,
    pub SetLightDismissOverlayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: LightDismissOverlayMode,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITimePicker3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITimePicker3 {
    type Vtable = ITimePicker3_Vtbl;
}
impl ::core::clone::Clone for ITimePicker3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITimePicker3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xfa6e4f91_ac32_59a4_94da_8b3d64289ed6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITimePicker3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectedTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSelectedTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectedTimeChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveSelectedTimeChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITimePickerFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITimePickerFactory {
    type Vtable = ITimePickerFactory_Vtbl;
}
impl ::core::clone::Clone for ITimePickerFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITimePickerFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x553fe413_6cd7_46a9_a97b_a18bdc4b4ca3,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITimePickerFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITimePickerFlyout(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITimePickerFlyout {
    type Vtable = ITimePickerFlyout_Vtbl;
}
impl ::core::clone::Clone for ITimePickerFlyout {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITimePickerFlyout {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xbb739d75_e836_439e_86d5_506d2d18e404,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITimePickerFlyout_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ClockIdentifier: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetClockIdentifier: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub Time: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::TimeSpan,
    ) -> ::windows_core::HRESULT,
    pub SetTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::Foundation::TimeSpan,
    ) -> ::windows_core::HRESULT,
    pub MinuteIncrement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetMinuteIncrement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub TimePicked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveTimePicked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub ShowAtAsync: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITimePickerFlyoutPresenter(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITimePickerFlyoutPresenter {
    type Vtable = ITimePickerFlyoutPresenter_Vtbl;
}
impl ::core::clone::Clone for ITimePickerFlyoutPresenter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITimePickerFlyoutPresenter {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc5320638_7a18_40ed_9fd0_4c852c09b24e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITimePickerFlyoutPresenter_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITimePickerFlyoutPresenter2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITimePickerFlyoutPresenter2 {
    type Vtable = ITimePickerFlyoutPresenter2_Vtbl;
}
impl ::core::clone::Clone for ITimePickerFlyoutPresenter2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITimePickerFlyoutPresenter2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa13b5b68_7ee9_59f7_aad6_6532a8a8c3bf,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITimePickerFlyoutPresenter2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsDefaultShadowEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsDefaultShadowEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITimePickerFlyoutPresenterStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITimePickerFlyoutPresenterStatics2 {
    type Vtable = ITimePickerFlyoutPresenterStatics2_Vtbl;
}
impl ::core::clone::Clone for ITimePickerFlyoutPresenterStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITimePickerFlyoutPresenterStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xaa5f0ddc_f2bb_53f2_a54d_b34acccf51e4,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITimePickerFlyoutPresenterStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsDefaultShadowEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITimePickerFlyoutStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITimePickerFlyoutStatics {
    type Vtable = ITimePickerFlyoutStatics_Vtbl;
}
impl ::core::clone::Clone for ITimePickerFlyoutStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITimePickerFlyoutStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3f6728ce_2169_4003_b4a8_8de7035a0ad6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITimePickerFlyoutStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ClockIdentifierProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TimeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MinuteIncrementProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITimePickerSelectedValueChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITimePickerSelectedValueChangedEventArgs {
    type Vtable = ITimePickerSelectedValueChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for ITimePickerSelectedValueChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITimePickerSelectedValueChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6e20fb35_3b9b_5bb6_9888_266524db181e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITimePickerSelectedValueChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OldTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub NewTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITimePickerStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITimePickerStatics {
    type Vtable = ITimePickerStatics_Vtbl;
}
impl ::core::clone::Clone for ITimePickerStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITimePickerStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xfa71dfb1_233e_4f31_b8be_a6ea670c25cd,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITimePickerStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ClockIdentifierProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MinuteIncrementProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TimeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITimePickerStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITimePickerStatics2 {
    type Vtable = ITimePickerStatics2_Vtbl;
}
impl ::core::clone::Clone for ITimePickerStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITimePickerStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x36d8abcd_4e10_451a_b93b_1a731ea7ee3f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITimePickerStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LightDismissOverlayModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITimePickerStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITimePickerStatics3 {
    type Vtable = ITimePickerStatics3_Vtbl;
}
impl ::core::clone::Clone for ITimePickerStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITimePickerStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xcfef1763_ba87_54d8_82d4_7c6b9734dc9d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITimePickerStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectedTimeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITimePickerValueChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITimePickerValueChangedEventArgs {
    type Vtable = ITimePickerValueChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for ITimePickerValueChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITimePickerValueChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x2f4edb8d_b995_4e31_8ba9_c4dcdeb21ca3,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITimePickerValueChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OldTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::TimeSpan,
    ) -> ::windows_core::HRESULT,
    pub NewTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::TimeSpan,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IToggleMenuFlyoutItem(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IToggleMenuFlyoutItem {
    type Vtable = IToggleMenuFlyoutItem_Vtbl;
}
impl ::core::clone::Clone for IToggleMenuFlyoutItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IToggleMenuFlyoutItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x49841edd_88e9_4663_a701_cd4fd25e398f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IToggleMenuFlyoutItem_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsChecked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsChecked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IToggleMenuFlyoutItemFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IToggleMenuFlyoutItemFactory {
    type Vtable = IToggleMenuFlyoutItemFactory_Vtbl;
}
impl ::core::clone::Clone for IToggleMenuFlyoutItemFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IToggleMenuFlyoutItemFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa151966f_3bf7_46b6_b61c_9b2c1ba68843,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IToggleMenuFlyoutItemFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IToggleMenuFlyoutItemStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IToggleMenuFlyoutItemStatics {
    type Vtable = IToggleMenuFlyoutItemStatics_Vtbl;
}
impl ::core::clone::Clone for IToggleMenuFlyoutItemStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IToggleMenuFlyoutItemStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x16c724fb_6c1a_4852_9258_08c038367907,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IToggleMenuFlyoutItemStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsCheckedProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IToggleSplitButton(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IToggleSplitButton {
    type Vtable = IToggleSplitButton_Vtbl;
}
impl ::core::clone::Clone for IToggleSplitButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IToggleSplitButton {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x28981b31_8e78_570c_bebb_685814485ae9,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IToggleSplitButton_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsChecked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsChecked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsCheckedChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveIsCheckedChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IToggleSplitButtonAutomationPeer(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IToggleSplitButtonAutomationPeer {
    type Vtable = IToggleSplitButtonAutomationPeer_Vtbl;
}
impl ::core::clone::Clone for IToggleSplitButtonAutomationPeer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IToggleSplitButtonAutomationPeer {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x538e61de_7d46_5da7_94ab_acede6a12b9e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IToggleSplitButtonAutomationPeer_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IToggleSplitButtonAutomationPeerFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IToggleSplitButtonAutomationPeerFactory {
    type Vtable = IToggleSplitButtonAutomationPeerFactory_Vtbl;
}
impl ::core::clone::Clone for IToggleSplitButtonAutomationPeerFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IToggleSplitButtonAutomationPeerFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9829b0a0_5a30_5eed_a3a3_1472c53b0a66,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IToggleSplitButtonAutomationPeerFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        owner: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IToggleSplitButtonFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IToggleSplitButtonFactory {
    type Vtable = IToggleSplitButtonFactory_Vtbl;
}
impl ::core::clone::Clone for IToggleSplitButtonFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IToggleSplitButtonFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3fcf073b_e57c_573d_af38_d1b2ad387951,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IToggleSplitButtonFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IToggleSplitButtonIsCheckedChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IToggleSplitButtonIsCheckedChangedEventArgs {
    type Vtable = IToggleSplitButtonIsCheckedChangedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IToggleSplitButtonIsCheckedChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface
for IToggleSplitButtonIsCheckedChangedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x2138f0cf_5fcd_5dbb_99ae_359483070f6b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IToggleSplitButtonIsCheckedChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IToggleSwitch(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IToggleSwitch {
    type Vtable = IToggleSwitch_Vtbl;
}
impl ::core::clone::Clone for IToggleSwitch {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IToggleSwitch {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x331d8f00_c5f9_46a5_b6c8_ede539304567,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IToggleSwitch_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsOn: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsOn: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Header: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHeaderTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetOnContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnContentTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetOnContentTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OffContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetOffContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OffContentTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetOffContentTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TemplateSettings: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Toggled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveToggled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IToggleSwitchOverrides(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IToggleSwitchOverrides {
    type Vtable = IToggleSwitchOverrides_Vtbl;
}
impl ::core::clone::Clone for IToggleSwitchOverrides {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IToggleSwitchOverrides {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xbfd07f53_f8ca_4e47_949e_9e80429b3d16,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IToggleSwitchOverrides_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OnToggled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnOnContentChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        oldcontent: *mut ::core::ffi::c_void,
        newcontent: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnOffContentChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        oldcontent: *mut ::core::ffi::c_void,
        newcontent: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnHeaderChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        oldcontent: *mut ::core::ffi::c_void,
        newcontent: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IToggleSwitchStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IToggleSwitchStatics {
    type Vtable = IToggleSwitchStatics_Vtbl;
}
impl ::core::clone::Clone for IToggleSwitchStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IToggleSwitchStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1d37147f_97df_4226_92ca_ddf453d7fd5a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IToggleSwitchStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsOnProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeaderTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnContentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnContentTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OffContentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OffContentTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IToolTip(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IToolTip {
    type Vtable = IToolTip_Vtbl;
}
impl ::core::clone::Clone for IToolTip {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IToolTip {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x7de5d75f_4415_429f_b523_699bdb8c30db,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IToolTip_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub IsOpen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsOpen: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Placement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Primitives::PlacementMode,
    ) -> ::windows_core::HRESULT,
    pub SetPlacement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Primitives::PlacementMode,
    ) -> ::windows_core::HRESULT,
    pub PlacementTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPlacementTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub VerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub TemplateSettings: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Closed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveClosed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub Opened: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveOpened: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IToolTip2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IToolTip2 {
    type Vtable = IToolTip2_Vtbl;
}
impl ::core::clone::Clone for IToolTip2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IToolTip2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x2b1ade26_299a_5d54_800b_3bea123b4c20,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IToolTip2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PlacementRect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPlacementRect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IToolTipFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IToolTipFactory {
    type Vtable = IToolTipFactory_Vtbl;
}
impl ::core::clone::Clone for IToolTipFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IToolTipFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x89839403_b538_49e3_a430_3ac037dc6fe0,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IToolTipFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IToolTipService(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IToolTipService {
    type Vtable = IToolTipService_Vtbl;
}
impl ::core::clone::Clone for IToolTipService {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IToolTipService {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x03a55f87_bfcc_4a1e_8fea_98f610832cea,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IToolTipService_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IToolTipServiceStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IToolTipServiceStatics {
    type Vtable = IToolTipServiceStatics_Vtbl;
}
impl ::core::clone::Clone for IToolTipServiceStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IToolTipServiceStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x86e649f8_e245_48aa_a8c8_d1073ed76319,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IToolTipServiceStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PlacementProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetPlacement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut Primitives::PlacementMode,
    ) -> ::windows_core::HRESULT,
    pub SetPlacement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: Primitives::PlacementMode,
    ) -> ::windows_core::HRESULT,
    pub PlacementTargetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetPlacementTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPlacementTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ToolTipProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetToolTip: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetToolTip: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IToolTipStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IToolTipStatics {
    type Vtable = IToolTipStatics_Vtbl;
}
impl ::core::clone::Clone for IToolTipStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IToolTipStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf00285b8_4ba9_4f4f_86a7_86003813ceb3,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IToolTipStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HorizontalOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsOpenProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PlacementProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PlacementTargetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub VerticalOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IToolTipStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IToolTipStatics2 {
    type Vtable = IToolTipStatics2_Vtbl;
}
impl ::core::clone::Clone for IToolTipStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IToolTipStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6845e646_9c7f_5011_8a78_7da9d87eb3b6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IToolTipStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PlacementRectProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeView(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeView {
    type Vtable = ITreeView_Vtbl;
}
impl ::core::clone::Clone for ITreeView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeView {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9353cc5c_dd6e_453c_aedd_0c3ac993978b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeView_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub RootNodes: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectionMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut TreeViewSelectionMode,
    ) -> ::windows_core::HRESULT,
    pub SetSelectionMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: TreeViewSelectionMode,
    ) -> ::windows_core::HRESULT,
    pub SelectedNodes: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Expand: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Collapse: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SelectAll: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemInvoked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveItemInvoked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub Expanding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveExpanding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub Collapsed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveCollapsed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeView2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeView2 {
    type Vtable = ITreeView2_Vtbl;
}
impl ::core::clone::Clone for ITreeView2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeView2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4f33a2e6_2f29_55d3_a1ab_1f4a863bf960,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeView2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub NodeFromContainer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        container: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContainerFromNode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        node: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemFromContainer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        container: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContainerFromItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        item: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CanDragItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCanDragItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub CanReorderItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCanReorderItems: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub ItemTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetItemTemplate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemTemplateSelector: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetItemTemplateSelector: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemContainerStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetItemContainerStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemContainerStyleSelector: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetItemContainerStyleSelector: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    ItemContainerTransitions: usize,
    SetItemContainerTransitions: usize,
    pub ItemsSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetItemsSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DragItemsStarting: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveDragItemsStarting: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub DragItemsCompleted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveDragItemsCompleted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewCollapsedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewCollapsedEventArgs {
    type Vtable = ITreeViewCollapsedEventArgs_Vtbl;
}
impl ::core::clone::Clone for ITreeViewCollapsedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewCollapsedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x391db3b0_1e58_4539_9e93_387978f46cce,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewCollapsedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Node: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewCollapsedEventArgs2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewCollapsedEventArgs2 {
    type Vtable = ITreeViewCollapsedEventArgs2_Vtbl;
}
impl ::core::clone::Clone for ITreeViewCollapsedEventArgs2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewCollapsedEventArgs2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x747b2f4f_7b25_56aa_8300_78d83b7ab2db,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewCollapsedEventArgs2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Item: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewDragItemsCompletedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewDragItemsCompletedEventArgs {
    type Vtable = ITreeViewDragItemsCompletedEventArgs_Vtbl;
}
impl ::core::clone::Clone for ITreeViewDragItemsCompletedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewDragItemsCompletedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3ca8632c_4311_574e_8ab4_3b7aa5de7a88,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewDragItemsCompletedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    DropResult: usize,
    pub Items: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewDragItemsStartingEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewDragItemsStartingEventArgs {
    type Vtable = ITreeViewDragItemsStartingEventArgs_Vtbl;
}
impl ::core::clone::Clone for ITreeViewDragItemsStartingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewDragItemsStartingEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x7bdb7ec4_e125_5773_9a3f_6695233d6250,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewDragItemsStartingEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Cancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    Data: usize,
    pub Items: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewExpandingEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewExpandingEventArgs {
    type Vtable = ITreeViewExpandingEventArgs_Vtbl;
}
impl ::core::clone::Clone for ITreeViewExpandingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewExpandingEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc5e1fa63_4154_49d2_a21f_c34176605e3a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewExpandingEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Node: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewExpandingEventArgs2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewExpandingEventArgs2 {
    type Vtable = ITreeViewExpandingEventArgs2_Vtbl;
}
impl ::core::clone::Clone for ITreeViewExpandingEventArgs2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewExpandingEventArgs2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa12f54c3_87b9_5623_9c74_e6dd443cde18,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewExpandingEventArgs2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Item: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewFactory {
    type Vtable = ITreeViewFactory_Vtbl;
}
impl ::core::clone::Clone for ITreeViewFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xcc5267c3_6c69_49ce_b445_753acee7948b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewItem(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewItem {
    type Vtable = ITreeViewItem_Vtbl;
}
impl ::core::clone::Clone for ITreeViewItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4e05d3e6_6167_44e7_9c74_291ddd6df6eb,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewItem_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub GlyphOpacity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetGlyphOpacity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub GlyphBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetGlyphBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ExpandedGlyph: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetExpandedGlyph: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub CollapsedGlyph: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetCollapsedGlyph: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub GlyphSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetGlyphSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub IsExpanded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsExpanded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub TreeViewItemTemplateSettings: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewItem2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewItem2 {
    type Vtable = ITreeViewItem2_Vtbl;
}
impl ::core::clone::Clone for ITreeViewItem2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewItem2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x007baf7f_0493_51b4_879c_458024b34149,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewItem2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HasUnrealizedChildren: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetHasUnrealizedChildren: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub ItemsSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetItemsSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewItemFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewItemFactory {
    type Vtable = ITreeViewItemFactory_Vtbl;
}
impl ::core::clone::Clone for ITreeViewItemFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewItemFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x4ea32731_568d_4d0d_adfd_3d8dc5aa5d88,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewItemFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewItemInvokedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewItemInvokedEventArgs {
    type Vtable = ITreeViewItemInvokedEventArgs_Vtbl;
}
impl ::core::clone::Clone for ITreeViewItemInvokedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewItemInvokedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x472ab521_0242_4290_9363_ab4fe704527f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewItemInvokedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub InvokedItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewItemStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewItemStatics {
    type Vtable = ITreeViewItemStatics_Vtbl;
}
impl ::core::clone::Clone for ITreeViewItemStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewItemStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x436795be_7396_46dc_a264_21c56581c5e5,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewItemStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub GlyphOpacityProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GlyphBrushProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ExpandedGlyphProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CollapsedGlyphProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GlyphSizeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsExpandedProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TreeViewItemTemplateSettingsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewItemStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewItemStatics2 {
    type Vtable = ITreeViewItemStatics2_Vtbl;
}
impl ::core::clone::Clone for ITreeViewItemStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewItemStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa8af82f3_d803_5c25_b48d_ae0e73b16d8e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewItemStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub HasUnrealizedChildrenProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemsSourceProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewItemTemplateSettings(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewItemTemplateSettings {
    type Vtable = ITreeViewItemTemplateSettings_Vtbl;
}
impl ::core::clone::Clone for ITreeViewItemTemplateSettings {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewItemTemplateSettings {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xec323744_de31_4936_bfc2_1cb37ba1dc08,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewItemTemplateSettings_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ExpandedGlyphVisibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Visibility,
    ) -> ::windows_core::HRESULT,
    pub CollapsedGlyphVisibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Visibility,
    ) -> ::windows_core::HRESULT,
    pub Indentation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Thickness,
    ) -> ::windows_core::HRESULT,
    pub DragItemsCount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewItemTemplateSettingsFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewItemTemplateSettingsFactory {
    type Vtable = ITreeViewItemTemplateSettingsFactory_Vtbl;
}
impl ::core::clone::Clone for ITreeViewItemTemplateSettingsFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewItemTemplateSettingsFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x11a1953b_31b7_4f40_8633_02fc614b518c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewItemTemplateSettingsFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewItemTemplateSettingsStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewItemTemplateSettingsStatics {
    type Vtable = ITreeViewItemTemplateSettingsStatics_Vtbl;
}
impl ::core::clone::Clone for ITreeViewItemTemplateSettingsStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewItemTemplateSettingsStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x55c720a8_70ed_4c21_93f4_2d79c1a4a5f7,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewItemTemplateSettingsStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ExpandedGlyphVisibilityProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CollapsedGlyphVisibilityProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IndentationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DragItemsCountProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewList(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewList {
    type Vtable = ITreeViewList_Vtbl;
}
impl ::core::clone::Clone for ITreeViewList {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewList {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0f00a54e_099a_47a5_a942_94692b01f452,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewList_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewListFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewListFactory {
    type Vtable = ITreeViewListFactory_Vtbl;
}
impl ::core::clone::Clone for ITreeViewListFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewListFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x288f6232_41d2_46f7_b1f5_691c625264b7,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewListFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewNode(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewNode {
    type Vtable = ITreeViewNode_Vtbl;
}
impl ::core::clone::Clone for ITreeViewNode {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewNode {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc04c8ed3_9af2_4e75_a329_7497a110e7a8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewNode_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Content: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Parent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsExpanded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsExpanded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub HasChildren: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub Depth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub HasUnrealizedChildren: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetHasUnrealizedChildren: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Children: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewNodeFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewNodeFactory {
    type Vtable = ITreeViewNodeFactory_Vtbl;
}
impl ::core::clone::Clone for ITreeViewNodeFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewNodeFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6ec62d90_aa19_414a_8a45_0a5589a836f7,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewNodeFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewNodeStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewNodeStatics {
    type Vtable = ITreeViewNodeStatics_Vtbl;
}
impl ::core::clone::Clone for ITreeViewNodeStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewNodeStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5d8276fe_e1d1_4b61_9e81_c7fb189a2980,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewNodeStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ContentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DepthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsExpandedProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HasChildrenProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewStatics {
    type Vtable = ITreeViewStatics_Vtbl;
}
impl ::core::clone::Clone for ITreeViewStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xef913e08_83f2_4e16_bfb1_1577b98355f5,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SelectionModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITreeViewStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITreeViewStatics2 {
    type Vtable = ITreeViewStatics2_Vtbl;
}
impl ::core::clone::Clone for ITreeViewStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITreeViewStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x16b1c8f9_7aa1_5e38_8218_7bba3ea417c0,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITreeViewStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CanDragItemsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CanReorderItemsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemTemplateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemTemplateSelectorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemContainerStyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemContainerStyleSelectorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemContainerTransitionsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemsSourceProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITwoPaneView(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITwoPaneView {
    type Vtable = ITwoPaneView_Vtbl;
}
impl ::core::clone::Clone for ITwoPaneView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITwoPaneView {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1b4d0db5_14ad_5926_bb8a_5b0a5c0085f0,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITwoPaneView_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Pane1: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPane1: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Pane2: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPane2: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Pane1Length: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::GridLength,
    ) -> ::windows_core::HRESULT,
    pub SetPane1Length: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::GridLength,
    ) -> ::windows_core::HRESULT,
    pub Pane2Length: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::GridLength,
    ) -> ::windows_core::HRESULT,
    pub SetPane2Length: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::GridLength,
    ) -> ::windows_core::HRESULT,
    pub PanePriority: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut TwoPaneViewPriority,
    ) -> ::windows_core::HRESULT,
    pub SetPanePriority: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: TwoPaneViewPriority,
    ) -> ::windows_core::HRESULT,
    pub Mode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut TwoPaneViewMode,
    ) -> ::windows_core::HRESULT,
    pub WideModeConfiguration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut TwoPaneViewWideModeConfiguration,
    ) -> ::windows_core::HRESULT,
    pub SetWideModeConfiguration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: TwoPaneViewWideModeConfiguration,
    ) -> ::windows_core::HRESULT,
    pub TallModeConfiguration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut TwoPaneViewTallModeConfiguration,
    ) -> ::windows_core::HRESULT,
    pub SetTallModeConfiguration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: TwoPaneViewTallModeConfiguration,
    ) -> ::windows_core::HRESULT,
    pub MinWideModeWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetMinWideModeWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub MinTallModeHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetMinTallModeHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub ModeChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveModeChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITwoPaneViewFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITwoPaneViewFactory {
    type Vtable = ITwoPaneViewFactory_Vtbl;
}
impl ::core::clone::Clone for ITwoPaneViewFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITwoPaneViewFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x18ff792d_58b4_59ed_a051_51aceffbcca9,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITwoPaneViewFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITwoPaneViewStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITwoPaneViewStatics {
    type Vtable = ITwoPaneViewStatics_Vtbl;
}
impl ::core::clone::Clone for ITwoPaneViewStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ITwoPaneViewStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5a35c389_85c4_55f4_abb1_97451bc32d71,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITwoPaneViewStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Pane1Property: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Pane2Property: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Pane1LengthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Pane2LengthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PanePriorityProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub WideModeConfigurationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TallModeConfigurationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MinWideModeWidthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MinTallModeHeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IUIElementCollection(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IUIElementCollection {
    type Vtable = IUIElementCollection_Vtbl;
}
impl ::core::clone::Clone for IUIElementCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IUIElementCollection {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd6602d54_88f6_43f6_85d8_a9d914a6dd3b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IUIElementCollection_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Move: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        oldindex: u32,
        newindex: u32,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IUserControl(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IUserControl {
    type Vtable = IUserControl_Vtbl;
}
impl ::core::clone::Clone for IUserControl {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IUserControl {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa7a69ec9_ea35_4679_bf29_f4f09286d314,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IUserControl_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Content: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IUserControlFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IUserControlFactory {
    type Vtable = IUserControlFactory_Vtbl;
}
impl ::core::clone::Clone for IUserControlFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IUserControlFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x38b1ed92_a28a_4972_93df_f4f759b8afd2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IUserControlFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IUserControlStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IUserControlStatics {
    type Vtable = IUserControlStatics_Vtbl;
}
impl ::core::clone::Clone for IUserControlStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IUserControlStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe8887976_2c5c_41cf_be6a_9e44befdf655,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IUserControlStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ContentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVariableSizedWrapGrid(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IVariableSizedWrapGrid {
    type Vtable = IVariableSizedWrapGrid_Vtbl;
}
impl ::core::clone::Clone for IVariableSizedWrapGrid {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IVariableSizedWrapGrid {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9ca507c7_23c9_4f01_b80f_be5c21eef474,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IVariableSizedWrapGrid_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ItemHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetItemHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub ItemWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetItemWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub Orientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Orientation,
    ) -> ::windows_core::HRESULT,
    pub SetOrientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Orientation,
    ) -> ::windows_core::HRESULT,
    pub HorizontalChildrenAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::HorizontalAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalChildrenAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::HorizontalAlignment,
    ) -> ::windows_core::HRESULT,
    pub VerticalChildrenAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::VerticalAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalChildrenAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::VerticalAlignment,
    ) -> ::windows_core::HRESULT,
    pub MaximumRowsOrColumns: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetMaximumRowsOrColumns: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVariableSizedWrapGridStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IVariableSizedWrapGridStatics {
    type Vtable = IVariableSizedWrapGridStatics_Vtbl;
}
impl ::core::clone::Clone for IVariableSizedWrapGridStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IVariableSizedWrapGridStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xfe9db859_8127_4aef_b7a2_949847486e96,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IVariableSizedWrapGridStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ItemHeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemWidthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OrientationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HorizontalChildrenAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub VerticalChildrenAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaximumRowsOrColumnsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RowSpanProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetRowSpan: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetRowSpan: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    pub ColumnSpanProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetColumnSpan: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetColumnSpan: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IViewbox(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IViewbox {
    type Vtable = IViewbox_Vtbl;
}
impl ::core::clone::Clone for IViewbox {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IViewbox {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x05252c58_ba9d_4809_9ec3_fa0d16710ba1,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IViewbox_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Child: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetChild: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Stretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Media::Stretch,
    ) -> ::windows_core::HRESULT,
    pub SetStretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Media::Stretch,
    ) -> ::windows_core::HRESULT,
    pub StretchDirection: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut StretchDirection,
    ) -> ::windows_core::HRESULT,
    pub SetStretchDirection: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: StretchDirection,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IViewboxStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IViewboxStatics {
    type Vtable = IViewboxStatics_Vtbl;
}
impl ::core::clone::Clone for IViewboxStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IViewboxStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5cd1e72d_e8d3_4865_8f08_b6b2d689adf1,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IViewboxStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub StretchProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub StretchDirectionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVirtualizingPanel(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IVirtualizingPanel {
    type Vtable = IVirtualizingPanel_Vtbl;
}
impl ::core::clone::Clone for IVirtualizingPanel {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IVirtualizingPanel {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x38aad50c_12cf_4d1e_a884_c9df85f07cd9,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IVirtualizingPanel_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ItemContainerGenerator: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVirtualizingPanelFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IVirtualizingPanelFactory {
    type Vtable = IVirtualizingPanelFactory_Vtbl;
}
impl ::core::clone::Clone for IVirtualizingPanelFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IVirtualizingPanelFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xbe19f839_cbd0_43e9_a5d0_0bdba0ffbd38,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IVirtualizingPanelFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVirtualizingPanelOverrides(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IVirtualizingPanelOverrides {
    type Vtable = IVirtualizingPanelOverrides_Vtbl;
}
impl ::core::clone::Clone for IVirtualizingPanelOverrides {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IVirtualizingPanelOverrides {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5ef6bd7d_677f_408d_a96c_b19507750466,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IVirtualizingPanelOverrides_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OnItemsChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OnClearChildren: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BringIndexIntoView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        index: i32,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVirtualizingPanelProtected(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IVirtualizingPanelProtected {
    type Vtable = IVirtualizingPanelProtected_Vtbl;
}
impl ::core::clone::Clone for IVirtualizingPanelProtected {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IVirtualizingPanelProtected {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc9c9ab42_c232_479d_a7c9_5e7611196a45,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IVirtualizingPanelProtected_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub AddInternalChild: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        child: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub InsertInternalChild: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        index: i32,
        child: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RemoveInternalChildRange: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        index: i32,
        range: i32,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVirtualizingStackPanel(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IVirtualizingStackPanel {
    type Vtable = IVirtualizingStackPanel_Vtbl;
}
impl ::core::clone::Clone for IVirtualizingStackPanel {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IVirtualizingStackPanel {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x7567cd9a_a3b4_4dea_bb11_549e2c2f919d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IVirtualizingStackPanel_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub AreScrollSnapPointsRegular: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAreScrollSnapPointsRegular: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Orientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Orientation,
    ) -> ::windows_core::HRESULT,
    pub SetOrientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Orientation,
    ) -> ::windows_core::HRESULT,
    pub CleanUpVirtualizedItemEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveCleanUpVirtualizedItemEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVirtualizingStackPanelOverrides(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IVirtualizingStackPanelOverrides {
    type Vtable = IVirtualizingStackPanelOverrides_Vtbl;
}
impl ::core::clone::Clone for IVirtualizingStackPanelOverrides {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IVirtualizingStackPanelOverrides {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xcbe6f72c_2892_46d1_987f_58ca1081f040,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IVirtualizingStackPanelOverrides_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OnCleanUpVirtualizedItem: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVirtualizingStackPanelStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IVirtualizingStackPanelStatics {
    type Vtable = IVirtualizingStackPanelStatics_Vtbl;
}
impl ::core::clone::Clone for IVirtualizingStackPanelStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IVirtualizingStackPanelStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8314e778_91d3_4d56_ac09_223adcd2bd3f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IVirtualizingStackPanelStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub AreScrollSnapPointsRegularProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OrientationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub VirtualizationModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetVirtualizationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut VirtualizationMode,
    ) -> ::windows_core::HRESULT,
    pub SetVirtualizationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: VirtualizationMode,
    ) -> ::windows_core::HRESULT,
    pub IsVirtualizingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetIsVirtualizing: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        o: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebView(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebView {
    type Vtable = IWebView_Vtbl;
}
impl ::core::clone::Clone for IWebView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebView {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x5862cc46_1f7d_479b_92a6_de7858fe8d54,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebView_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    AllowedScriptNotifyUris: usize,
    SetAllowedScriptNotifyUris: usize,
    DataTransferPackage: usize,
    LoadCompleted: usize,
    RemoveLoadCompleted: usize,
    pub ScriptNotify: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveScriptNotify: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    NavigationFailed: usize,
    RemoveNavigationFailed: usize,
    InvokeScript: usize,
    pub Navigate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub NavigateToString: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        text: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebView2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebView2 {
    type Vtable = IWebView2_Vtbl;
}
impl ::core::clone::Clone for IWebView2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebView2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd481759e_3eff_4462_823d_fd52f9ba4cc8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebView2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CanGoBack: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub CanGoForward: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub DocumentTitle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub NavigationStarting: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveNavigationStarting: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub ContentLoading: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveContentLoading: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub DOMContentLoaded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveDOMContentLoaded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub GoForward: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GoBack: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Refresh: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Stop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    CapturePreviewToStreamAsync: usize,
    pub InvokeScriptAsync: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        scriptname: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
        arguments: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    CaptureSelectedContentToDataPackageAsync: usize,
    NavigateToLocalStreamUri: usize,
    pub BuildLocalStreamUri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        contentidentifier: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
        relativepath: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DefaultBackgroundColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Color,
    ) -> ::windows_core::HRESULT,
    pub SetDefaultBackgroundColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Color,
    ) -> ::windows_core::HRESULT,
    pub NavigationCompleted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveNavigationCompleted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub FrameNavigationStarting: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveFrameNavigationStarting: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub FrameContentLoading: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveFrameContentLoading: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub FrameDOMContentLoaded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveFrameDOMContentLoaded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub FrameNavigationCompleted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveFrameNavigationCompleted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub LongRunningScriptDetected: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveLongRunningScriptDetected: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub UnsafeContentWarningDisplaying: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveUnsafeContentWarningDisplaying: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub UnviewableContentIdentified: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveUnviewableContentIdentified: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    NavigateWithHttpRequestMessage: usize,
    pub Focus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::FocusState,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebView3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebView3 {
    type Vtable = IWebView3_Vtbl;
}
impl ::core::clone::Clone for IWebView3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebView3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc497789b_b499_4d69_b5c2_ae9d5d6d594e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebView3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ContainsFullScreenElement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub ContainsFullScreenElementChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveContainsFullScreenElementChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebView4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebView4 {
    type Vtable = IWebView4_Vtbl;
}
impl ::core::clone::Clone for IWebView4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebView4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe28243bc_67f3_462a_b4e0_3bbf6c3dab0b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebView4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ExecutionMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut WebViewExecutionMode,
    ) -> ::windows_core::HRESULT,
    pub DeferredPermissionRequests: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Settings: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub UnsupportedUriSchemeIdentified: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveUnsupportedUriSchemeIdentified: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub NewWindowRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveNewWindowRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub PermissionRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemovePermissionRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub AddWebAllowedObject: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        name: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
        pobject: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DeferredPermissionRequestById: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        id: u32,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebView5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebView5 {
    type Vtable = IWebView5_Vtbl;
}
impl ::core::clone::Clone for IWebView5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebView5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8c9884a6_2f3b_4a55_a463_8444c2095d00,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebView5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub XYFocusLeft: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetXYFocusLeft: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub XYFocusRight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetXYFocusRight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub XYFocusUp: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetXYFocusUp: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub XYFocusDown: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetXYFocusDown: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebView6(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebView6 {
    type Vtable = IWebView6_Vtbl;
}
impl ::core::clone::Clone for IWebView6 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebView6 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x38ccd942_2536_467c_a211_af359c3b4fda,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebView6_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SeparateProcessLost: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveSeparateProcessLost: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebView7(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebView7 {
    type Vtable = IWebView7_Vtbl;
}
impl ::core::clone::Clone for IWebView7 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebView7 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x27707c2b_042f_5353_9021_55cd06585fdf,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebView7_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub WebResourceRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    pub RemoveWebResourceRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewBrush(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewBrush {
    type Vtable = IWebViewBrush_Vtbl;
}
impl ::core::clone::Clone for IWebViewBrush {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebViewBrush {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x40e86f75_0cf4_4b72_a4d6_cf5d15780116,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewBrush_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SourceName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetSourceName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub Redraw: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewBrushStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewBrushStatics {
    type Vtable = IWebViewBrushStatics_Vtbl;
}
impl ::core::clone::Clone for IWebViewBrushStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebViewBrushStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd74daa24_1d05_463e_b028_6baa4420e762,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewBrushStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SourceNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewContentLoadingEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewContentLoadingEventArgs {
    type Vtable = IWebViewContentLoadingEventArgs_Vtbl;
}
impl ::core::clone::Clone for IWebViewContentLoadingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebViewContentLoadingEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6e2980bb_98b8_413e_8129_971c6f7e4c8a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewContentLoadingEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Uri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewDOMContentLoadedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewDOMContentLoadedEventArgs {
    type Vtable = IWebViewDOMContentLoadedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IWebViewDOMContentLoadedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebViewDOMContentLoadedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc47eba15_dc6b_4b36_9d80_82fb8817b988,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewDOMContentLoadedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Uri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewDeferredPermissionRequest(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewDeferredPermissionRequest {
    type Vtable = IWebViewDeferredPermissionRequest_Vtbl;
}
impl ::core::clone::Clone for IWebViewDeferredPermissionRequest {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebViewDeferredPermissionRequest {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa3dcc461_7350_4d3a_8fb9_40eeec2746c2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewDeferredPermissionRequest_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Uri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PermissionType: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut WebViewPermissionType,
    ) -> ::windows_core::HRESULT,
    pub Id: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut u32,
    ) -> ::windows_core::HRESULT,
    pub Allow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Deny: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewFactory4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewFactory4 {
    type Vtable = IWebViewFactory4_Vtbl;
}
impl ::core::clone::Clone for IWebViewFactory4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebViewFactory4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x82edac58_ee6a_4c9b_a3a0_9347a7d0ef4c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewFactory4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstanceWithExecutionMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        executionmode: WebViewExecutionMode,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewLongRunningScriptDetectedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewLongRunningScriptDetectedEventArgs {
    type Vtable = IWebViewLongRunningScriptDetectedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IWebViewLongRunningScriptDetectedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebViewLongRunningScriptDetectedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xf3f020ab_a46c_42b0_9efe_69764d5cffa6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewLongRunningScriptDetectedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ExecutionTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::super::Foundation::TimeSpan,
    ) -> ::windows_core::HRESULT,
    pub StopPageScriptExecution: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetStopPageScriptExecution: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewNavigationCompletedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewNavigationCompletedEventArgs {
    type Vtable = IWebViewNavigationCompletedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IWebViewNavigationCompletedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebViewNavigationCompletedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x11e6f20b_eba7_44c0_889b_edeb6a064ddd,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewNavigationCompletedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Uri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsSuccess: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    WebErrorStatus: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewNavigationFailedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewNavigationFailedEventArgs {
    type Vtable = IWebViewNavigationFailedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IWebViewNavigationFailedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebViewNavigationFailedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xaf09609a_129c_4170_9e9c_e2cdf025dca4,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewNavigationFailedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Uri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    WebErrorStatus: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewNavigationStartingEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewNavigationStartingEventArgs {
    type Vtable = IWebViewNavigationStartingEventArgs_Vtbl;
}
impl ::core::clone::Clone for IWebViewNavigationStartingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebViewNavigationStartingEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x94cb8668_8367_43d5_91bb_96eba37ec784,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewNavigationStartingEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Uri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Cancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewNewWindowRequestedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewNewWindowRequestedEventArgs {
    type Vtable = IWebViewNewWindowRequestedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IWebViewNewWindowRequestedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebViewNewWindowRequestedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x470fa818_6862_44d9_b3d1_c0696373de35,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewNewWindowRequestedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Uri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Referrer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewPermissionRequest(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewPermissionRequest {
    type Vtable = IWebViewPermissionRequest_Vtbl;
}
impl ::core::clone::Clone for IWebViewPermissionRequest {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebViewPermissionRequest {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x17b76332_66c4_4131_999e_df7de20a8c9c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewPermissionRequest_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Uri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PermissionType: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut WebViewPermissionType,
    ) -> ::windows_core::HRESULT,
    pub Id: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut u32,
    ) -> ::windows_core::HRESULT,
    pub State: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut WebViewPermissionState,
    ) -> ::windows_core::HRESULT,
    pub Defer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Allow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Deny: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewPermissionRequestedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewPermissionRequestedEventArgs {
    type Vtable = IWebViewPermissionRequestedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IWebViewPermissionRequestedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebViewPermissionRequestedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xdadecfd0_6e1e_473f_b0be_b02404d6a86d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewPermissionRequestedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub PermissionRequest: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewSeparateProcessLostEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewSeparateProcessLostEventArgs {
    type Vtable = IWebViewSeparateProcessLostEventArgs_Vtbl;
}
impl ::core::clone::Clone for IWebViewSeparateProcessLostEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebViewSeparateProcessLostEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa405700a_c482_40b5_aaea_e10cfa9f5abe,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewSeparateProcessLostEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewSettings(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewSettings {
    type Vtable = IWebViewSettings_Vtbl;
}
impl ::core::clone::Clone for IWebViewSettings {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebViewSettings {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1d50ad4d_abf6_4785_8df3_fdebc1270301,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewSettings_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsJavaScriptEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsJavaScriptEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsIndexedDBEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsIndexedDBEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewStatics {
    type Vtable = IWebViewStatics_Vtbl;
}
impl ::core::clone::Clone for IWebViewStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebViewStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa0b561de_5fdb_443b_b9f0_5c30f6b7a1f4,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    AnyScriptNotifyUri: usize,
    pub SourceProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    AllowedScriptNotifyUrisProperty: usize,
    DataTransferPackageProperty: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewStatics2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewStatics2 {
    type Vtable = IWebViewStatics2_Vtbl;
}
impl ::core::clone::Clone for IWebViewStatics2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebViewStatics2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x322f8780_e812_466b_9e50_8e9fec24018a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewStatics2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CanGoBackProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CanGoForwardProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DocumentTitleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DefaultBackgroundColorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewStatics3(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewStatics3 {
    type Vtable = IWebViewStatics3_Vtbl;
}
impl ::core::clone::Clone for IWebViewStatics3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebViewStatics3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x129bef8a_4509_4374_b0d1_a7104d0c3a2f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewStatics3_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ContainsFullScreenElementProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewStatics4(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewStatics4 {
    type Vtable = IWebViewStatics4_Vtbl;
}
impl ::core::clone::Clone for IWebViewStatics4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebViewStatics4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x44b197b0_b746_40f3_9936_4ebbff6b47b8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewStatics4_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DefaultExecutionMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut WebViewExecutionMode,
    ) -> ::windows_core::HRESULT,
    pub ClearTemporaryWebDataAsync: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewStatics5(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewStatics5 {
    type Vtable = IWebViewStatics5_Vtbl;
}
impl ::core::clone::Clone for IWebViewStatics5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebViewStatics5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x08a0b8d1_508a_4db8_97ef_0fa505e19ec2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewStatics5_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub XYFocusLeftProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub XYFocusRightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub XYFocusUpProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub XYFocusDownProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewUnsupportedUriSchemeIdentifiedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface
for IWebViewUnsupportedUriSchemeIdentifiedEventArgs {
    type Vtable = IWebViewUnsupportedUriSchemeIdentifiedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IWebViewUnsupportedUriSchemeIdentifiedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface
for IWebViewUnsupportedUriSchemeIdentifiedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xb9c9e1a7_620f_4895_935d_10fbac6fd29e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewUnsupportedUriSchemeIdentifiedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Uri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewUnviewableContentIdentifiedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewUnviewableContentIdentifiedEventArgs {
    type Vtable = IWebViewUnviewableContentIdentifiedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IWebViewUnviewableContentIdentifiedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface
for IWebViewUnviewableContentIdentifiedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x37bc16e1_6062_4678_b20b_6c36ac9c59ac,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewUnviewableContentIdentifiedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Uri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Referrer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewUnviewableContentIdentifiedEventArgs2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewUnviewableContentIdentifiedEventArgs2 {
    type Vtable = IWebViewUnviewableContentIdentifiedEventArgs2_Vtbl;
}
impl ::core::clone::Clone for IWebViewUnviewableContentIdentifiedEventArgs2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface
for IWebViewUnviewableContentIdentifiedEventArgs2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x9abe1154_36f0_4268_8d88_121eedf45e6a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewUnviewableContentIdentifiedEventArgs2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub MediaType: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWebViewWebResourceRequestedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWebViewWebResourceRequestedEventArgs {
    type Vtable = IWebViewWebResourceRequestedEventArgs_Vtbl;
}
impl ::core::clone::Clone for IWebViewWebResourceRequestedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWebViewWebResourceRequestedEventArgs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x378d21f6_c77f_5d8b_8f30_93c99df79435,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebViewWebResourceRequestedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    Request: usize,
    Response: usize,
    SetResponse: usize,
    pub GetDeferral: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWrapGrid(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWrapGrid {
    type Vtable = IWrapGrid_Vtbl;
}
impl ::core::clone::Clone for IWrapGrid {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWrapGrid {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x0552178b_7567_47c2_bd5c_ad8394c828ba,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWrapGrid_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ItemWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetItemWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub ItemHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetItemHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub Orientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Orientation,
    ) -> ::windows_core::HRESULT,
    pub SetOrientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Orientation,
    ) -> ::windows_core::HRESULT,
    pub HorizontalChildrenAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::HorizontalAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalChildrenAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::HorizontalAlignment,
    ) -> ::windows_core::HRESULT,
    pub VerticalChildrenAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::VerticalAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalChildrenAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::VerticalAlignment,
    ) -> ::windows_core::HRESULT,
    pub MaximumRowsOrColumns: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetMaximumRowsOrColumns: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWrapGridStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWrapGridStatics {
    type Vtable = IWrapGridStatics_Vtbl;
}
impl ::core::clone::Clone for IWrapGridStatics {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IWrapGridStatics {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd04a6b97_13cb_479c_a285_e4e56846c4cb,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWrapGridStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ItemWidthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ItemHeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OrientationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HorizontalChildrenAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub VerticalChildrenAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaximumRowsOrColumnsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct AnchorRequestedEventArgs(::windows_core::IUnknown);
impl AnchorRequestedEventArgs {}
impl ::core::cmp::PartialEq for AnchorRequestedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for AnchorRequestedEventArgs {}
impl ::core::fmt::Debug for AnchorRequestedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AnchorRequestedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for AnchorRequestedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.AnchorRequestedEventArgs;{5175f55d-4785-5a72-b462-eb11e9bdf897})",
    );
}
impl ::core::clone::Clone for AnchorRequestedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for AnchorRequestedEventArgs {
    type Vtable = IAnchorRequestedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for AnchorRequestedEventArgs {
    const IID: ::windows_core::GUID = <IAnchorRequestedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for AnchorRequestedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.AnchorRequestedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    AnchorRequestedEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for AnchorRequestedEventArgs {}
unsafe impl ::core::marker::Sync for AnchorRequestedEventArgs {}
#[repr(transparent)]
pub struct AppBar(::windows_core::IUnknown);
impl AppBar {}
impl ::core::cmp::PartialEq for AppBar {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for AppBar {}
impl ::core::fmt::Debug for AppBar {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AppBar").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for AppBar {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.AppBar;{7b0fc253-86a5-4b43-9872-0b8a6234b74b})",
    );
}
impl ::core::clone::Clone for AppBar {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for AppBar {
    type Vtable = IAppBar_Vtbl;
}
unsafe impl ::windows_core::ComInterface for AppBar {
    const IID: ::windows_core::GUID = <IAppBar as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for AppBar {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.AppBar";
}
::windows_core::imp::interface_hierarchy!(
    AppBar, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ContentControl> for AppBar {}
impl ::windows_core::CanTryInto<Control> for AppBar {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for AppBar {}
impl ::windows_core::CanTryInto<super::UIElement> for AppBar {}
impl ::windows_core::CanTryInto<super::DependencyObject> for AppBar {}
unsafe impl ::core::marker::Send for AppBar {}
unsafe impl ::core::marker::Sync for AppBar {}
#[repr(transparent)]
pub struct AppBarButton(::windows_core::IUnknown);
impl AppBarButton {}
impl ::core::cmp::PartialEq for AppBarButton {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for AppBarButton {}
impl ::core::fmt::Debug for AppBarButton {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AppBarButton").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for AppBarButton {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.AppBarButton;{4459a451-69e8-440c-9896-4bb4f5f642d1})",
    );
}
impl ::core::clone::Clone for AppBarButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for AppBarButton {
    type Vtable = IAppBarButton_Vtbl;
}
unsafe impl ::windows_core::ComInterface for AppBarButton {
    const IID: ::windows_core::GUID = <IAppBarButton as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for AppBarButton {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.AppBarButton";
}
::windows_core::imp::interface_hierarchy!(
    AppBarButton, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ICommandBarElement> for AppBarButton {}
impl ::windows_core::CanTryInto<ICommandBarElement2> for AppBarButton {}
impl ::windows_core::CanTryInto<Button> for AppBarButton {}
impl ::windows_core::CanTryInto<Primitives::ButtonBase> for AppBarButton {}
impl ::windows_core::CanTryInto<ContentControl> for AppBarButton {}
impl ::windows_core::CanTryInto<Control> for AppBarButton {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for AppBarButton {}
impl ::windows_core::CanTryInto<super::UIElement> for AppBarButton {}
impl ::windows_core::CanTryInto<super::DependencyObject> for AppBarButton {}
unsafe impl ::core::marker::Send for AppBarButton {}
unsafe impl ::core::marker::Sync for AppBarButton {}
#[repr(transparent)]
pub struct AppBarElementContainer(::windows_core::IUnknown);
impl AppBarElementContainer {}
impl ::core::cmp::PartialEq for AppBarElementContainer {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for AppBarElementContainer {}
impl ::core::fmt::Debug for AppBarElementContainer {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AppBarElementContainer").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for AppBarElementContainer {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.AppBarElementContainer;{1d5ba067-a990-5dab-a9c3-e6be56642a1a})",
    );
}
impl ::core::clone::Clone for AppBarElementContainer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for AppBarElementContainer {
    type Vtable = IAppBarElementContainer_Vtbl;
}
unsafe impl ::windows_core::ComInterface for AppBarElementContainer {
    const IID: ::windows_core::GUID = <IAppBarElementContainer as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for AppBarElementContainer {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.AppBarElementContainer";
}
::windows_core::imp::interface_hierarchy!(
    AppBarElementContainer, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ICommandBarElement> for AppBarElementContainer {}
impl ::windows_core::CanTryInto<ICommandBarElement2> for AppBarElementContainer {}
impl ::windows_core::CanTryInto<ContentControl> for AppBarElementContainer {}
impl ::windows_core::CanTryInto<Control> for AppBarElementContainer {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for AppBarElementContainer {}
impl ::windows_core::CanTryInto<super::UIElement> for AppBarElementContainer {}
impl ::windows_core::CanTryInto<super::DependencyObject> for AppBarElementContainer {}
unsafe impl ::core::marker::Send for AppBarElementContainer {}
unsafe impl ::core::marker::Sync for AppBarElementContainer {}
#[repr(transparent)]
pub struct AppBarSeparator(::windows_core::IUnknown);
impl AppBarSeparator {}
impl ::core::cmp::PartialEq for AppBarSeparator {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for AppBarSeparator {}
impl ::core::fmt::Debug for AppBarSeparator {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AppBarSeparator").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for AppBarSeparator {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.AppBarSeparator;{1b0795a1-1bc1-4d53-95ea-fb0a2cccc905})",
    );
}
impl ::core::clone::Clone for AppBarSeparator {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for AppBarSeparator {
    type Vtable = IAppBarSeparator_Vtbl;
}
unsafe impl ::windows_core::ComInterface for AppBarSeparator {
    const IID: ::windows_core::GUID = <IAppBarSeparator as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for AppBarSeparator {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.AppBarSeparator";
}
::windows_core::imp::interface_hierarchy!(
    AppBarSeparator, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ICommandBarElement> for AppBarSeparator {}
impl ::windows_core::CanTryInto<ICommandBarElement2> for AppBarSeparator {}
impl ::windows_core::CanTryInto<Control> for AppBarSeparator {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for AppBarSeparator {}
impl ::windows_core::CanTryInto<super::UIElement> for AppBarSeparator {}
impl ::windows_core::CanTryInto<super::DependencyObject> for AppBarSeparator {}
unsafe impl ::core::marker::Send for AppBarSeparator {}
unsafe impl ::core::marker::Sync for AppBarSeparator {}
#[repr(transparent)]
pub struct AppBarToggleButton(::windows_core::IUnknown);
impl AppBarToggleButton {}
impl ::core::cmp::PartialEq for AppBarToggleButton {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for AppBarToggleButton {}
impl ::core::fmt::Debug for AppBarToggleButton {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AppBarToggleButton").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for AppBarToggleButton {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.AppBarToggleButton;{2e914438-fd53-4b8d-858b-3644269f8e4d})",
    );
}
impl ::core::clone::Clone for AppBarToggleButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for AppBarToggleButton {
    type Vtable = IAppBarToggleButton_Vtbl;
}
unsafe impl ::windows_core::ComInterface for AppBarToggleButton {
    const IID: ::windows_core::GUID = <IAppBarToggleButton as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for AppBarToggleButton {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.AppBarToggleButton";
}
::windows_core::imp::interface_hierarchy!(
    AppBarToggleButton, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ICommandBarElement> for AppBarToggleButton {}
impl ::windows_core::CanTryInto<ICommandBarElement2> for AppBarToggleButton {}
impl ::windows_core::CanTryInto<Primitives::ToggleButton> for AppBarToggleButton {}
impl ::windows_core::CanTryInto<Primitives::ButtonBase> for AppBarToggleButton {}
impl ::windows_core::CanTryInto<ContentControl> for AppBarToggleButton {}
impl ::windows_core::CanTryInto<Control> for AppBarToggleButton {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for AppBarToggleButton {}
impl ::windows_core::CanTryInto<super::UIElement> for AppBarToggleButton {}
impl ::windows_core::CanTryInto<super::DependencyObject> for AppBarToggleButton {}
unsafe impl ::core::marker::Send for AppBarToggleButton {}
unsafe impl ::core::marker::Sync for AppBarToggleButton {}
#[repr(transparent)]
pub struct AutoSuggestBox(::windows_core::IUnknown);
impl AutoSuggestBox {}
impl ::core::cmp::PartialEq for AutoSuggestBox {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for AutoSuggestBox {}
impl ::core::fmt::Debug for AutoSuggestBox {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AutoSuggestBox").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for AutoSuggestBox {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.AutoSuggestBox;{103e9b13-3400-4a16-90b9-6912bf06974f})",
    );
}
impl ::core::clone::Clone for AutoSuggestBox {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for AutoSuggestBox {
    type Vtable = IAutoSuggestBox_Vtbl;
}
unsafe impl ::windows_core::ComInterface for AutoSuggestBox {
    const IID: ::windows_core::GUID = <IAutoSuggestBox as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for AutoSuggestBox {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.AutoSuggestBox";
}
::windows_core::imp::interface_hierarchy!(
    AutoSuggestBox, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IItemContainerMapping> for AutoSuggestBox {}
impl ::windows_core::CanTryInto<ItemsControl> for AutoSuggestBox {}
impl ::windows_core::CanTryInto<Control> for AutoSuggestBox {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for AutoSuggestBox {}
impl ::windows_core::CanTryInto<super::UIElement> for AutoSuggestBox {}
impl ::windows_core::CanTryInto<super::DependencyObject> for AutoSuggestBox {}
unsafe impl ::core::marker::Send for AutoSuggestBox {}
unsafe impl ::core::marker::Sync for AutoSuggestBox {}
#[repr(transparent)]
pub struct AutoSuggestBoxQuerySubmittedEventArgs(::windows_core::IUnknown);
impl AutoSuggestBoxQuerySubmittedEventArgs {}
impl ::core::cmp::PartialEq for AutoSuggestBoxQuerySubmittedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for AutoSuggestBoxQuerySubmittedEventArgs {}
impl ::core::fmt::Debug for AutoSuggestBoxQuerySubmittedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AutoSuggestBoxQuerySubmittedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for AutoSuggestBoxQuerySubmittedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs;{78dcb116-818a-4cb5-bca7-382ce6ddc90d})",
    );
}
impl ::core::clone::Clone for AutoSuggestBoxQuerySubmittedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for AutoSuggestBoxQuerySubmittedEventArgs {
    type Vtable = IAutoSuggestBoxQuerySubmittedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for AutoSuggestBoxQuerySubmittedEventArgs {
    const IID: ::windows_core::GUID = <IAutoSuggestBoxQuerySubmittedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for AutoSuggestBoxQuerySubmittedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    AutoSuggestBoxQuerySubmittedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::DependencyObject>
for AutoSuggestBoxQuerySubmittedEventArgs {}
unsafe impl ::core::marker::Send for AutoSuggestBoxQuerySubmittedEventArgs {}
unsafe impl ::core::marker::Sync for AutoSuggestBoxQuerySubmittedEventArgs {}
#[repr(transparent)]
pub struct AutoSuggestBoxSuggestionChosenEventArgs(::windows_core::IUnknown);
impl AutoSuggestBoxSuggestionChosenEventArgs {}
impl ::core::cmp::PartialEq for AutoSuggestBoxSuggestionChosenEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for AutoSuggestBoxSuggestionChosenEventArgs {}
impl ::core::fmt::Debug for AutoSuggestBoxSuggestionChosenEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AutoSuggestBoxSuggestionChosenEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for AutoSuggestBoxSuggestionChosenEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs;{396f7254-1ed5-4bc5-a060-655530bca6ba})",
    );
}
impl ::core::clone::Clone for AutoSuggestBoxSuggestionChosenEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for AutoSuggestBoxSuggestionChosenEventArgs {
    type Vtable = IAutoSuggestBoxSuggestionChosenEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for AutoSuggestBoxSuggestionChosenEventArgs {
    const IID: ::windows_core::GUID = <IAutoSuggestBoxSuggestionChosenEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for AutoSuggestBoxSuggestionChosenEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    AutoSuggestBoxSuggestionChosenEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::DependencyObject>
for AutoSuggestBoxSuggestionChosenEventArgs {}
unsafe impl ::core::marker::Send for AutoSuggestBoxSuggestionChosenEventArgs {}
unsafe impl ::core::marker::Sync for AutoSuggestBoxSuggestionChosenEventArgs {}
#[repr(transparent)]
pub struct AutoSuggestBoxTextChangedEventArgs(::windows_core::IUnknown);
impl AutoSuggestBoxTextChangedEventArgs {}
impl ::core::cmp::PartialEq for AutoSuggestBoxTextChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for AutoSuggestBoxTextChangedEventArgs {}
impl ::core::fmt::Debug for AutoSuggestBoxTextChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AutoSuggestBoxTextChangedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for AutoSuggestBoxTextChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs;{3a6f7254-1ed5-4bc5-a060-655530bca6ba})",
    );
}
impl ::core::clone::Clone for AutoSuggestBoxTextChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for AutoSuggestBoxTextChangedEventArgs {
    type Vtable = IAutoSuggestBoxTextChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for AutoSuggestBoxTextChangedEventArgs {
    const IID: ::windows_core::GUID = <IAutoSuggestBoxTextChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for AutoSuggestBoxTextChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    AutoSuggestBoxTextChangedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::DependencyObject>
for AutoSuggestBoxTextChangedEventArgs {}
unsafe impl ::core::marker::Send for AutoSuggestBoxTextChangedEventArgs {}
unsafe impl ::core::marker::Sync for AutoSuggestBoxTextChangedEventArgs {}
#[repr(transparent)]
pub struct BackClickEventArgs(::windows_core::IUnknown);
impl BackClickEventArgs {}
impl ::core::cmp::PartialEq for BackClickEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for BackClickEventArgs {}
impl ::core::fmt::Debug for BackClickEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BackClickEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for BackClickEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.BackClickEventArgs;{2ae6146c-477e-48c9-8830-2c464b7c7104})",
    );
}
impl ::core::clone::Clone for BackClickEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for BackClickEventArgs {
    type Vtable = IBackClickEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for BackClickEventArgs {
    const IID: ::windows_core::GUID = <IBackClickEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for BackClickEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.BackClickEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    BackClickEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for BackClickEventArgs {}
unsafe impl ::core::marker::Sync for BackClickEventArgs {}
#[repr(transparent)]
pub struct BitmapIcon(::windows_core::IUnknown);
impl BitmapIcon {}
impl ::core::cmp::PartialEq for BitmapIcon {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for BitmapIcon {}
impl ::core::fmt::Debug for BitmapIcon {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BitmapIcon").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for BitmapIcon {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.BitmapIcon;{e8fe17cb-35f7-40f3-a185-48b397b73e68})",
    );
}
impl ::core::clone::Clone for BitmapIcon {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for BitmapIcon {
    type Vtable = IBitmapIcon_Vtbl;
}
unsafe impl ::windows_core::ComInterface for BitmapIcon {
    const IID: ::windows_core::GUID = <IBitmapIcon as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for BitmapIcon {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.BitmapIcon";
}
::windows_core::imp::interface_hierarchy!(
    BitmapIcon, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IconElement> for BitmapIcon {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for BitmapIcon {}
impl ::windows_core::CanTryInto<super::UIElement> for BitmapIcon {}
impl ::windows_core::CanTryInto<super::DependencyObject> for BitmapIcon {}
unsafe impl ::core::marker::Send for BitmapIcon {}
unsafe impl ::core::marker::Sync for BitmapIcon {}
#[repr(transparent)]
pub struct BitmapIconSource(::windows_core::IUnknown);
impl BitmapIconSource {}
impl ::core::cmp::PartialEq for BitmapIconSource {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for BitmapIconSource {}
impl ::core::fmt::Debug for BitmapIconSource {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BitmapIconSource").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for BitmapIconSource {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.BitmapIconSource;{c8e33dc7-d4ae-4a87-947f-ac4d0bcf5af4})",
    );
}
impl ::core::clone::Clone for BitmapIconSource {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for BitmapIconSource {
    type Vtable = IBitmapIconSource_Vtbl;
}
unsafe impl ::windows_core::ComInterface for BitmapIconSource {
    const IID: ::windows_core::GUID = <IBitmapIconSource as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for BitmapIconSource {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.BitmapIconSource";
}
::windows_core::imp::interface_hierarchy!(
    BitmapIconSource, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IconSource> for BitmapIconSource {}
impl ::windows_core::CanTryInto<super::DependencyObject> for BitmapIconSource {}
unsafe impl ::core::marker::Send for BitmapIconSource {}
unsafe impl ::core::marker::Sync for BitmapIconSource {}
#[repr(transparent)]
pub struct Border(::windows_core::IUnknown);
impl Border {}
impl ::core::cmp::PartialEq for Border {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Border {}
impl ::core::fmt::Debug for Border {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Border").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for Border {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.Border;{797c4539-45bd-4633-a044-bfb02ef5170f})",
    );
}
impl ::core::clone::Clone for Border {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for Border {
    type Vtable = IBorder_Vtbl;
}
unsafe impl ::windows_core::ComInterface for Border {
    const IID: ::windows_core::GUID = <IBorder as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for Border {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.Border";
}
::windows_core::imp::interface_hierarchy!(
    Border, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::FrameworkElement> for Border {}
impl ::windows_core::CanTryInto<super::UIElement> for Border {}
impl ::windows_core::CanTryInto<super::DependencyObject> for Border {}
unsafe impl ::core::marker::Send for Border {}
unsafe impl ::core::marker::Sync for Border {}
#[repr(transparent)]
pub struct Button(::windows_core::IUnknown);
impl Button {}
impl ::core::cmp::PartialEq for Button {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Button {}
impl ::core::fmt::Debug for Button {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Button").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for Button {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.Button;{280335ae-5570-46c7-8e0b-602be71229a2})",
    );
}
impl ::core::clone::Clone for Button {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for Button {
    type Vtable = IButton_Vtbl;
}
unsafe impl ::windows_core::ComInterface for Button {
    const IID: ::windows_core::GUID = <IButton as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for Button {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.Button";
}
::windows_core::imp::interface_hierarchy!(
    Button, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Primitives::ButtonBase> for Button {}
impl ::windows_core::CanTryInto<ContentControl> for Button {}
impl ::windows_core::CanTryInto<Control> for Button {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for Button {}
impl ::windows_core::CanTryInto<super::UIElement> for Button {}
impl ::windows_core::CanTryInto<super::DependencyObject> for Button {}
unsafe impl ::core::marker::Send for Button {}
unsafe impl ::core::marker::Sync for Button {}
#[repr(transparent)]
pub struct CalendarDatePicker(::windows_core::IUnknown);
impl CalendarDatePicker {}
impl ::core::cmp::PartialEq for CalendarDatePicker {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CalendarDatePicker {}
impl ::core::fmt::Debug for CalendarDatePicker {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CalendarDatePicker").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for CalendarDatePicker {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.CalendarDatePicker;{63c9c16f-668c-4491-9444-d45d8bf4fa29})",
    );
}
impl ::core::clone::Clone for CalendarDatePicker {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for CalendarDatePicker {
    type Vtable = ICalendarDatePicker_Vtbl;
}
unsafe impl ::windows_core::ComInterface for CalendarDatePicker {
    const IID: ::windows_core::GUID = <ICalendarDatePicker as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for CalendarDatePicker {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.CalendarDatePicker";
}
::windows_core::imp::interface_hierarchy!(
    CalendarDatePicker, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for CalendarDatePicker {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for CalendarDatePicker {}
impl ::windows_core::CanTryInto<super::UIElement> for CalendarDatePicker {}
impl ::windows_core::CanTryInto<super::DependencyObject> for CalendarDatePicker {}
unsafe impl ::core::marker::Send for CalendarDatePicker {}
unsafe impl ::core::marker::Sync for CalendarDatePicker {}
#[repr(transparent)]
pub struct CalendarDatePickerDateChangedEventArgs(::windows_core::IUnknown);
impl CalendarDatePickerDateChangedEventArgs {}
impl ::core::cmp::PartialEq for CalendarDatePickerDateChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CalendarDatePickerDateChangedEventArgs {}
impl ::core::fmt::Debug for CalendarDatePickerDateChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CalendarDatePickerDateChangedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for CalendarDatePickerDateChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.CalendarDatePickerDateChangedEventArgs;{60d90db2-5010-46ba-842d-a4152c6504e7})",
    );
}
impl ::core::clone::Clone for CalendarDatePickerDateChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for CalendarDatePickerDateChangedEventArgs {
    type Vtable = ICalendarDatePickerDateChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for CalendarDatePickerDateChangedEventArgs {
    const IID: ::windows_core::GUID = <ICalendarDatePickerDateChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for CalendarDatePickerDateChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.CalendarDatePickerDateChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    CalendarDatePickerDateChangedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for CalendarDatePickerDateChangedEventArgs {}
unsafe impl ::core::marker::Sync for CalendarDatePickerDateChangedEventArgs {}
#[repr(transparent)]
pub struct CalendarView(::windows_core::IUnknown);
impl CalendarView {}
impl ::core::cmp::PartialEq for CalendarView {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CalendarView {}
impl ::core::fmt::Debug for CalendarView {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CalendarView").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for CalendarView {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.CalendarView;{cd639203-dfb5-4312-ac07-c0391824607b})",
    );
}
impl ::core::clone::Clone for CalendarView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for CalendarView {
    type Vtable = ICalendarView_Vtbl;
}
unsafe impl ::windows_core::ComInterface for CalendarView {
    const IID: ::windows_core::GUID = <ICalendarView as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for CalendarView {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.CalendarView";
}
::windows_core::imp::interface_hierarchy!(
    CalendarView, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for CalendarView {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for CalendarView {}
impl ::windows_core::CanTryInto<super::UIElement> for CalendarView {}
impl ::windows_core::CanTryInto<super::DependencyObject> for CalendarView {}
unsafe impl ::core::marker::Send for CalendarView {}
unsafe impl ::core::marker::Sync for CalendarView {}
#[repr(transparent)]
pub struct CalendarViewDayItem(::windows_core::IUnknown);
impl CalendarViewDayItem {}
impl ::core::cmp::PartialEq for CalendarViewDayItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CalendarViewDayItem {}
impl ::core::fmt::Debug for CalendarViewDayItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CalendarViewDayItem").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for CalendarViewDayItem {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.CalendarViewDayItem;{0fdb2dc5-32c1-4b8f-befc-017b555b32d2})",
    );
}
impl ::core::clone::Clone for CalendarViewDayItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for CalendarViewDayItem {
    type Vtable = ICalendarViewDayItem_Vtbl;
}
unsafe impl ::windows_core::ComInterface for CalendarViewDayItem {
    const IID: ::windows_core::GUID = <ICalendarViewDayItem as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for CalendarViewDayItem {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.CalendarViewDayItem";
}
::windows_core::imp::interface_hierarchy!(
    CalendarViewDayItem, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for CalendarViewDayItem {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for CalendarViewDayItem {}
impl ::windows_core::CanTryInto<super::UIElement> for CalendarViewDayItem {}
impl ::windows_core::CanTryInto<super::DependencyObject> for CalendarViewDayItem {}
unsafe impl ::core::marker::Send for CalendarViewDayItem {}
unsafe impl ::core::marker::Sync for CalendarViewDayItem {}
#[repr(transparent)]
pub struct CalendarViewDayItemChangingEventArgs(::windows_core::IUnknown);
impl CalendarViewDayItemChangingEventArgs {}
impl ::core::cmp::PartialEq for CalendarViewDayItemChangingEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CalendarViewDayItemChangingEventArgs {}
impl ::core::fmt::Debug for CalendarViewDayItemChangingEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CalendarViewDayItemChangingEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for CalendarViewDayItemChangingEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs;{73146666-1fb1-44f9-b7ad-4de859ecc565})",
    );
}
impl ::core::clone::Clone for CalendarViewDayItemChangingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for CalendarViewDayItemChangingEventArgs {
    type Vtable = ICalendarViewDayItemChangingEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for CalendarViewDayItemChangingEventArgs {
    const IID: ::windows_core::GUID = <ICalendarViewDayItemChangingEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for CalendarViewDayItemChangingEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    CalendarViewDayItemChangingEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for CalendarViewDayItemChangingEventArgs {}
unsafe impl ::core::marker::Sync for CalendarViewDayItemChangingEventArgs {}
#[repr(transparent)]
pub struct CalendarViewSelectedDatesChangedEventArgs(::windows_core::IUnknown);
impl CalendarViewSelectedDatesChangedEventArgs {}
impl ::core::cmp::PartialEq for CalendarViewSelectedDatesChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CalendarViewSelectedDatesChangedEventArgs {}
impl ::core::fmt::Debug for CalendarViewSelectedDatesChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CalendarViewSelectedDatesChangedEventArgs")
            .field(&self.0)
            .finish()
    }
}
impl ::windows_core::RuntimeType for CalendarViewSelectedDatesChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.CalendarViewSelectedDatesChangedEventArgs;{ee6069f6-13ef-4896-8ffc-5302b1b17539})",
    );
}
impl ::core::clone::Clone for CalendarViewSelectedDatesChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for CalendarViewSelectedDatesChangedEventArgs {
    type Vtable = ICalendarViewSelectedDatesChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for CalendarViewSelectedDatesChangedEventArgs {
    const IID: ::windows_core::GUID = <ICalendarViewSelectedDatesChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for CalendarViewSelectedDatesChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.CalendarViewSelectedDatesChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    CalendarViewSelectedDatesChangedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for CalendarViewSelectedDatesChangedEventArgs {}
unsafe impl ::core::marker::Sync for CalendarViewSelectedDatesChangedEventArgs {}
#[repr(transparent)]
pub struct CandidateWindowBoundsChangedEventArgs(::windows_core::IUnknown);
impl CandidateWindowBoundsChangedEventArgs {}
impl ::core::cmp::PartialEq for CandidateWindowBoundsChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CandidateWindowBoundsChangedEventArgs {}
impl ::core::fmt::Debug for CandidateWindowBoundsChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CandidateWindowBoundsChangedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for CandidateWindowBoundsChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.CandidateWindowBoundsChangedEventArgs;{8a946458-83b0-4c32-9450-5169a5838b55})",
    );
}
impl ::core::clone::Clone for CandidateWindowBoundsChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for CandidateWindowBoundsChangedEventArgs {
    type Vtable = ICandidateWindowBoundsChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for CandidateWindowBoundsChangedEventArgs {
    const IID: ::windows_core::GUID = <ICandidateWindowBoundsChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for CandidateWindowBoundsChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.CandidateWindowBoundsChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    CandidateWindowBoundsChangedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for CandidateWindowBoundsChangedEventArgs {}
unsafe impl ::core::marker::Sync for CandidateWindowBoundsChangedEventArgs {}
#[repr(transparent)]
pub struct Canvas(::windows_core::IUnknown);
impl Canvas {}
impl ::core::cmp::PartialEq for Canvas {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Canvas {}
impl ::core::fmt::Debug for Canvas {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Canvas").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for Canvas {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.Canvas;{79190e19-cd38-4823-aeae-64a77132f519})",
    );
}
impl ::core::clone::Clone for Canvas {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for Canvas {
    type Vtable = ICanvas_Vtbl;
}
unsafe impl ::windows_core::ComInterface for Canvas {
    const IID: ::windows_core::GUID = <ICanvas as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for Canvas {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.Canvas";
}
::windows_core::imp::interface_hierarchy!(
    Canvas, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Panel> for Canvas {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for Canvas {}
impl ::windows_core::CanTryInto<super::UIElement> for Canvas {}
impl ::windows_core::CanTryInto<super::DependencyObject> for Canvas {}
unsafe impl ::core::marker::Send for Canvas {}
unsafe impl ::core::marker::Sync for Canvas {}
#[repr(transparent)]
pub struct CaptureElement(::windows_core::IUnknown);
impl CaptureElement {}
impl ::core::cmp::PartialEq for CaptureElement {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CaptureElement {}
impl ::core::fmt::Debug for CaptureElement {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CaptureElement").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for CaptureElement {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.CaptureElement;{31a5c0e7-f307-4d4a-b626-e978863f5b74})",
    );
}
impl ::core::clone::Clone for CaptureElement {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for CaptureElement {
    type Vtable = ICaptureElement_Vtbl;
}
unsafe impl ::windows_core::ComInterface for CaptureElement {
    const IID: ::windows_core::GUID = <ICaptureElement as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for CaptureElement {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.CaptureElement";
}
::windows_core::imp::interface_hierarchy!(
    CaptureElement, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::FrameworkElement> for CaptureElement {}
impl ::windows_core::CanTryInto<super::UIElement> for CaptureElement {}
impl ::windows_core::CanTryInto<super::DependencyObject> for CaptureElement {}
unsafe impl ::core::marker::Send for CaptureElement {}
unsafe impl ::core::marker::Sync for CaptureElement {}
#[repr(transparent)]
pub struct CheckBox(::windows_core::IUnknown);
impl CheckBox {}
impl ::core::cmp::PartialEq for CheckBox {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CheckBox {}
impl ::core::fmt::Debug for CheckBox {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CheckBox").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for CheckBox {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.CheckBox;{2294c894-7e2a-4b70-b088-8f5d814875ba})",
    );
}
impl ::core::clone::Clone for CheckBox {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for CheckBox {
    type Vtable = ICheckBox_Vtbl;
}
unsafe impl ::windows_core::ComInterface for CheckBox {
    const IID: ::windows_core::GUID = <ICheckBox as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for CheckBox {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.CheckBox";
}
::windows_core::imp::interface_hierarchy!(
    CheckBox, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Primitives::ToggleButton> for CheckBox {}
impl ::windows_core::CanTryInto<Primitives::ButtonBase> for CheckBox {}
impl ::windows_core::CanTryInto<ContentControl> for CheckBox {}
impl ::windows_core::CanTryInto<Control> for CheckBox {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for CheckBox {}
impl ::windows_core::CanTryInto<super::UIElement> for CheckBox {}
impl ::windows_core::CanTryInto<super::DependencyObject> for CheckBox {}
unsafe impl ::core::marker::Send for CheckBox {}
unsafe impl ::core::marker::Sync for CheckBox {}
#[repr(transparent)]
pub struct ChoosingGroupHeaderContainerEventArgs(::windows_core::IUnknown);
impl ChoosingGroupHeaderContainerEventArgs {}
impl ::core::cmp::PartialEq for ChoosingGroupHeaderContainerEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ChoosingGroupHeaderContainerEventArgs {}
impl ::core::fmt::Debug for ChoosingGroupHeaderContainerEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ChoosingGroupHeaderContainerEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ChoosingGroupHeaderContainerEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs;{67db44d6-d201-4d72-beac-5e8e58afd8c7})",
    );
}
impl ::core::clone::Clone for ChoosingGroupHeaderContainerEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ChoosingGroupHeaderContainerEventArgs {
    type Vtable = IChoosingGroupHeaderContainerEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ChoosingGroupHeaderContainerEventArgs {
    const IID: ::windows_core::GUID = <IChoosingGroupHeaderContainerEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ChoosingGroupHeaderContainerEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    ChoosingGroupHeaderContainerEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ChoosingGroupHeaderContainerEventArgs {}
unsafe impl ::core::marker::Sync for ChoosingGroupHeaderContainerEventArgs {}
#[repr(transparent)]
pub struct ChoosingItemContainerEventArgs(::windows_core::IUnknown);
impl ChoosingItemContainerEventArgs {}
impl ::core::cmp::PartialEq for ChoosingItemContainerEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ChoosingItemContainerEventArgs {}
impl ::core::fmt::Debug for ChoosingItemContainerEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ChoosingItemContainerEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ChoosingItemContainerEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ChoosingItemContainerEventArgs;{9bb43bce-ae67-4a80-8363-e3fe1b244f2c})",
    );
}
impl ::core::clone::Clone for ChoosingItemContainerEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ChoosingItemContainerEventArgs {
    type Vtable = IChoosingItemContainerEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ChoosingItemContainerEventArgs {
    const IID: ::windows_core::GUID = <IChoosingItemContainerEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ChoosingItemContainerEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ChoosingItemContainerEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    ChoosingItemContainerEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ChoosingItemContainerEventArgs {}
unsafe impl ::core::marker::Sync for ChoosingItemContainerEventArgs {}
#[repr(transparent)]
pub struct CleanUpVirtualizedItemEventArgs(::windows_core::IUnknown);
impl CleanUpVirtualizedItemEventArgs {}
impl ::core::cmp::PartialEq for CleanUpVirtualizedItemEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CleanUpVirtualizedItemEventArgs {}
impl ::core::fmt::Debug for CleanUpVirtualizedItemEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CleanUpVirtualizedItemEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for CleanUpVirtualizedItemEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.CleanUpVirtualizedItemEventArgs;{ea05cce9-937c-4120-8406-792185784338})",
    );
}
impl ::core::clone::Clone for CleanUpVirtualizedItemEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for CleanUpVirtualizedItemEventArgs {
    type Vtable = ICleanUpVirtualizedItemEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for CleanUpVirtualizedItemEventArgs {
    const IID: ::windows_core::GUID = <ICleanUpVirtualizedItemEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for CleanUpVirtualizedItemEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.CleanUpVirtualizedItemEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    CleanUpVirtualizedItemEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::RoutedEventArgs>
for CleanUpVirtualizedItemEventArgs {}
unsafe impl ::core::marker::Send for CleanUpVirtualizedItemEventArgs {}
unsafe impl ::core::marker::Sync for CleanUpVirtualizedItemEventArgs {}
#[repr(transparent)]
pub struct ColorChangedEventArgs(::windows_core::IUnknown);
impl ColorChangedEventArgs {}
impl ::core::cmp::PartialEq for ColorChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ColorChangedEventArgs {}
impl ::core::fmt::Debug for ColorChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ColorChangedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ColorChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ColorChangedEventArgs;{34f7201f-aad0-4c3a-b97b-2abf36455539})",
    );
}
impl ::core::clone::Clone for ColorChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ColorChangedEventArgs {
    type Vtable = IColorChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ColorChangedEventArgs {
    const IID: ::windows_core::GUID = <IColorChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ColorChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ColorChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    ColorChangedEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ColorChangedEventArgs {}
unsafe impl ::core::marker::Sync for ColorChangedEventArgs {}
#[repr(transparent)]
pub struct ColorPicker(::windows_core::IUnknown);
impl ColorPicker {}
impl ::core::cmp::PartialEq for ColorPicker {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ColorPicker {}
impl ::core::fmt::Debug for ColorPicker {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ColorPicker").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ColorPicker {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ColorPicker;{6232e371-5c64-43cb-8b35-7f82dde36740})",
    );
}
impl ::core::clone::Clone for ColorPicker {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ColorPicker {
    type Vtable = IColorPicker_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ColorPicker {
    const IID: ::windows_core::GUID = <IColorPicker as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ColorPicker {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ColorPicker";
}
::windows_core::imp::interface_hierarchy!(
    ColorPicker, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for ColorPicker {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ColorPicker {}
impl ::windows_core::CanTryInto<super::UIElement> for ColorPicker {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ColorPicker {}
unsafe impl ::core::marker::Send for ColorPicker {}
unsafe impl ::core::marker::Sync for ColorPicker {}
#[repr(transparent)]
pub struct ColumnDefinition(::windows_core::IUnknown);
impl ColumnDefinition {
    pub fn new() -> ::windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows_core::imp::IGenericFactory) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            ColumnDefinition,
            ::windows_core::imp::IGenericFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Width(&self) -> ::windows_core::Result<super::GridLength> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Width)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetWidth(&self, value: super::GridLength) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetWidth)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MaxWidth(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MaxWidth)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMaxWidth)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MinWidth(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MinWidth)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMinWidth)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn ActualWidth(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualWidth)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn WidthProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::IColumnDefinitionStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .WidthProperty)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        })
    }
    pub fn MaxWidthProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::IColumnDefinitionStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MaxWidthProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn MinWidthProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::IColumnDefinitionStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MinWidthProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn GetValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .ClearValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn ReadLocalValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ReadLocalValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetAnimationBaseValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
        P1: ::windows_core::IntoParam<super::DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RegisterPropertyChangedCallback)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    callback.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject2,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .UnregisterPropertyChangedCallback)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    token,
                )
                .ok()
        }
    }
    #[doc(hidden)]
    pub fn IColumnDefinitionStatics<
        R,
        F: FnOnce(&IColumnDefinitionStatics) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            ColumnDefinition,
            IColumnDefinitionStatics,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::cmp::PartialEq for ColumnDefinition {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ColumnDefinition {}
impl ::core::fmt::Debug for ColumnDefinition {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ColumnDefinition").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ColumnDefinition {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ColumnDefinition;{f7f1b229-f024-467f-970a-7e705615db7b})",
    );
}
impl ::core::clone::Clone for ColumnDefinition {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ColumnDefinition {
    type Vtable = IColumnDefinition_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ColumnDefinition {
    const IID: ::windows_core::GUID = <IColumnDefinition as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ColumnDefinition {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ColumnDefinition";
}
::windows_core::imp::interface_hierarchy!(
    ColumnDefinition, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::DependencyObject> for ColumnDefinition {}
unsafe impl ::core::marker::Send for ColumnDefinition {}
unsafe impl ::core::marker::Sync for ColumnDefinition {}
#[repr(transparent)]
pub struct ColumnDefinitionCollection(::windows_core::IUnknown);
impl ColumnDefinitionCollection {
    pub fn First(
        &self,
    ) -> ::windows_core::Result<
        super::super::super::Foundation::Collections::IIterator<ColumnDefinition>,
    > {
        let this = &::windows_core::ComInterface::cast::<
            super::super::super::Foundation::Collections::IIterable<ColumnDefinition>,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .First)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Append<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ColumnDefinition>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .Append)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
}
impl ::core::cmp::PartialEq for ColumnDefinitionCollection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ColumnDefinitionCollection {}
impl ::core::fmt::Debug for ColumnDefinitionCollection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ColumnDefinitionCollection").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ColumnDefinitionCollection {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ColumnDefinitionCollection;pinterface({913337e9-11a1-4345-a3a2-4e7f956e222d};rc(Windows.UI.Xaml.Controls.ColumnDefinition;{f7f1b229-f024-467f-970a-7e705615db7b})))",
    );
}
impl ::core::clone::Clone for ColumnDefinitionCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ColumnDefinitionCollection {
    type Vtable = super::super::super::Foundation::Collections::IVector_Vtbl<
        ColumnDefinition,
    >;
}
unsafe impl ::windows_core::ComInterface for ColumnDefinitionCollection {
    const IID: ::windows_core::GUID = <super::super::super::Foundation::Collections::IVector<
        ColumnDefinition,
    > as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ColumnDefinitionCollection {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ColumnDefinitionCollection";
}
impl ::core::iter::IntoIterator for ColumnDefinitionCollection {
    type Item = ColumnDefinition;
    type IntoIter = super::super::super::Foundation::Collections::VectorIterator<
        Self::Item,
    >;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
impl ::core::iter::IntoIterator for &ColumnDefinitionCollection {
    type Item = ColumnDefinition;
    type IntoIter = super::super::super::Foundation::Collections::VectorIterator<
        Self::Item,
    >;
    fn into_iter(self) -> Self::IntoIter {
        super::super::super::Foundation::Collections::VectorIterator::new(
            ::windows_core::ComInterface::cast(self).ok(),
        )
    }
}
::windows_core::imp::interface_hierarchy!(
    ColumnDefinitionCollection, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<
    super::super::super::Foundation::Collections::IIterable<ColumnDefinition>,
> for ColumnDefinitionCollection {}
impl ::windows_core::CanTryInto<
    super::super::super::Foundation::Collections::IVector<ColumnDefinition>,
> for ColumnDefinitionCollection {}
unsafe impl ::core::marker::Send for ColumnDefinitionCollection {}
unsafe impl ::core::marker::Sync for ColumnDefinitionCollection {}
#[repr(transparent)]
pub struct ComboBox(::windows_core::IUnknown);
impl ComboBox {}
impl ::core::cmp::PartialEq for ComboBox {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ComboBox {}
impl ::core::fmt::Debug for ComboBox {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ComboBox").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ComboBox {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ComboBox;{b9a8d05c-ac97-47f1-a5f4-3f9f4d4b116c})",
    );
}
impl ::core::clone::Clone for ComboBox {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ComboBox {
    type Vtable = IComboBox_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ComboBox {
    const IID: ::windows_core::GUID = <IComboBox as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ComboBox {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ComboBox";
}
::windows_core::imp::interface_hierarchy!(
    ComboBox, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IItemContainerMapping> for ComboBox {}
impl ::windows_core::CanTryInto<Primitives::Selector> for ComboBox {}
impl ::windows_core::CanTryInto<ItemsControl> for ComboBox {}
impl ::windows_core::CanTryInto<Control> for ComboBox {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ComboBox {}
impl ::windows_core::CanTryInto<super::UIElement> for ComboBox {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ComboBox {}
unsafe impl ::core::marker::Send for ComboBox {}
unsafe impl ::core::marker::Sync for ComboBox {}
#[repr(transparent)]
pub struct ComboBoxItem(::windows_core::IUnknown);
impl ComboBoxItem {}
impl ::core::cmp::PartialEq for ComboBoxItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ComboBoxItem {}
impl ::core::fmt::Debug for ComboBoxItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ComboBoxItem").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ComboBoxItem {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ComboBoxItem;{993fd6d2-2aae-4f3b-b44d-5648f4d06114})",
    );
}
impl ::core::clone::Clone for ComboBoxItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ComboBoxItem {
    type Vtable = IComboBoxItem_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ComboBoxItem {
    const IID: ::windows_core::GUID = <IComboBoxItem as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ComboBoxItem {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ComboBoxItem";
}
::windows_core::imp::interface_hierarchy!(
    ComboBoxItem, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Primitives::SelectorItem> for ComboBoxItem {}
impl ::windows_core::CanTryInto<ContentControl> for ComboBoxItem {}
impl ::windows_core::CanTryInto<Control> for ComboBoxItem {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ComboBoxItem {}
impl ::windows_core::CanTryInto<super::UIElement> for ComboBoxItem {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ComboBoxItem {}
unsafe impl ::core::marker::Send for ComboBoxItem {}
unsafe impl ::core::marker::Sync for ComboBoxItem {}
#[repr(transparent)]
pub struct ComboBoxTextSubmittedEventArgs(::windows_core::IUnknown);
impl ComboBoxTextSubmittedEventArgs {}
impl ::core::cmp::PartialEq for ComboBoxTextSubmittedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ComboBoxTextSubmittedEventArgs {}
impl ::core::fmt::Debug for ComboBoxTextSubmittedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ComboBoxTextSubmittedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ComboBoxTextSubmittedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ComboBoxTextSubmittedEventArgs;{cb698cbb-6879-558e-af82-df1d08f62afa})",
    );
}
impl ::core::clone::Clone for ComboBoxTextSubmittedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ComboBoxTextSubmittedEventArgs {
    type Vtable = IComboBoxTextSubmittedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ComboBoxTextSubmittedEventArgs {
    const IID: ::windows_core::GUID = <IComboBoxTextSubmittedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ComboBoxTextSubmittedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ComboBoxTextSubmittedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    ComboBoxTextSubmittedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ComboBoxTextSubmittedEventArgs {}
unsafe impl ::core::marker::Sync for ComboBoxTextSubmittedEventArgs {}
#[repr(transparent)]
pub struct CommandBar(::windows_core::IUnknown);
impl CommandBar {}
impl ::core::cmp::PartialEq for CommandBar {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CommandBar {}
impl ::core::fmt::Debug for CommandBar {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CommandBar").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for CommandBar {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.CommandBar;{98bc4280-4a3d-4cee-bd07-22ce94c5af76})",
    );
}
impl ::core::clone::Clone for CommandBar {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for CommandBar {
    type Vtable = ICommandBar_Vtbl;
}
unsafe impl ::windows_core::ComInterface for CommandBar {
    const IID: ::windows_core::GUID = <ICommandBar as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for CommandBar {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.CommandBar";
}
::windows_core::imp::interface_hierarchy!(
    CommandBar, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<AppBar> for CommandBar {}
impl ::windows_core::CanTryInto<ContentControl> for CommandBar {}
impl ::windows_core::CanTryInto<Control> for CommandBar {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for CommandBar {}
impl ::windows_core::CanTryInto<super::UIElement> for CommandBar {}
impl ::windows_core::CanTryInto<super::DependencyObject> for CommandBar {}
unsafe impl ::core::marker::Send for CommandBar {}
unsafe impl ::core::marker::Sync for CommandBar {}
#[repr(transparent)]
pub struct CommandBarFlyout(::windows_core::IUnknown);
impl CommandBarFlyout {}
impl ::core::cmp::PartialEq for CommandBarFlyout {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CommandBarFlyout {}
impl ::core::fmt::Debug for CommandBarFlyout {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CommandBarFlyout").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for CommandBarFlyout {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.CommandBarFlyout;{fecd2c4d-f16a-58cd-8aca-db0f046f25c3})",
    );
}
impl ::core::clone::Clone for CommandBarFlyout {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for CommandBarFlyout {
    type Vtable = ICommandBarFlyout_Vtbl;
}
unsafe impl ::windows_core::ComInterface for CommandBarFlyout {
    const IID: ::windows_core::GUID = <ICommandBarFlyout as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for CommandBarFlyout {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.CommandBarFlyout";
}
::windows_core::imp::interface_hierarchy!(
    CommandBarFlyout, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Primitives::FlyoutBase> for CommandBarFlyout {}
impl ::windows_core::CanTryInto<super::DependencyObject> for CommandBarFlyout {}
unsafe impl ::core::marker::Send for CommandBarFlyout {}
unsafe impl ::core::marker::Sync for CommandBarFlyout {}
#[repr(transparent)]
pub struct CommandBarOverflowPresenter(::windows_core::IUnknown);
impl CommandBarOverflowPresenter {}
impl ::core::cmp::PartialEq for CommandBarOverflowPresenter {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CommandBarOverflowPresenter {}
impl ::core::fmt::Debug for CommandBarOverflowPresenter {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CommandBarOverflowPresenter").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for CommandBarOverflowPresenter {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.CommandBarOverflowPresenter;{6e7a9427-58ef-4366-a017-18c193d56b14})",
    );
}
impl ::core::clone::Clone for CommandBarOverflowPresenter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for CommandBarOverflowPresenter {
    type Vtable = ICommandBarOverflowPresenter_Vtbl;
}
unsafe impl ::windows_core::ComInterface for CommandBarOverflowPresenter {
    const IID: ::windows_core::GUID = <ICommandBarOverflowPresenter as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for CommandBarOverflowPresenter {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.CommandBarOverflowPresenter";
}
::windows_core::imp::interface_hierarchy!(
    CommandBarOverflowPresenter, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IItemContainerMapping> for CommandBarOverflowPresenter {}
impl ::windows_core::CanTryInto<ItemsControl> for CommandBarOverflowPresenter {}
impl ::windows_core::CanTryInto<Control> for CommandBarOverflowPresenter {}
impl ::windows_core::CanTryInto<super::FrameworkElement>
for CommandBarOverflowPresenter {}
impl ::windows_core::CanTryInto<super::UIElement> for CommandBarOverflowPresenter {}
impl ::windows_core::CanTryInto<super::DependencyObject>
for CommandBarOverflowPresenter {}
unsafe impl ::core::marker::Send for CommandBarOverflowPresenter {}
unsafe impl ::core::marker::Sync for CommandBarOverflowPresenter {}
#[repr(transparent)]
pub struct ContainerContentChangingEventArgs(::windows_core::IUnknown);
impl ContainerContentChangingEventArgs {}
impl ::core::cmp::PartialEq for ContainerContentChangingEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ContainerContentChangingEventArgs {}
impl ::core::fmt::Debug for ContainerContentChangingEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ContainerContentChangingEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ContainerContentChangingEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs;{07deeaa7-018f-4dda-b399-fd4e13a31bea})",
    );
}
impl ::core::clone::Clone for ContainerContentChangingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ContainerContentChangingEventArgs {
    type Vtable = IContainerContentChangingEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ContainerContentChangingEventArgs {
    const IID: ::windows_core::GUID = <IContainerContentChangingEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ContainerContentChangingEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    ContainerContentChangingEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ContainerContentChangingEventArgs {}
unsafe impl ::core::marker::Sync for ContainerContentChangingEventArgs {}
#[repr(transparent)]
pub struct ContentControl(::windows_core::IUnknown);
impl ContentControl {}
impl ::core::cmp::PartialEq for ContentControl {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ContentControl {}
impl ::core::fmt::Debug for ContentControl {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ContentControl").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ContentControl {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ContentControl;{a26dd1dc-cd44-435c-be94-01d6241c231c})",
    );
}
impl ::core::clone::Clone for ContentControl {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ContentControl {
    type Vtable = IContentControl_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ContentControl {
    const IID: ::windows_core::GUID = <IContentControl as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ContentControl {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ContentControl";
}
::windows_core::imp::interface_hierarchy!(
    ContentControl, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for ContentControl {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ContentControl {}
impl ::windows_core::CanTryInto<super::UIElement> for ContentControl {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ContentControl {}
unsafe impl ::core::marker::Send for ContentControl {}
unsafe impl ::core::marker::Sync for ContentControl {}
#[repr(transparent)]
pub struct ContentDialog(::windows_core::IUnknown);
impl ContentDialog {}
impl ::core::cmp::PartialEq for ContentDialog {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ContentDialog {}
impl ::core::fmt::Debug for ContentDialog {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ContentDialog").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ContentDialog {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ContentDialog;{38dc4404-d24e-40d8-9415-349464c1afdc})",
    );
}
impl ::core::clone::Clone for ContentDialog {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ContentDialog {
    type Vtable = IContentDialog_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ContentDialog {
    const IID: ::windows_core::GUID = <IContentDialog as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ContentDialog {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ContentDialog";
}
::windows_core::imp::interface_hierarchy!(
    ContentDialog, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ContentControl> for ContentDialog {}
impl ::windows_core::CanTryInto<Control> for ContentDialog {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ContentDialog {}
impl ::windows_core::CanTryInto<super::UIElement> for ContentDialog {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ContentDialog {}
unsafe impl ::core::marker::Send for ContentDialog {}
unsafe impl ::core::marker::Sync for ContentDialog {}
#[repr(transparent)]
pub struct ContentDialogButtonClickDeferral(::windows_core::IUnknown);
impl ContentDialogButtonClickDeferral {}
impl ::core::cmp::PartialEq for ContentDialogButtonClickDeferral {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ContentDialogButtonClickDeferral {}
impl ::core::fmt::Debug for ContentDialogButtonClickDeferral {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ContentDialogButtonClickDeferral").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ContentDialogButtonClickDeferral {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ContentDialogButtonClickDeferral;{bd0d3637-19ce-4946-8e77-bd03fe8ebe03})",
    );
}
impl ::core::clone::Clone for ContentDialogButtonClickDeferral {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ContentDialogButtonClickDeferral {
    type Vtable = IContentDialogButtonClickDeferral_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ContentDialogButtonClickDeferral {
    const IID: ::windows_core::GUID = <IContentDialogButtonClickDeferral as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ContentDialogButtonClickDeferral {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ContentDialogButtonClickDeferral";
}
::windows_core::imp::interface_hierarchy!(
    ContentDialogButtonClickDeferral, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ContentDialogButtonClickDeferral {}
unsafe impl ::core::marker::Sync for ContentDialogButtonClickDeferral {}
#[repr(transparent)]
pub struct ContentDialogButtonClickEventArgs(::windows_core::IUnknown);
impl ContentDialogButtonClickEventArgs {}
impl ::core::cmp::PartialEq for ContentDialogButtonClickEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ContentDialogButtonClickEventArgs {}
impl ::core::fmt::Debug for ContentDialogButtonClickEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ContentDialogButtonClickEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ContentDialogButtonClickEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ContentDialogButtonClickEventArgs;{5f34c205-8afa-4cf2-8ca0-264d73bed63d})",
    );
}
impl ::core::clone::Clone for ContentDialogButtonClickEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ContentDialogButtonClickEventArgs {
    type Vtable = IContentDialogButtonClickEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ContentDialogButtonClickEventArgs {
    const IID: ::windows_core::GUID = <IContentDialogButtonClickEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ContentDialogButtonClickEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ContentDialogButtonClickEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    ContentDialogButtonClickEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ContentDialogButtonClickEventArgs {}
unsafe impl ::core::marker::Sync for ContentDialogButtonClickEventArgs {}
#[repr(transparent)]
pub struct ContentDialogClosedEventArgs(::windows_core::IUnknown);
impl ContentDialogClosedEventArgs {}
impl ::core::cmp::PartialEq for ContentDialogClosedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ContentDialogClosedEventArgs {}
impl ::core::fmt::Debug for ContentDialogClosedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ContentDialogClosedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ContentDialogClosedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ContentDialogClosedEventArgs;{905522ef-2cba-4af8-b666-cc36c22732fb})",
    );
}
impl ::core::clone::Clone for ContentDialogClosedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ContentDialogClosedEventArgs {
    type Vtable = IContentDialogClosedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ContentDialogClosedEventArgs {
    const IID: ::windows_core::GUID = <IContentDialogClosedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ContentDialogClosedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ContentDialogClosedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    ContentDialogClosedEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ContentDialogClosedEventArgs {}
unsafe impl ::core::marker::Sync for ContentDialogClosedEventArgs {}
#[repr(transparent)]
pub struct ContentDialogClosingDeferral(::windows_core::IUnknown);
impl ContentDialogClosingDeferral {}
impl ::core::cmp::PartialEq for ContentDialogClosingDeferral {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ContentDialogClosingDeferral {}
impl ::core::fmt::Debug for ContentDialogClosingDeferral {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ContentDialogClosingDeferral").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ContentDialogClosingDeferral {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ContentDialogClosingDeferral;{215d4d11-7e30-4cb9-a710-5a4f9cca8b42})",
    );
}
impl ::core::clone::Clone for ContentDialogClosingDeferral {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ContentDialogClosingDeferral {
    type Vtable = IContentDialogClosingDeferral_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ContentDialogClosingDeferral {
    const IID: ::windows_core::GUID = <IContentDialogClosingDeferral as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ContentDialogClosingDeferral {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ContentDialogClosingDeferral";
}
::windows_core::imp::interface_hierarchy!(
    ContentDialogClosingDeferral, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ContentDialogClosingDeferral {}
unsafe impl ::core::marker::Sync for ContentDialogClosingDeferral {}
#[repr(transparent)]
pub struct ContentDialogClosingEventArgs(::windows_core::IUnknown);
impl ContentDialogClosingEventArgs {}
impl ::core::cmp::PartialEq for ContentDialogClosingEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ContentDialogClosingEventArgs {}
impl ::core::fmt::Debug for ContentDialogClosingEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ContentDialogClosingEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ContentDialogClosingEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ContentDialogClosingEventArgs;{db3c1c34-3bbf-47d4-be4f-c9ec115918b9})",
    );
}
impl ::core::clone::Clone for ContentDialogClosingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ContentDialogClosingEventArgs {
    type Vtable = IContentDialogClosingEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ContentDialogClosingEventArgs {
    const IID: ::windows_core::GUID = <IContentDialogClosingEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ContentDialogClosingEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ContentDialogClosingEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    ContentDialogClosingEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ContentDialogClosingEventArgs {}
unsafe impl ::core::marker::Sync for ContentDialogClosingEventArgs {}
#[repr(transparent)]
pub struct ContentDialogOpenedEventArgs(::windows_core::IUnknown);
impl ContentDialogOpenedEventArgs {}
impl ::core::cmp::PartialEq for ContentDialogOpenedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ContentDialogOpenedEventArgs {}
impl ::core::fmt::Debug for ContentDialogOpenedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ContentDialogOpenedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ContentDialogOpenedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ContentDialogOpenedEventArgs;{0966b315-5f59-4999-9e3e-374c0f174b04})",
    );
}
impl ::core::clone::Clone for ContentDialogOpenedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ContentDialogOpenedEventArgs {
    type Vtable = IContentDialogOpenedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ContentDialogOpenedEventArgs {
    const IID: ::windows_core::GUID = <IContentDialogOpenedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ContentDialogOpenedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ContentDialogOpenedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    ContentDialogOpenedEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ContentDialogOpenedEventArgs {}
unsafe impl ::core::marker::Sync for ContentDialogOpenedEventArgs {}
#[repr(transparent)]
pub struct ContentLinkChangedEventArgs(::windows_core::IUnknown);
impl ContentLinkChangedEventArgs {}
impl ::core::cmp::PartialEq for ContentLinkChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ContentLinkChangedEventArgs {}
impl ::core::fmt::Debug for ContentLinkChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ContentLinkChangedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ContentLinkChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ContentLinkChangedEventArgs;{64f3f1de-89fb-4b77-8b9b-191b6d19290a})",
    );
}
impl ::core::clone::Clone for ContentLinkChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ContentLinkChangedEventArgs {
    type Vtable = IContentLinkChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ContentLinkChangedEventArgs {
    const IID: ::windows_core::GUID = <IContentLinkChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ContentLinkChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ContentLinkChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    ContentLinkChangedEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ContentLinkChangedEventArgs {}
unsafe impl ::core::marker::Sync for ContentLinkChangedEventArgs {}
#[repr(transparent)]
pub struct ContentPresenter(::windows_core::IUnknown);
impl ContentPresenter {}
impl ::core::cmp::PartialEq for ContentPresenter {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ContentPresenter {}
impl ::core::fmt::Debug for ContentPresenter {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ContentPresenter").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ContentPresenter {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ContentPresenter;{79fde5b4-cd37-491c-8845-daf472defff6})",
    );
}
impl ::core::clone::Clone for ContentPresenter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ContentPresenter {
    type Vtable = IContentPresenter_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ContentPresenter {
    const IID: ::windows_core::GUID = <IContentPresenter as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ContentPresenter {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ContentPresenter";
}
::windows_core::imp::interface_hierarchy!(
    ContentPresenter, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::FrameworkElement> for ContentPresenter {}
impl ::windows_core::CanTryInto<super::UIElement> for ContentPresenter {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ContentPresenter {}
unsafe impl ::core::marker::Send for ContentPresenter {}
unsafe impl ::core::marker::Sync for ContentPresenter {}
#[repr(transparent)]
pub struct ContextMenuEventArgs(::windows_core::IUnknown);
impl ContextMenuEventArgs {}
impl ::core::cmp::PartialEq for ContextMenuEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ContextMenuEventArgs {}
impl ::core::fmt::Debug for ContextMenuEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ContextMenuEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ContextMenuEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ContextMenuEventArgs;{1f7df263-c14b-4528-b6f0-637999d83cc6})",
    );
}
impl ::core::clone::Clone for ContextMenuEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ContextMenuEventArgs {
    type Vtable = IContextMenuEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ContextMenuEventArgs {
    const IID: ::windows_core::GUID = <IContextMenuEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ContextMenuEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ContextMenuEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    ContextMenuEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::RoutedEventArgs> for ContextMenuEventArgs {}
unsafe impl ::core::marker::Send for ContextMenuEventArgs {}
unsafe impl ::core::marker::Sync for ContextMenuEventArgs {}
#[repr(transparent)]
pub struct Control(::windows_core::IUnknown);
impl Control {}
impl ::core::cmp::PartialEq for Control {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Control {}
impl ::core::fmt::Debug for Control {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Control").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for Control {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.Control;{a8912263-2951-4f58-a9c5-5a134eaa7f07})",
    );
}
impl ::core::clone::Clone for Control {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for Control {
    type Vtable = IControl_Vtbl;
}
unsafe impl ::windows_core::ComInterface for Control {
    const IID: ::windows_core::GUID = <IControl as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for Control {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.Control";
}
::windows_core::imp::interface_hierarchy!(
    Control, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::FrameworkElement> for Control {}
impl ::windows_core::CanTryInto<super::UIElement> for Control {}
impl ::windows_core::CanTryInto<super::DependencyObject> for Control {}
unsafe impl ::core::marker::Send for Control {}
unsafe impl ::core::marker::Sync for Control {}
#[repr(transparent)]
pub struct ControlTemplate(::windows_core::IUnknown);
impl ControlTemplate {}
impl ::core::cmp::PartialEq for ControlTemplate {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ControlTemplate {}
impl ::core::fmt::Debug for ControlTemplate {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ControlTemplate").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ControlTemplate {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ControlTemplate;{efd2418e-41e0-48bb-8b82-91eda1ba3fe2})",
    );
}
impl ::core::clone::Clone for ControlTemplate {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ControlTemplate {
    type Vtable = IControlTemplate_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ControlTemplate {
    const IID: ::windows_core::GUID = <IControlTemplate as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ControlTemplate {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ControlTemplate";
}
::windows_core::imp::interface_hierarchy!(
    ControlTemplate, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::FrameworkTemplate> for ControlTemplate {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ControlTemplate {}
unsafe impl ::core::marker::Send for ControlTemplate {}
unsafe impl ::core::marker::Sync for ControlTemplate {}
#[repr(transparent)]
pub struct DataTemplateSelector(::windows_core::IUnknown);
impl DataTemplateSelector {}
impl ::core::cmp::PartialEq for DataTemplateSelector {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DataTemplateSelector {}
impl ::core::fmt::Debug for DataTemplateSelector {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DataTemplateSelector").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for DataTemplateSelector {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.DataTemplateSelector;{a907d496-46a0-4cd7-8dbe-f9a581df60b1})",
    );
}
impl ::core::clone::Clone for DataTemplateSelector {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for DataTemplateSelector {
    type Vtable = IDataTemplateSelector_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DataTemplateSelector {
    const IID: ::windows_core::GUID = <IDataTemplateSelector as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DataTemplateSelector {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.DataTemplateSelector";
}
::windows_core::imp::interface_hierarchy!(
    DataTemplateSelector, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::IElementFactory> for DataTemplateSelector {}
unsafe impl ::core::marker::Send for DataTemplateSelector {}
unsafe impl ::core::marker::Sync for DataTemplateSelector {}
#[repr(transparent)]
pub struct DatePickedEventArgs(::windows_core::IUnknown);
impl DatePickedEventArgs {}
impl ::core::cmp::PartialEq for DatePickedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DatePickedEventArgs {}
impl ::core::fmt::Debug for DatePickedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DatePickedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for DatePickedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.DatePickedEventArgs;{a1527b12-59c1-4521-b28c-b176675e7c5a})",
    );
}
impl ::core::clone::Clone for DatePickedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for DatePickedEventArgs {
    type Vtable = IDatePickedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DatePickedEventArgs {
    const IID: ::windows_core::GUID = <IDatePickedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DatePickedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.DatePickedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    DatePickedEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::DependencyObject> for DatePickedEventArgs {}
unsafe impl ::core::marker::Send for DatePickedEventArgs {}
unsafe impl ::core::marker::Sync for DatePickedEventArgs {}
#[repr(transparent)]
pub struct DatePicker(::windows_core::IUnknown);
impl DatePicker {}
impl ::core::cmp::PartialEq for DatePicker {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DatePicker {}
impl ::core::fmt::Debug for DatePicker {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DatePicker").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for DatePicker {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.DatePicker;{06da3946-08b8-4103-8b8a-093efd6a7657})",
    );
}
impl ::core::clone::Clone for DatePicker {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for DatePicker {
    type Vtable = IDatePicker_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DatePicker {
    const IID: ::windows_core::GUID = <IDatePicker as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DatePicker {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.DatePicker";
}
::windows_core::imp::interface_hierarchy!(
    DatePicker, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for DatePicker {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for DatePicker {}
impl ::windows_core::CanTryInto<super::UIElement> for DatePicker {}
impl ::windows_core::CanTryInto<super::DependencyObject> for DatePicker {}
unsafe impl ::core::marker::Send for DatePicker {}
unsafe impl ::core::marker::Sync for DatePicker {}
#[repr(transparent)]
pub struct DatePickerFlyout(::windows_core::IUnknown);
impl DatePickerFlyout {}
impl ::core::cmp::PartialEq for DatePickerFlyout {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DatePickerFlyout {}
impl ::core::fmt::Debug for DatePickerFlyout {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DatePickerFlyout").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for DatePickerFlyout {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.DatePickerFlyout;{fbf33b1a-a3a4-4df8-9228-23a5ac27df4e})",
    );
}
impl ::core::clone::Clone for DatePickerFlyout {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for DatePickerFlyout {
    type Vtable = IDatePickerFlyout_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DatePickerFlyout {
    const IID: ::windows_core::GUID = <IDatePickerFlyout as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DatePickerFlyout {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.DatePickerFlyout";
}
::windows_core::imp::interface_hierarchy!(
    DatePickerFlyout, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Primitives::PickerFlyoutBase> for DatePickerFlyout {}
impl ::windows_core::CanTryInto<Primitives::FlyoutBase> for DatePickerFlyout {}
impl ::windows_core::CanTryInto<super::DependencyObject> for DatePickerFlyout {}
unsafe impl ::core::marker::Send for DatePickerFlyout {}
unsafe impl ::core::marker::Sync for DatePickerFlyout {}
#[repr(transparent)]
pub struct DatePickerFlyoutItem(::windows_core::IUnknown);
impl DatePickerFlyoutItem {}
impl ::core::cmp::PartialEq for DatePickerFlyoutItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DatePickerFlyoutItem {}
impl ::core::fmt::Debug for DatePickerFlyoutItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DatePickerFlyoutItem").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for DatePickerFlyoutItem {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.DatePickerFlyoutItem;{9d9bc289-00d2-4aac-9c85-d74f06367887})",
    );
}
impl ::core::clone::Clone for DatePickerFlyoutItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for DatePickerFlyoutItem {
    type Vtable = IDatePickerFlyoutItem_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DatePickerFlyoutItem {
    const IID: ::windows_core::GUID = <IDatePickerFlyoutItem as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DatePickerFlyoutItem {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.DatePickerFlyoutItem";
}
::windows_core::imp::interface_hierarchy!(
    DatePickerFlyoutItem, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::DependencyObject> for DatePickerFlyoutItem {}
unsafe impl ::core::marker::Send for DatePickerFlyoutItem {}
unsafe impl ::core::marker::Sync for DatePickerFlyoutItem {}
#[repr(transparent)]
pub struct DatePickerFlyoutPresenter(::windows_core::IUnknown);
impl DatePickerFlyoutPresenter {}
impl ::core::cmp::PartialEq for DatePickerFlyoutPresenter {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DatePickerFlyoutPresenter {}
impl ::core::fmt::Debug for DatePickerFlyoutPresenter {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DatePickerFlyoutPresenter").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for DatePickerFlyoutPresenter {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.DatePickerFlyoutPresenter;{7c62f70e-2ddc-4381-832f-54cbdfaa849a})",
    );
}
impl ::core::clone::Clone for DatePickerFlyoutPresenter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for DatePickerFlyoutPresenter {
    type Vtable = IDatePickerFlyoutPresenter_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DatePickerFlyoutPresenter {
    const IID: ::windows_core::GUID = <IDatePickerFlyoutPresenter as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DatePickerFlyoutPresenter {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.DatePickerFlyoutPresenter";
}
::windows_core::imp::interface_hierarchy!(
    DatePickerFlyoutPresenter, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for DatePickerFlyoutPresenter {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for DatePickerFlyoutPresenter {}
impl ::windows_core::CanTryInto<super::UIElement> for DatePickerFlyoutPresenter {}
impl ::windows_core::CanTryInto<super::DependencyObject> for DatePickerFlyoutPresenter {}
unsafe impl ::core::marker::Send for DatePickerFlyoutPresenter {}
unsafe impl ::core::marker::Sync for DatePickerFlyoutPresenter {}
#[repr(transparent)]
pub struct DatePickerSelectedValueChangedEventArgs(::windows_core::IUnknown);
impl DatePickerSelectedValueChangedEventArgs {}
impl ::core::cmp::PartialEq for DatePickerSelectedValueChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DatePickerSelectedValueChangedEventArgs {}
impl ::core::fmt::Debug for DatePickerSelectedValueChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DatePickerSelectedValueChangedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for DatePickerSelectedValueChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.DatePickerSelectedValueChangedEventArgs;{564dceed-744a-5c3a-9bd2-4dcd9919a7b7})",
    );
}
impl ::core::clone::Clone for DatePickerSelectedValueChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for DatePickerSelectedValueChangedEventArgs {
    type Vtable = IDatePickerSelectedValueChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DatePickerSelectedValueChangedEventArgs {
    const IID: ::windows_core::GUID = <IDatePickerSelectedValueChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DatePickerSelectedValueChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.DatePickerSelectedValueChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    DatePickerSelectedValueChangedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for DatePickerSelectedValueChangedEventArgs {}
unsafe impl ::core::marker::Sync for DatePickerSelectedValueChangedEventArgs {}
#[repr(transparent)]
pub struct DatePickerValueChangedEventArgs(::windows_core::IUnknown);
impl DatePickerValueChangedEventArgs {}
impl ::core::cmp::PartialEq for DatePickerValueChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DatePickerValueChangedEventArgs {}
impl ::core::fmt::Debug for DatePickerValueChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DatePickerValueChangedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for DatePickerValueChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.DatePickerValueChangedEventArgs;{1ae661b2-b1b4-4273-96e0-19daff187446})",
    );
}
impl ::core::clone::Clone for DatePickerValueChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for DatePickerValueChangedEventArgs {
    type Vtable = IDatePickerValueChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DatePickerValueChangedEventArgs {
    const IID: ::windows_core::GUID = <IDatePickerValueChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DatePickerValueChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.DatePickerValueChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    DatePickerValueChangedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for DatePickerValueChangedEventArgs {}
unsafe impl ::core::marker::Sync for DatePickerValueChangedEventArgs {}
#[repr(transparent)]
pub struct DragItemsCompletedEventArgs(::windows_core::IUnknown);
impl DragItemsCompletedEventArgs {}
impl ::core::cmp::PartialEq for DragItemsCompletedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DragItemsCompletedEventArgs {}
impl ::core::fmt::Debug for DragItemsCompletedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DragItemsCompletedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for DragItemsCompletedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.DragItemsCompletedEventArgs;{af05f22f-9e78-4b21-9a8e-41c2d1367a2a})",
    );
}
impl ::core::clone::Clone for DragItemsCompletedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for DragItemsCompletedEventArgs {
    type Vtable = IDragItemsCompletedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DragItemsCompletedEventArgs {
    const IID: ::windows_core::GUID = <IDragItemsCompletedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DragItemsCompletedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.DragItemsCompletedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    DragItemsCompletedEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for DragItemsCompletedEventArgs {}
unsafe impl ::core::marker::Sync for DragItemsCompletedEventArgs {}
#[repr(transparent)]
pub struct DragItemsStartingEventArgs(::windows_core::IUnknown);
impl DragItemsStartingEventArgs {}
impl ::core::cmp::PartialEq for DragItemsStartingEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DragItemsStartingEventArgs {}
impl ::core::fmt::Debug for DragItemsStartingEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DragItemsStartingEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for DragItemsStartingEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.DragItemsStartingEventArgs;{71cf215c-daed-4783-aa11-dc574d2713e9})",
    );
}
impl ::core::clone::Clone for DragItemsStartingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for DragItemsStartingEventArgs {
    type Vtable = IDragItemsStartingEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DragItemsStartingEventArgs {
    const IID: ::windows_core::GUID = <IDragItemsStartingEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DragItemsStartingEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.DragItemsStartingEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    DragItemsStartingEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for DragItemsStartingEventArgs {}
unsafe impl ::core::marker::Sync for DragItemsStartingEventArgs {}
#[repr(transparent)]
pub struct DropDownButton(::windows_core::IUnknown);
impl DropDownButton {}
impl ::core::cmp::PartialEq for DropDownButton {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DropDownButton {}
impl ::core::fmt::Debug for DropDownButton {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DropDownButton").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for DropDownButton {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.DropDownButton;{671f74e6-2a27-5fa8-b0a2-79b2e71ebd87})",
    );
}
impl ::core::clone::Clone for DropDownButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for DropDownButton {
    type Vtable = IDropDownButton_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DropDownButton {
    const IID: ::windows_core::GUID = <IDropDownButton as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DropDownButton {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.DropDownButton";
}
::windows_core::imp::interface_hierarchy!(
    DropDownButton, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Button> for DropDownButton {}
impl ::windows_core::CanTryInto<Primitives::ButtonBase> for DropDownButton {}
impl ::windows_core::CanTryInto<ContentControl> for DropDownButton {}
impl ::windows_core::CanTryInto<Control> for DropDownButton {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for DropDownButton {}
impl ::windows_core::CanTryInto<super::UIElement> for DropDownButton {}
impl ::windows_core::CanTryInto<super::DependencyObject> for DropDownButton {}
unsafe impl ::core::marker::Send for DropDownButton {}
unsafe impl ::core::marker::Sync for DropDownButton {}
#[repr(transparent)]
pub struct DropDownButtonAutomationPeer(::windows_core::IUnknown);
impl DropDownButtonAutomationPeer {}
impl ::core::cmp::PartialEq for DropDownButtonAutomationPeer {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DropDownButtonAutomationPeer {}
impl ::core::fmt::Debug for DropDownButtonAutomationPeer {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DropDownButtonAutomationPeer").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for DropDownButtonAutomationPeer {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.DropDownButtonAutomationPeer;{72f294f1-bff6-5d07-9db4-54134506bc80})",
    );
}
impl ::core::clone::Clone for DropDownButtonAutomationPeer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for DropDownButtonAutomationPeer {
    type Vtable = IDropDownButtonAutomationPeer_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DropDownButtonAutomationPeer {
    const IID: ::windows_core::GUID = <IDropDownButtonAutomationPeer as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DropDownButtonAutomationPeer {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.DropDownButtonAutomationPeer";
}
::windows_core::imp::interface_hierarchy!(
    DropDownButtonAutomationPeer, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::DependencyObject>
for DropDownButtonAutomationPeer {}
unsafe impl ::core::marker::Send for DropDownButtonAutomationPeer {}
unsafe impl ::core::marker::Sync for DropDownButtonAutomationPeer {}
#[repr(transparent)]
pub struct DynamicOverflowItemsChangingEventArgs(::windows_core::IUnknown);
impl DynamicOverflowItemsChangingEventArgs {}
impl ::core::cmp::PartialEq for DynamicOverflowItemsChangingEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DynamicOverflowItemsChangingEventArgs {}
impl ::core::fmt::Debug for DynamicOverflowItemsChangingEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DynamicOverflowItemsChangingEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for DynamicOverflowItemsChangingEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.DynamicOverflowItemsChangingEventArgs;{c93c736f-6f6e-4e43-90d9-9b46a0d88b9f})",
    );
}
impl ::core::clone::Clone for DynamicOverflowItemsChangingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for DynamicOverflowItemsChangingEventArgs {
    type Vtable = IDynamicOverflowItemsChangingEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DynamicOverflowItemsChangingEventArgs {
    const IID: ::windows_core::GUID = <IDynamicOverflowItemsChangingEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DynamicOverflowItemsChangingEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.DynamicOverflowItemsChangingEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    DynamicOverflowItemsChangingEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for DynamicOverflowItemsChangingEventArgs {}
unsafe impl ::core::marker::Sync for DynamicOverflowItemsChangingEventArgs {}
#[repr(transparent)]
pub struct FlipView(::windows_core::IUnknown);
impl FlipView {}
impl ::core::cmp::PartialEq for FlipView {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for FlipView {}
impl ::core::fmt::Debug for FlipView {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FlipView").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for FlipView {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.FlipView;{a1582f68-3d7d-4d3b-b71d-488eed1e3493})",
    );
}
impl ::core::clone::Clone for FlipView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for FlipView {
    type Vtable = IFlipView_Vtbl;
}
unsafe impl ::windows_core::ComInterface for FlipView {
    const IID: ::windows_core::GUID = <IFlipView as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for FlipView {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.FlipView";
}
::windows_core::imp::interface_hierarchy!(
    FlipView, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IItemContainerMapping> for FlipView {}
impl ::windows_core::CanTryInto<Primitives::Selector> for FlipView {}
impl ::windows_core::CanTryInto<ItemsControl> for FlipView {}
impl ::windows_core::CanTryInto<Control> for FlipView {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for FlipView {}
impl ::windows_core::CanTryInto<super::UIElement> for FlipView {}
impl ::windows_core::CanTryInto<super::DependencyObject> for FlipView {}
unsafe impl ::core::marker::Send for FlipView {}
unsafe impl ::core::marker::Sync for FlipView {}
#[repr(transparent)]
pub struct FlipViewItem(::windows_core::IUnknown);
impl FlipViewItem {}
impl ::core::cmp::PartialEq for FlipViewItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for FlipViewItem {}
impl ::core::fmt::Debug for FlipViewItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FlipViewItem").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for FlipViewItem {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.FlipViewItem;{56196565-ce2b-4bda-a36b-82a2b8b0d4c0})",
    );
}
impl ::core::clone::Clone for FlipViewItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for FlipViewItem {
    type Vtable = IFlipViewItem_Vtbl;
}
unsafe impl ::windows_core::ComInterface for FlipViewItem {
    const IID: ::windows_core::GUID = <IFlipViewItem as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for FlipViewItem {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.FlipViewItem";
}
::windows_core::imp::interface_hierarchy!(
    FlipViewItem, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Primitives::SelectorItem> for FlipViewItem {}
impl ::windows_core::CanTryInto<ContentControl> for FlipViewItem {}
impl ::windows_core::CanTryInto<Control> for FlipViewItem {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for FlipViewItem {}
impl ::windows_core::CanTryInto<super::UIElement> for FlipViewItem {}
impl ::windows_core::CanTryInto<super::DependencyObject> for FlipViewItem {}
unsafe impl ::core::marker::Send for FlipViewItem {}
unsafe impl ::core::marker::Sync for FlipViewItem {}
#[repr(transparent)]
pub struct Flyout(::windows_core::IUnknown);
impl Flyout {}
impl ::core::cmp::PartialEq for Flyout {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Flyout {}
impl ::core::fmt::Debug for Flyout {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Flyout").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for Flyout {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.Flyout;{6584ebdf-cbc7-4e19-843a-a14f24a793ea})",
    );
}
impl ::core::clone::Clone for Flyout {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for Flyout {
    type Vtable = IFlyout_Vtbl;
}
unsafe impl ::windows_core::ComInterface for Flyout {
    const IID: ::windows_core::GUID = <IFlyout as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for Flyout {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.Flyout";
}
::windows_core::imp::interface_hierarchy!(
    Flyout, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Primitives::FlyoutBase> for Flyout {}
impl ::windows_core::CanTryInto<super::DependencyObject> for Flyout {}
unsafe impl ::core::marker::Send for Flyout {}
unsafe impl ::core::marker::Sync for Flyout {}
#[repr(transparent)]
pub struct FlyoutPresenter(::windows_core::IUnknown);
impl FlyoutPresenter {}
impl ::core::cmp::PartialEq for FlyoutPresenter {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for FlyoutPresenter {}
impl ::core::fmt::Debug for FlyoutPresenter {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FlyoutPresenter").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for FlyoutPresenter {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.FlyoutPresenter;{827d5b79-e37b-46a5-8d44-63a11a580e83})",
    );
}
impl ::core::clone::Clone for FlyoutPresenter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for FlyoutPresenter {
    type Vtable = IFlyoutPresenter_Vtbl;
}
unsafe impl ::windows_core::ComInterface for FlyoutPresenter {
    const IID: ::windows_core::GUID = <IFlyoutPresenter as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for FlyoutPresenter {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.FlyoutPresenter";
}
::windows_core::imp::interface_hierarchy!(
    FlyoutPresenter, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ContentControl> for FlyoutPresenter {}
impl ::windows_core::CanTryInto<Control> for FlyoutPresenter {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for FlyoutPresenter {}
impl ::windows_core::CanTryInto<super::UIElement> for FlyoutPresenter {}
impl ::windows_core::CanTryInto<super::DependencyObject> for FlyoutPresenter {}
unsafe impl ::core::marker::Send for FlyoutPresenter {}
unsafe impl ::core::marker::Sync for FlyoutPresenter {}
#[repr(transparent)]
pub struct FocusDisengagedEventArgs(::windows_core::IUnknown);
impl FocusDisengagedEventArgs {}
impl ::core::cmp::PartialEq for FocusDisengagedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for FocusDisengagedEventArgs {}
impl ::core::fmt::Debug for FocusDisengagedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FocusDisengagedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for FocusDisengagedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.FocusDisengagedEventArgs;{5e14280f-953e-4cf8-b9ea-c530a1ce02ad})",
    );
}
impl ::core::clone::Clone for FocusDisengagedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for FocusDisengagedEventArgs {
    type Vtable = IFocusDisengagedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for FocusDisengagedEventArgs {
    const IID: ::windows_core::GUID = <IFocusDisengagedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for FocusDisengagedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.FocusDisengagedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    FocusDisengagedEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::RoutedEventArgs> for FocusDisengagedEventArgs {}
unsafe impl ::core::marker::Send for FocusDisengagedEventArgs {}
unsafe impl ::core::marker::Sync for FocusDisengagedEventArgs {}
#[repr(transparent)]
pub struct FocusEngagedEventArgs(::windows_core::IUnknown);
impl FocusEngagedEventArgs {}
impl ::core::cmp::PartialEq for FocusEngagedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for FocusEngagedEventArgs {}
impl ::core::fmt::Debug for FocusEngagedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FocusEngagedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for FocusEngagedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.FocusEngagedEventArgs;{a69fc352-da66-404c-823f-5358594e70bb})",
    );
}
impl ::core::clone::Clone for FocusEngagedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for FocusEngagedEventArgs {
    type Vtable = IFocusEngagedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for FocusEngagedEventArgs {
    const IID: ::windows_core::GUID = <IFocusEngagedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for FocusEngagedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.FocusEngagedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    FocusEngagedEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::RoutedEventArgs> for FocusEngagedEventArgs {}
unsafe impl ::core::marker::Send for FocusEngagedEventArgs {}
unsafe impl ::core::marker::Sync for FocusEngagedEventArgs {}
#[repr(transparent)]
pub struct FontIcon(::windows_core::IUnknown);
impl FontIcon {
    pub fn GetValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .ClearValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn ReadLocalValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ReadLocalValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetAnimationBaseValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
        P1: ::windows_core::IntoParam<super::DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RegisterPropertyChangedCallback)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    callback.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject2,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .UnregisterPropertyChangedCallback)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    token,
                )
                .ok()
        }
    }
    pub fn Glyph(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Glyph)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetGlyph(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetGlyph)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn FontSize(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontSize)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFontSize)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn FontFamily(&self) -> ::windows_core::Result<super::Media::FontFamily> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontFamily)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFontFamily<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::FontFamily>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFontFamily)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn FontWeight(&self) -> ::windows_core::Result<super::super::Text::FontWeight> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontWeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFontWeight(
        &self,
        value: super::super::Text::FontWeight,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFontWeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn FontStyle(&self) -> ::windows_core::Result<super::super::Text::FontStyle> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontStyle)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFontStyle(
        &self,
        value: super::super::Text::FontStyle,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFontStyle)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IFontIcon2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsTextScaleFactorEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(
        &self,
        value: bool,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IFontIcon2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsTextScaleFactorEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn MirroredWhenRightToLeft(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IFontIcon3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MirroredWhenRightToLeft)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetMirroredWhenRightToLeft(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IFontIcon3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMirroredWhenRightToLeft)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn GlyphProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::IFontIconStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GlyphProperty)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        })
    }
    pub fn FontSizeProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::IFontIconStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontSizeProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn FontFamilyProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::IFontIconStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontFamilyProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn FontWeightProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::IFontIconStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontWeightProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn FontStyleProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::IFontIconStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontStyleProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn IsTextScaleFactorEnabledProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::IFontIconStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsTextScaleFactorEnabledProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn MirroredWhenRightToLeftProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::IFontIconStatics3(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MirroredWhenRightToLeftProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn Triggers(&self) -> ::windows_core::Result<super::TriggerCollection> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Triggers)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Resources(&self) -> ::windows_core::Result<super::ResourceDictionary> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Resources)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::ResourceDictionary>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetResources)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn Tag(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Tag)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTag)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn Language(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Language)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetLanguage(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetLanguage)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn ActualWidth(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualWidth)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn ActualHeight(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualHeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Width(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Width)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetWidth)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Height(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Height)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MinWidth(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MinWidth)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMinWidth)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MaxWidth(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MaxWidth)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMaxWidth)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MinHeight(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MinHeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMinHeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MaxHeight(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MaxHeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMaxHeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn HorizontalAlignment(
        &self,
    ) -> ::windows_core::Result<super::HorizontalAlignment> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HorizontalAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHorizontalAlignment)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> ::windows_core::Result<super::VerticalAlignment> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .VerticalAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetVerticalAlignment)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Margin(&self) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Margin)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMargin(&self, value: super::Thickness) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMargin)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Name(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Name)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetName(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetName)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn BaseUri(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Uri> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BaseUri)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn DataContext(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DataContext)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetDataContext)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn Style(&self) -> ::windows_core::Result<super::Style> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Style)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetStyle<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::Style>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetStyle)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn Parent(&self) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Parent)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn FlowDirection(&self) -> ::windows_core::Result<super::FlowDirection> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FlowDirection)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFlowDirection(
        &self,
        value: super::FlowDirection,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFlowDirection)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Loaded<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Loaded)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLoaded(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLoaded)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn Unloaded<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Unloaded)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveUnloaded(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveUnloaded)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn SizeChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::SizeChangedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SizeChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveSizeChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveSizeChanged)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn LayoutUpdated<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::EventHandler<::windows_core::IInspectable>,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .LayoutUpdated)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLayoutUpdated(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLayoutUpdated)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FindName)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(name),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RequestedTheme(&self) -> ::windows_core::Result<super::ElementTheme> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RequestedTheme)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetRequestedTheme(
        &self,
        value: super::ElementTheme,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRequestedTheme)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn DataContextChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::DataContextChangedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DataContextChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDataContextChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDataContextChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn Loading<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows_core::IInspectable,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement3,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Loading)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLoading(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement3,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLoading)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AllowFocusOnInteraction)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAllowFocusOnInteraction)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn FocusVisualMargin(&self) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualMargin)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualMargin(
        &self,
        value: super::Thickness,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualMargin)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn FocusVisualSecondaryThickness(
        &self,
    ) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualSecondaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualSecondaryThickness(
        &self,
        value: super::Thickness,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualSecondaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn FocusVisualPrimaryThickness(
        &self,
    ) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualPrimaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualPrimaryThickness(
        &self,
        value: super::Thickness,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualPrimaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn FocusVisualSecondaryBrush(
        &self,
    ) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualSecondaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualSecondaryBrush<P0>(
        &self,
        value: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualSecondaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn FocusVisualPrimaryBrush(
        &self,
    ) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualPrimaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualPrimaryBrush<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualPrimaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AllowFocusWhenDisabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAllowFocusWhenDisabled)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn ActualTheme(&self) -> ::windows_core::Result<super::ElementTheme> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement6,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualTheme)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn ActualThemeChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows_core::IInspectable,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement6,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualThemeChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveActualThemeChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement6,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveActualThemeChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn IsLoaded(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement7,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsLoaded)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn EffectiveViewportChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::EffectiveViewportChangedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement7,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .EffectiveViewportChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveEffectiveViewportChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement7,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveEffectiveViewportChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: super::super::super::Foundation::Size,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MeasureOverride)(
                    ::windows_core::Interface::as_raw(this),
                    availablesize,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: super::super::super::Foundation::Size,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ArrangeOverride)(
                    ::windows_core::Interface::as_raw(this),
                    finalsize,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnApplyTemplate)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &::windows_core::HSTRING,
        usetransitions: bool,
    ) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GoToElementStateCore)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(statename),
                    usetransitions,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn InvalidateViewport(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementProtected7,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .InvalidateViewport)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Foreground(&self) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<IIconElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Foreground)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetForeground<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<IIconElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetForeground)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn DesiredSize(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DesiredSize)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn AllowDrop(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AllowDrop)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAllowDrop)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Opacity(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Opacity)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetOpacity)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Clip(&self) -> ::windows_core::Result<super::Media::RectangleGeometry> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Clip)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetClip<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::Media::RectangleGeometry>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetClip)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn RenderTransform(&self) -> ::windows_core::Result<super::Media::Transform> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RenderTransform)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetRenderTransform<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Transform>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRenderTransform)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn Projection(&self) -> ::windows_core::Result<super::Media::Projection> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Projection)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetProjection<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Projection>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetProjection)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn RenderTransformOrigin(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Point> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RenderTransformOrigin)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: super::super::super::Foundation::Point,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRenderTransformOrigin)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsHitTestVisible)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsHitTestVisible)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Visibility(&self) -> ::windows_core::Result<super::Visibility> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Visibility)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetVisibility)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn RenderSize(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RenderSize)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .UseLayoutRounding)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetUseLayoutRounding)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn CacheMode(&self) -> ::windows_core::Result<super::Media::CacheMode> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CacheMode)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCacheMode<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::CacheMode>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCacheMode)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsTapEnabled)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsTapEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsDoubleTapEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsDoubleTapEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsRightTapEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsRightTapEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsHoldingEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsHoldingEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn RemoveKeyUp(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveKeyUp)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveKeyDown(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveKeyDown)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn GotFocus<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GotFocus)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveGotFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveGotFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn LostFocus<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .LostFocus)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLostFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLostFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DragEnter<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragEnter)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragEnter(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragEnter)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DragLeave<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragLeave)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragLeave(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragLeave)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DragOver<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragOver)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragOver(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragOver)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn Drop<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Drop)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDrop(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDrop)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerPressed(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerPressed)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerMoved(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerMoved)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerReleased(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerReleased)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerEntered(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerEntered)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerExited(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerExited)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerCaptureLost(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerCaptureLost)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemovePointerCanceled(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerCanceled)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerWheelChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerWheelChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveTapped(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveTapped)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveDoubleTapped(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDoubleTapped)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveHolding(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveHolding)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveRightTapped(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveRightTapped)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveManipulationStarting(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationStarting)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationInertiaStarting)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveManipulationStarted(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationStarted)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveManipulationDelta(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationDelta)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveManipulationCompleted(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationCompleted)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn Measure(
        &self,
        availablesize: super::super::super::Foundation::Size,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .Measure)(::windows_core::Interface::as_raw(this), availablesize)
                .ok()
        }
    }
    pub fn Arrange(
        &self,
        finalrect: super::super::super::Foundation::Rect,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .Arrange)(::windows_core::Interface::as_raw(this), finalrect)
                .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .ReleasePointerCaptures)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn AddHandler<P0, P1>(
        &self,
        routedevent: P0,
        handler: P1,
        handledeventstoo: bool,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::RoutedEvent>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .AddHandler)(
                    ::windows_core::Interface::as_raw(this),
                    routedevent.into_param().abi(),
                    handler.into_param().abi(),
                    handledeventstoo,
                )
                .ok()
        }
    }
    pub fn RemoveHandler<P0, P1>(
        &self,
        routedevent: P0,
        handler: P1,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::RoutedEvent>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveHandler)(
                    ::windows_core::Interface::as_raw(this),
                    routedevent.into_param().abi(),
                    handler.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn TransformToVisual<P0>(
        &self,
        visual: P0,
    ) -> ::windows_core::Result<super::Media::GeneralTransform>
    where
        P0: ::windows_core::TryIntoParam<super::UIElement>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TransformToVisual)(
                    ::windows_core::Interface::as_raw(this),
                    visual.try_into_param()?.abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn InvalidateMeasure(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .InvalidateMeasure)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .InvalidateArrange)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn UpdateLayout(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .UpdateLayout)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn XamlRoot(&self) -> ::windows_core::Result<super::XamlRoot> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .XamlRoot)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetXamlRoot<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::XamlRoot>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetXamlRoot)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn UIContext(&self) -> ::windows_core::Result<super::super::UIContext> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .UIContext)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Shadow(&self) -> ::windows_core::Result<super::Media::Shadow> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Shadow)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetShadow<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Shadow>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetShadow)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn CompositeMode(
        &self,
    ) -> ::windows_core::Result<super::Media::ElementCompositeMode> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CompositeMode)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCompositeMode(
        &self,
        value: super::Media::ElementCompositeMode,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCompositeMode)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CancelDirectManipulations)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn CanDrag(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CanDrag)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCanDrag)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn DragStarting<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::DragStartingEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragStarting)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragStarting(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragStarting)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DropCompleted<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::DropCompletedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DropCompleted)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDropCompleted(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDropCompleted)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn ContextFlyout(&self) -> ::windows_core::Result<Primitives::FlyoutBase> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ContextFlyout)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetContextFlyout<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Primitives::FlyoutBase>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetContextFlyout)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ExitDisplayModeOnAccessKeyInvoked)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(
        &self,
        value: bool,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetExitDisplayModeOnAccessKeyInvoked)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsAccessKeyScope)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsAccessKeyScope)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn AccessKeyScopeOwner(
        &self,
    ) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AccessKeyScopeOwner)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAccessKeyScopeOwner)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn AccessKey(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AccessKey)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetAccessKey(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAccessKey)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn RemoveContextRequested(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveContextRequested)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn ContextCanceled<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::RoutedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ContextCanceled)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveContextCanceled(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveContextCanceled)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveAccessKeyDisplayRequested)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveAccessKeyDisplayDismissed)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveAccessKeyInvoked)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn Lights(
        &self,
    ) -> ::windows_core::Result<
        super::super::super::Foundation::Collections::IVector<super::Media::XamlLight>,
    > {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Lights)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyTipHorizontalOffset)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyTipHorizontalOffset)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyTipVerticalOffset)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyTipVerticalOffset)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn HighContrastAdjustment(
        &self,
    ) -> ::windows_core::Result<super::ElementHighContrastAdjustment> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HighContrastAdjustment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetHighContrastAdjustment(
        &self,
        value: super::ElementHighContrastAdjustment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHighContrastAdjustment)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn RemoveGettingFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveGettingFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveLosingFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLosingFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveNoFocusCandidateFound)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn StartBringIntoView(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .StartBringIntoView)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn StartBringIntoViewWithOptions<P0>(
        &self,
        options: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::BringIntoViewOptions>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .StartBringIntoViewWithOptions)(
                    ::windows_core::Interface::as_raw(this),
                    options.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn RemoveCharacterReceived(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveCharacterReceived)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveProcessKeyboardAccelerators)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemovePreviewKeyDown(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePreviewKeyDown)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePreviewKeyUp(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePreviewKeyUp)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyTipTarget)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyTipTarget)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyboardAcceleratorPlacementTarget)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(
        &self,
        value: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyboardAcceleratorPlacementTarget)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn BringIntoViewRequested<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::BringIntoViewRequestedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BringIntoViewRequested)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveBringIntoViewRequested(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveBringIntoViewRequested)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn CanBeScrollAnchor(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CanBeScrollAnchor)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCanBeScrollAnchor)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn OpacityTransition(&self) -> ::windows_core::Result<super::ScalarTransition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .OpacityTransition)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetOpacityTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::ScalarTransition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetOpacityTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn TranslationTransition(
        &self,
    ) -> ::windows_core::Result<super::Vector3Transition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TranslationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetTranslationTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Vector3Transition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTranslationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn Rotation(&self) -> ::windows_core::Result<f32> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Rotation)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRotation)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn RotationTransition(&self) -> ::windows_core::Result<super::ScalarTransition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RotationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetRotationTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::ScalarTransition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRotationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn ScaleTransition(&self) -> ::windows_core::Result<super::Vector3Transition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ScaleTransition)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetScaleTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Vector3Transition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetScaleTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnDisconnectVisualChildren)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: super::super::super::Foundation::Point,
        boundingrect: super::super::super::Foundation::Rect,
    ) -> ::windows_core::Result<
        super::super::super::Foundation::Collections::IIterable<
            super::super::super::Foundation::Collections::IIterable<
                super::super::super::Foundation::Point,
            >,
        >,
    > {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FindSubElementsForTouchTargeting)(
                    ::windows_core::Interface::as_raw(this),
                    point,
                    boundingrect,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> ::windows_core::Result<
        super::super::super::Foundation::Collections::IIterable<super::DependencyObject>,
    > {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides7,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetChildrenInTabFocusOrder)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn OnBringIntoViewRequested<P0>(&self, e: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::BringIntoViewRequestedEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides8,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnBringIntoViewRequested)(
                    ::windows_core::Interface::as_raw(this),
                    e.into_param().abi(),
                )
                .ok()
        }
    }
    #[doc(hidden)]
    pub fn IFontIconStatics<
        R,
        F: FnOnce(&IFontIconStatics) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<FontIcon, IFontIconStatics> = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn IFontIconStatics2<
        R,
        F: FnOnce(&IFontIconStatics2) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<FontIcon, IFontIconStatics2> = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn IFontIconStatics3<
        R,
        F: FnOnce(&IFontIconStatics3) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<FontIcon, IFontIconStatics3> = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn new() -> ::windows_core::Result<FontIcon> {
        Self::IFontIconFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CreateInstance)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::ptr::null_mut(),
                    &mut ::core::option::Option::<::windows::core::IInspectable>::None
                        as *mut _ as _,
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IFontIconFactory<
        R,
        F: FnOnce(&IFontIconFactory) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<FontIcon, IFontIconFactory> = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::cmp::PartialEq for FontIcon {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for FontIcon {}
impl ::core::fmt::Debug for FontIcon {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FontIcon").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for FontIcon {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.FontIcon;{d4d61391-39ac-4950-9166-3606c264418b})",
    );
}
impl ::core::clone::Clone for FontIcon {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for FontIcon {
    type Vtable = IFontIcon_Vtbl;
}
unsafe impl ::windows_core::ComInterface for FontIcon {
    const IID: ::windows_core::GUID = <IFontIcon as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for FontIcon {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.FontIcon";
}
::windows_core::imp::interface_hierarchy!(
    FontIcon, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IconElement> for FontIcon {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for FontIcon {}
impl ::windows_core::CanTryInto<super::UIElement> for FontIcon {}
impl ::windows_core::CanTryInto<super::DependencyObject> for FontIcon {}
unsafe impl ::core::marker::Send for FontIcon {}
unsafe impl ::core::marker::Sync for FontIcon {}
#[repr(transparent)]
pub struct FontIconSource(::windows_core::IUnknown);
impl FontIconSource {}
impl ::core::cmp::PartialEq for FontIconSource {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for FontIconSource {}
impl ::core::fmt::Debug for FontIconSource {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FontIconSource").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for FontIconSource {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.FontIconSource;{2211ac9a-74e3-43ed-b61c-21afc7df4d10})",
    );
}
impl ::core::clone::Clone for FontIconSource {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for FontIconSource {
    type Vtable = IFontIconSource_Vtbl;
}
unsafe impl ::windows_core::ComInterface for FontIconSource {
    const IID: ::windows_core::GUID = <IFontIconSource as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for FontIconSource {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.FontIconSource";
}
::windows_core::imp::interface_hierarchy!(
    FontIconSource, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IconSource> for FontIconSource {}
impl ::windows_core::CanTryInto<super::DependencyObject> for FontIconSource {}
unsafe impl ::core::marker::Send for FontIconSource {}
unsafe impl ::core::marker::Sync for FontIconSource {}
#[repr(transparent)]
pub struct Frame(::windows_core::IUnknown);
impl Frame {}
impl ::core::cmp::PartialEq for Frame {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Frame {}
impl ::core::fmt::Debug for Frame {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Frame").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for Frame {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.Frame;{68ea500b-3fe9-4735-b6a0-e7601933b089})",
    );
}
impl ::core::clone::Clone for Frame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for Frame {
    type Vtable = IFrame_Vtbl;
}
unsafe impl ::windows_core::ComInterface for Frame {
    const IID: ::windows_core::GUID = <IFrame as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for Frame {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.Frame";
}
::windows_core::imp::interface_hierarchy!(
    Frame, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<INavigate> for Frame {}
impl ::windows_core::CanTryInto<ContentControl> for Frame {}
impl ::windows_core::CanTryInto<Control> for Frame {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for Frame {}
impl ::windows_core::CanTryInto<super::UIElement> for Frame {}
impl ::windows_core::CanTryInto<super::DependencyObject> for Frame {}
unsafe impl ::core::marker::Send for Frame {}
unsafe impl ::core::marker::Sync for Frame {}
#[repr(transparent)]
pub struct Grid(::windows_core::IUnknown);
impl Grid {
    pub fn GetValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .ClearValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn ReadLocalValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ReadLocalValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetAnimationBaseValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
        P1: ::windows_core::IntoParam<super::DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RegisterPropertyChangedCallback)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    callback.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject2,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .UnregisterPropertyChangedCallback)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    token,
                )
                .ok()
        }
    }
    pub fn Triggers(&self) -> ::windows_core::Result<super::TriggerCollection> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Triggers)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Resources(&self) -> ::windows_core::Result<super::ResourceDictionary> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Resources)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::ResourceDictionary>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetResources)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn Tag(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Tag)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTag)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn Language(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Language)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetLanguage(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetLanguage)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn ActualWidth(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualWidth)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn ActualHeight(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualHeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Width(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Width)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetWidth)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Height(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Height)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MinWidth(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MinWidth)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMinWidth)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MaxWidth(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MaxWidth)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMaxWidth)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MinHeight(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MinHeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMinHeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MaxHeight(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MaxHeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMaxHeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn HorizontalAlignment(
        &self,
    ) -> ::windows_core::Result<super::HorizontalAlignment> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HorizontalAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHorizontalAlignment)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> ::windows_core::Result<super::VerticalAlignment> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .VerticalAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetVerticalAlignment)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Margin(&self) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Margin)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMargin(&self, value: super::Thickness) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMargin)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Name(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Name)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetName(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetName)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn BaseUri(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Uri> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BaseUri)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn DataContext(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DataContext)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetDataContext)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn Style(&self) -> ::windows_core::Result<super::Style> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Style)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetStyle<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::Style>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetStyle)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn Parent(&self) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Parent)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn FlowDirection(&self) -> ::windows_core::Result<super::FlowDirection> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FlowDirection)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFlowDirection(
        &self,
        value: super::FlowDirection,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFlowDirection)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Loaded<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Loaded)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLoaded(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLoaded)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn Unloaded<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Unloaded)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveUnloaded(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveUnloaded)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn SizeChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::SizeChangedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SizeChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveSizeChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveSizeChanged)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn LayoutUpdated<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::EventHandler<::windows_core::IInspectable>,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .LayoutUpdated)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLayoutUpdated(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLayoutUpdated)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FindName)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(name),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RequestedTheme(&self) -> ::windows_core::Result<super::ElementTheme> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RequestedTheme)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetRequestedTheme(
        &self,
        value: super::ElementTheme,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRequestedTheme)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn DataContextChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::DataContextChangedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DataContextChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDataContextChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDataContextChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn Loading<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows_core::IInspectable,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement3,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Loading)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLoading(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement3,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLoading)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AllowFocusOnInteraction)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAllowFocusOnInteraction)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn FocusVisualMargin(&self) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualMargin)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualMargin(
        &self,
        value: super::Thickness,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualMargin)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn FocusVisualSecondaryThickness(
        &self,
    ) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualSecondaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualSecondaryThickness(
        &self,
        value: super::Thickness,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualSecondaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn FocusVisualPrimaryThickness(
        &self,
    ) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualPrimaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualPrimaryThickness(
        &self,
        value: super::Thickness,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualPrimaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn FocusVisualSecondaryBrush(
        &self,
    ) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualSecondaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualSecondaryBrush<P0>(
        &self,
        value: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualSecondaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn FocusVisualPrimaryBrush(
        &self,
    ) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualPrimaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualPrimaryBrush<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualPrimaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AllowFocusWhenDisabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAllowFocusWhenDisabled)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn ActualTheme(&self) -> ::windows_core::Result<super::ElementTheme> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement6,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualTheme)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn ActualThemeChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows_core::IInspectable,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement6,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualThemeChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveActualThemeChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement6,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveActualThemeChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn IsLoaded(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement7,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsLoaded)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn EffectiveViewportChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::EffectiveViewportChangedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement7,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .EffectiveViewportChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveEffectiveViewportChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement7,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveEffectiveViewportChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: super::super::super::Foundation::Size,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MeasureOverride)(
                    ::windows_core::Interface::as_raw(this),
                    availablesize,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: super::super::super::Foundation::Size,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ArrangeOverride)(
                    ::windows_core::Interface::as_raw(this),
                    finalsize,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnApplyTemplate)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &::windows_core::HSTRING,
        usetransitions: bool,
    ) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GoToElementStateCore)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(statename),
                    usetransitions,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn InvalidateViewport(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementProtected7,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .InvalidateViewport)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn RowDefinitions(&self) -> ::windows_core::Result<RowDefinitionCollection> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RowDefinitions)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn ColumnDefinitions(
        &self,
    ) -> ::windows_core::Result<ColumnDefinitionCollection> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ColumnDefinitions)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn BorderBrush(&self) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<IGrid2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BorderBrush)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetBorderBrush<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<IGrid2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetBorderBrush)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn BorderThickness(&self) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<IGrid2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BorderThickness)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetBorderThickness(
        &self,
        value: super::Thickness,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IGrid2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetBorderThickness)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn CornerRadius(&self) -> ::windows_core::Result<super::CornerRadius> {
        let this = &::windows_core::ComInterface::cast::<IGrid2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CornerRadius)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCornerRadius(
        &self,
        value: super::CornerRadius,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IGrid2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCornerRadius)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Padding(&self) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<IGrid2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Padding)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetPadding(&self, value: super::Thickness) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IGrid2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetPadding)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn RowSpacing(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<IGrid3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RowSpacing)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetRowSpacing(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IGrid3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRowSpacing)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn ColumnSpacing(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<IGrid3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ColumnSpacing)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetColumnSpacing(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IGrid3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetColumnSpacing)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn BackgroundSizing(&self) -> ::windows_core::Result<BackgroundSizing> {
        let this = &::windows_core::ComInterface::cast::<IGrid4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BackgroundSizing)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetBackgroundSizing(
        &self,
        value: BackgroundSizing,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IGrid4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetBackgroundSizing)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn RowProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::IGridStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RowProperty)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        })
    }
    pub fn GetRow<P0>(element: P0) -> ::windows_core::Result<i32>
    where
        P0: ::windows_core::TryIntoParam<super::FrameworkElement>,
    {
        Self::IGridStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetRow)(
                    ::windows_core::Interface::as_raw(this),
                    element.try_into_param()?.abi(),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn SetRow<P0>(element: P0, value: i32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::FrameworkElement>,
    {
        Self::IGridStatics(|this| unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRow)(
                    ::windows_core::Interface::as_raw(this),
                    element.try_into_param()?.abi(),
                    value,
                )
                .ok()
        })
    }
    pub fn ColumnProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::IGridStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ColumnProperty)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        })
    }
    pub fn GetColumn<P0>(element: P0) -> ::windows_core::Result<i32>
    where
        P0: ::windows_core::TryIntoParam<super::FrameworkElement>,
    {
        Self::IGridStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetColumn)(
                    ::windows_core::Interface::as_raw(this),
                    element.try_into_param()?.abi(),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn SetColumn<P0>(element: P0, value: i32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::FrameworkElement>,
    {
        Self::IGridStatics(|this| unsafe {
            (::windows_core::Interface::vtable(this)
                .SetColumn)(
                    ::windows_core::Interface::as_raw(this),
                    element.try_into_param()?.abi(),
                    value,
                )
                .ok()
        })
    }
    pub fn RowSpanProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::IGridStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RowSpanProperty)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        })
    }
    pub fn GetRowSpan<P0>(element: P0) -> ::windows_core::Result<i32>
    where
        P0: ::windows_core::TryIntoParam<super::FrameworkElement>,
    {
        Self::IGridStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetRowSpan)(
                    ::windows_core::Interface::as_raw(this),
                    element.try_into_param()?.abi(),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn SetRowSpan<P0>(element: P0, value: i32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::FrameworkElement>,
    {
        Self::IGridStatics(|this| unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRowSpan)(
                    ::windows_core::Interface::as_raw(this),
                    element.try_into_param()?.abi(),
                    value,
                )
                .ok()
        })
    }
    pub fn ColumnSpanProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::IGridStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ColumnSpanProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn GetColumnSpan<P0>(element: P0) -> ::windows_core::Result<i32>
    where
        P0: ::windows_core::TryIntoParam<super::FrameworkElement>,
    {
        Self::IGridStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetColumnSpan)(
                    ::windows_core::Interface::as_raw(this),
                    element.try_into_param()?.abi(),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn SetColumnSpan<P0>(element: P0, value: i32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::FrameworkElement>,
    {
        Self::IGridStatics(|this| unsafe {
            (::windows_core::Interface::vtable(this)
                .SetColumnSpan)(
                    ::windows_core::Interface::as_raw(this),
                    element.try_into_param()?.abi(),
                    value,
                )
                .ok()
        })
    }
    pub fn BorderBrushProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::IGridStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BorderBrushProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn BorderThicknessProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::IGridStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BorderThicknessProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn CornerRadiusProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::IGridStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CornerRadiusProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn PaddingProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::IGridStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .PaddingProperty)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        })
    }
    pub fn RowSpacingProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::IGridStatics3(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RowSpacingProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn ColumnSpacingProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::IGridStatics3(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ColumnSpacingProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn BackgroundSizingProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::IGridStatics4(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BackgroundSizingProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn Children(&self) -> ::windows_core::Result<UIElementCollection> {
        let this = &::windows_core::ComInterface::cast::<IPanel>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Children)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Background(&self) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<IPanel>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Background)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetBackground<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<IPanel>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetBackground)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn IsItemsHost(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IPanel>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsItemsHost)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn BackgroundTransition(
        &self,
    ) -> ::windows_core::Result<super::BrushTransition> {
        let this = &::windows_core::ComInterface::cast::<IPanel2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BackgroundTransition)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetBackgroundTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::BrushTransition>,
    {
        let this = &::windows_core::ComInterface::cast::<IPanel2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetBackgroundTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn DesiredSize(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DesiredSize)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn AllowDrop(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AllowDrop)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAllowDrop)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Opacity(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Opacity)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetOpacity)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Clip(&self) -> ::windows_core::Result<super::Media::RectangleGeometry> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Clip)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetClip<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::Media::RectangleGeometry>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetClip)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn RenderTransform(&self) -> ::windows_core::Result<super::Media::Transform> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RenderTransform)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetRenderTransform<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Transform>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRenderTransform)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn Projection(&self) -> ::windows_core::Result<super::Media::Projection> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Projection)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetProjection<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Projection>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetProjection)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn RenderTransformOrigin(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Point> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RenderTransformOrigin)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: super::super::super::Foundation::Point,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRenderTransformOrigin)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsHitTestVisible)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsHitTestVisible)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Visibility(&self) -> ::windows_core::Result<super::Visibility> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Visibility)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetVisibility)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn RenderSize(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RenderSize)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .UseLayoutRounding)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetUseLayoutRounding)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn CacheMode(&self) -> ::windows_core::Result<super::Media::CacheMode> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CacheMode)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCacheMode<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::CacheMode>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCacheMode)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsTapEnabled)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsTapEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsDoubleTapEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsDoubleTapEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsRightTapEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsRightTapEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsHoldingEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsHoldingEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn RemoveKeyUp(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveKeyUp)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveKeyDown(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveKeyDown)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn GotFocus<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GotFocus)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveGotFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveGotFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn LostFocus<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .LostFocus)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLostFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLostFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DragEnter<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragEnter)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragEnter(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragEnter)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DragLeave<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragLeave)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragLeave(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragLeave)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DragOver<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragOver)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragOver(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragOver)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn Drop<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Drop)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDrop(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDrop)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerPressed(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerPressed)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerMoved(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerMoved)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerReleased(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerReleased)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerEntered(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerEntered)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerExited(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerExited)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerCaptureLost(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerCaptureLost)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemovePointerCanceled(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerCanceled)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerWheelChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerWheelChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveTapped(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveTapped)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveDoubleTapped(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDoubleTapped)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveHolding(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveHolding)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveRightTapped(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveRightTapped)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveManipulationStarting(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationStarting)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationInertiaStarting)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveManipulationStarted(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationStarted)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveManipulationDelta(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationDelta)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveManipulationCompleted(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationCompleted)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn Measure(
        &self,
        availablesize: super::super::super::Foundation::Size,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .Measure)(::windows_core::Interface::as_raw(this), availablesize)
                .ok()
        }
    }
    pub fn Arrange(
        &self,
        finalrect: super::super::super::Foundation::Rect,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .Arrange)(::windows_core::Interface::as_raw(this), finalrect)
                .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .ReleasePointerCaptures)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn AddHandler<P0, P1>(
        &self,
        routedevent: P0,
        handler: P1,
        handledeventstoo: bool,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::RoutedEvent>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .AddHandler)(
                    ::windows_core::Interface::as_raw(this),
                    routedevent.into_param().abi(),
                    handler.into_param().abi(),
                    handledeventstoo,
                )
                .ok()
        }
    }
    pub fn RemoveHandler<P0, P1>(
        &self,
        routedevent: P0,
        handler: P1,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::RoutedEvent>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveHandler)(
                    ::windows_core::Interface::as_raw(this),
                    routedevent.into_param().abi(),
                    handler.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn TransformToVisual<P0>(
        &self,
        visual: P0,
    ) -> ::windows_core::Result<super::Media::GeneralTransform>
    where
        P0: ::windows_core::TryIntoParam<super::UIElement>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TransformToVisual)(
                    ::windows_core::Interface::as_raw(this),
                    visual.try_into_param()?.abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn InvalidateMeasure(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .InvalidateMeasure)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .InvalidateArrange)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn UpdateLayout(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .UpdateLayout)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn XamlRoot(&self) -> ::windows_core::Result<super::XamlRoot> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .XamlRoot)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetXamlRoot<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::XamlRoot>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetXamlRoot)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn UIContext(&self) -> ::windows_core::Result<super::super::UIContext> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .UIContext)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Shadow(&self) -> ::windows_core::Result<super::Media::Shadow> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Shadow)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetShadow<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Shadow>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetShadow)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn CompositeMode(
        &self,
    ) -> ::windows_core::Result<super::Media::ElementCompositeMode> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CompositeMode)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCompositeMode(
        &self,
        value: super::Media::ElementCompositeMode,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCompositeMode)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CancelDirectManipulations)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn CanDrag(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CanDrag)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCanDrag)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn DragStarting<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::DragStartingEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragStarting)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragStarting(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragStarting)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DropCompleted<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::DropCompletedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DropCompleted)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDropCompleted(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDropCompleted)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn ContextFlyout(&self) -> ::windows_core::Result<Primitives::FlyoutBase> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ContextFlyout)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetContextFlyout<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Primitives::FlyoutBase>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetContextFlyout)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ExitDisplayModeOnAccessKeyInvoked)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(
        &self,
        value: bool,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetExitDisplayModeOnAccessKeyInvoked)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsAccessKeyScope)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsAccessKeyScope)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn AccessKeyScopeOwner(
        &self,
    ) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AccessKeyScopeOwner)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAccessKeyScopeOwner)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn AccessKey(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AccessKey)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetAccessKey(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAccessKey)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn RemoveContextRequested(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveContextRequested)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn ContextCanceled<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::RoutedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ContextCanceled)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveContextCanceled(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveContextCanceled)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveAccessKeyDisplayRequested)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveAccessKeyDisplayDismissed)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveAccessKeyInvoked)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn Lights(
        &self,
    ) -> ::windows_core::Result<
        super::super::super::Foundation::Collections::IVector<super::Media::XamlLight>,
    > {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Lights)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyTipHorizontalOffset)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyTipHorizontalOffset)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyTipVerticalOffset)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyTipVerticalOffset)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn HighContrastAdjustment(
        &self,
    ) -> ::windows_core::Result<super::ElementHighContrastAdjustment> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HighContrastAdjustment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetHighContrastAdjustment(
        &self,
        value: super::ElementHighContrastAdjustment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHighContrastAdjustment)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn RemoveGettingFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveGettingFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveLosingFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLosingFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveNoFocusCandidateFound)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn StartBringIntoView(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .StartBringIntoView)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn StartBringIntoViewWithOptions<P0>(
        &self,
        options: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::BringIntoViewOptions>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .StartBringIntoViewWithOptions)(
                    ::windows_core::Interface::as_raw(this),
                    options.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn RemoveCharacterReceived(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveCharacterReceived)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveProcessKeyboardAccelerators)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemovePreviewKeyDown(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePreviewKeyDown)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePreviewKeyUp(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePreviewKeyUp)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyTipTarget)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyTipTarget)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyboardAcceleratorPlacementTarget)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(
        &self,
        value: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyboardAcceleratorPlacementTarget)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn BringIntoViewRequested<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::BringIntoViewRequestedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BringIntoViewRequested)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveBringIntoViewRequested(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveBringIntoViewRequested)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn CanBeScrollAnchor(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CanBeScrollAnchor)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCanBeScrollAnchor)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn OpacityTransition(&self) -> ::windows_core::Result<super::ScalarTransition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .OpacityTransition)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetOpacityTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::ScalarTransition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetOpacityTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn TranslationTransition(
        &self,
    ) -> ::windows_core::Result<super::Vector3Transition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TranslationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetTranslationTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Vector3Transition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTranslationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn Rotation(&self) -> ::windows_core::Result<f32> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Rotation)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRotation)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn RotationTransition(&self) -> ::windows_core::Result<super::ScalarTransition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RotationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetRotationTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::ScalarTransition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRotationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn ScaleTransition(&self) -> ::windows_core::Result<super::Vector3Transition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ScaleTransition)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetScaleTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Vector3Transition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetScaleTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnDisconnectVisualChildren)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: super::super::super::Foundation::Point,
        boundingrect: super::super::super::Foundation::Rect,
    ) -> ::windows_core::Result<
        super::super::super::Foundation::Collections::IIterable<
            super::super::super::Foundation::Collections::IIterable<
                super::super::super::Foundation::Point,
            >,
        >,
    > {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FindSubElementsForTouchTargeting)(
                    ::windows_core::Interface::as_raw(this),
                    point,
                    boundingrect,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> ::windows_core::Result<
        super::super::super::Foundation::Collections::IIterable<super::DependencyObject>,
    > {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides7,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetChildrenInTabFocusOrder)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn OnBringIntoViewRequested<P0>(&self, e: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::BringIntoViewRequestedEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides8,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnBringIntoViewRequested)(
                    ::windows_core::Interface::as_raw(this),
                    e.into_param().abi(),
                )
                .ok()
        }
    }
    #[doc(hidden)]
    pub fn IGridStatics<R, F: FnOnce(&IGridStatics) -> ::windows_core::Result<R>>(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<Grid, IGridStatics> = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn IGridStatics2<R, F: FnOnce(&IGridStatics2) -> ::windows_core::Result<R>>(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<Grid, IGridStatics2> = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn IGridStatics3<R, F: FnOnce(&IGridStatics3) -> ::windows_core::Result<R>>(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<Grid, IGridStatics3> = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn IGridStatics4<R, F: FnOnce(&IGridStatics4) -> ::windows_core::Result<R>>(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<Grid, IGridStatics4> = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn new() -> ::windows_core::Result<Grid> {
        Self::IGridFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CreateInstance)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::ptr::null_mut(),
                    &mut ::core::option::Option::<::windows::core::IInspectable>::None
                        as *mut _ as _,
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IGridFactory<R, F: FnOnce(&IGridFactory) -> ::windows_core::Result<R>>(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<Grid, IGridFactory> = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::cmp::PartialEq for Grid {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Grid {}
impl ::core::fmt::Debug for Grid {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Grid").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for Grid {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.Grid;{fd104460-2e15-4ba3-8b8f-fa693a4161e9})",
    );
}
impl ::core::clone::Clone for Grid {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for Grid {
    type Vtable = IGrid_Vtbl;
}
unsafe impl ::windows_core::ComInterface for Grid {
    const IID: ::windows_core::GUID = <IGrid as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for Grid {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.Grid";
}
::windows_core::imp::interface_hierarchy!(
    Grid, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Panel> for Grid {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for Grid {}
impl ::windows_core::CanTryInto<super::UIElement> for Grid {}
impl ::windows_core::CanTryInto<super::DependencyObject> for Grid {}
unsafe impl ::core::marker::Send for Grid {}
unsafe impl ::core::marker::Sync for Grid {}
#[repr(transparent)]
pub struct GridView(::windows_core::IUnknown);
impl GridView {}
impl ::core::cmp::PartialEq for GridView {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for GridView {}
impl ::core::fmt::Debug for GridView {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("GridView").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for GridView {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.GridView;{026ae934-b67e-4d80-8f72-8aa64b4d827b})",
    );
}
impl ::core::clone::Clone for GridView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for GridView {
    type Vtable = IGridView_Vtbl;
}
unsafe impl ::windows_core::ComInterface for GridView {
    const IID: ::windows_core::GUID = <IGridView as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for GridView {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.GridView";
}
::windows_core::imp::interface_hierarchy!(
    GridView, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IItemContainerMapping> for GridView {}
impl ::windows_core::CanTryInto<ISemanticZoomInformation> for GridView {}
impl ::windows_core::CanTryInto<ListViewBase> for GridView {}
impl ::windows_core::CanTryInto<Primitives::Selector> for GridView {}
impl ::windows_core::CanTryInto<ItemsControl> for GridView {}
impl ::windows_core::CanTryInto<Control> for GridView {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for GridView {}
impl ::windows_core::CanTryInto<super::UIElement> for GridView {}
impl ::windows_core::CanTryInto<super::DependencyObject> for GridView {}
unsafe impl ::core::marker::Send for GridView {}
unsafe impl ::core::marker::Sync for GridView {}
#[repr(transparent)]
pub struct GridViewHeaderItem(::windows_core::IUnknown);
impl GridViewHeaderItem {}
impl ::core::cmp::PartialEq for GridViewHeaderItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for GridViewHeaderItem {}
impl ::core::fmt::Debug for GridViewHeaderItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("GridViewHeaderItem").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for GridViewHeaderItem {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.GridViewHeaderItem;{72d75d7e-5dc3-4ffc-9b1c-939b5c37161c})",
    );
}
impl ::core::clone::Clone for GridViewHeaderItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for GridViewHeaderItem {
    type Vtable = IGridViewHeaderItem_Vtbl;
}
unsafe impl ::windows_core::ComInterface for GridViewHeaderItem {
    const IID: ::windows_core::GUID = <IGridViewHeaderItem as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for GridViewHeaderItem {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.GridViewHeaderItem";
}
::windows_core::imp::interface_hierarchy!(
    GridViewHeaderItem, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ListViewBaseHeaderItem> for GridViewHeaderItem {}
impl ::windows_core::CanTryInto<ContentControl> for GridViewHeaderItem {}
impl ::windows_core::CanTryInto<Control> for GridViewHeaderItem {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for GridViewHeaderItem {}
impl ::windows_core::CanTryInto<super::UIElement> for GridViewHeaderItem {}
impl ::windows_core::CanTryInto<super::DependencyObject> for GridViewHeaderItem {}
unsafe impl ::core::marker::Send for GridViewHeaderItem {}
unsafe impl ::core::marker::Sync for GridViewHeaderItem {}
#[repr(transparent)]
pub struct GridViewItem(::windows_core::IUnknown);
impl GridViewItem {}
impl ::core::cmp::PartialEq for GridViewItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for GridViewItem {}
impl ::core::fmt::Debug for GridViewItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("GridViewItem").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for GridViewItem {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.GridViewItem;{7d9901f1-e7c1-4e83-b470-c9d6d7bda9f5})",
    );
}
impl ::core::clone::Clone for GridViewItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for GridViewItem {
    type Vtable = IGridViewItem_Vtbl;
}
unsafe impl ::windows_core::ComInterface for GridViewItem {
    const IID: ::windows_core::GUID = <IGridViewItem as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for GridViewItem {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.GridViewItem";
}
::windows_core::imp::interface_hierarchy!(
    GridViewItem, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Primitives::SelectorItem> for GridViewItem {}
impl ::windows_core::CanTryInto<ContentControl> for GridViewItem {}
impl ::windows_core::CanTryInto<Control> for GridViewItem {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for GridViewItem {}
impl ::windows_core::CanTryInto<super::UIElement> for GridViewItem {}
impl ::windows_core::CanTryInto<super::DependencyObject> for GridViewItem {}
unsafe impl ::core::marker::Send for GridViewItem {}
unsafe impl ::core::marker::Sync for GridViewItem {}
#[repr(transparent)]
pub struct GroupItem(::windows_core::IUnknown);
impl GroupItem {}
impl ::core::cmp::PartialEq for GroupItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for GroupItem {}
impl ::core::fmt::Debug for GroupItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("GroupItem").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for GroupItem {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.GroupItem;{4ae8d5d1-7228-4a16-a61f-88c0e8f45c76})",
    );
}
impl ::core::clone::Clone for GroupItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for GroupItem {
    type Vtable = IGroupItem_Vtbl;
}
unsafe impl ::windows_core::ComInterface for GroupItem {
    const IID: ::windows_core::GUID = <IGroupItem as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for GroupItem {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.GroupItem";
}
::windows_core::imp::interface_hierarchy!(
    GroupItem, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ContentControl> for GroupItem {}
impl ::windows_core::CanTryInto<Control> for GroupItem {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for GroupItem {}
impl ::windows_core::CanTryInto<super::UIElement> for GroupItem {}
impl ::windows_core::CanTryInto<super::DependencyObject> for GroupItem {}
unsafe impl ::core::marker::Send for GroupItem {}
unsafe impl ::core::marker::Sync for GroupItem {}
#[repr(transparent)]
pub struct GroupStyle(::windows_core::IUnknown);
impl GroupStyle {}
impl ::core::cmp::PartialEq for GroupStyle {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for GroupStyle {}
impl ::core::fmt::Debug for GroupStyle {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("GroupStyle").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for GroupStyle {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.GroupStyle;{71ca300b-b89e-4184-b0df-a9e95447de8d})",
    );
}
impl ::core::clone::Clone for GroupStyle {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for GroupStyle {
    type Vtable = IGroupStyle_Vtbl;
}
unsafe impl ::windows_core::ComInterface for GroupStyle {
    const IID: ::windows_core::GUID = <IGroupStyle as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for GroupStyle {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.GroupStyle";
}
::windows_core::imp::interface_hierarchy!(
    GroupStyle, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for GroupStyle {}
unsafe impl ::core::marker::Sync for GroupStyle {}
#[repr(transparent)]
pub struct GroupStyleSelector(::windows_core::IUnknown);
impl GroupStyleSelector {}
impl ::core::cmp::PartialEq for GroupStyleSelector {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for GroupStyleSelector {}
impl ::core::fmt::Debug for GroupStyleSelector {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("GroupStyleSelector").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for GroupStyleSelector {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.GroupStyleSelector;{6dda119e-9a74-478f-a339-5bb52de6c51e})",
    );
}
impl ::core::clone::Clone for GroupStyleSelector {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for GroupStyleSelector {
    type Vtable = IGroupStyleSelector_Vtbl;
}
unsafe impl ::windows_core::ComInterface for GroupStyleSelector {
    const IID: ::windows_core::GUID = <IGroupStyleSelector as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for GroupStyleSelector {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.GroupStyleSelector";
}
::windows_core::imp::interface_hierarchy!(
    GroupStyleSelector, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for GroupStyleSelector {}
unsafe impl ::core::marker::Sync for GroupStyleSelector {}
#[repr(transparent)]
pub struct HandwritingPanelClosedEventArgs(::windows_core::IUnknown);
impl HandwritingPanelClosedEventArgs {}
impl ::core::cmp::PartialEq for HandwritingPanelClosedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for HandwritingPanelClosedEventArgs {}
impl ::core::fmt::Debug for HandwritingPanelClosedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("HandwritingPanelClosedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for HandwritingPanelClosedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.HandwritingPanelClosedEventArgs;{4fb91c73-192d-4dd2-a1a2-80ed01125876})",
    );
}
impl ::core::clone::Clone for HandwritingPanelClosedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for HandwritingPanelClosedEventArgs {
    type Vtable = IHandwritingPanelClosedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for HandwritingPanelClosedEventArgs {
    const IID: ::windows_core::GUID = <IHandwritingPanelClosedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for HandwritingPanelClosedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.HandwritingPanelClosedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    HandwritingPanelClosedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for HandwritingPanelClosedEventArgs {}
unsafe impl ::core::marker::Sync for HandwritingPanelClosedEventArgs {}
#[repr(transparent)]
pub struct HandwritingPanelOpenedEventArgs(::windows_core::IUnknown);
impl HandwritingPanelOpenedEventArgs {}
impl ::core::cmp::PartialEq for HandwritingPanelOpenedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for HandwritingPanelOpenedEventArgs {}
impl ::core::fmt::Debug for HandwritingPanelOpenedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("HandwritingPanelOpenedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for HandwritingPanelOpenedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.HandwritingPanelOpenedEventArgs;{fc15b16d-9f15-47b0-b97a-94a68cc61345})",
    );
}
impl ::core::clone::Clone for HandwritingPanelOpenedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for HandwritingPanelOpenedEventArgs {
    type Vtable = IHandwritingPanelOpenedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for HandwritingPanelOpenedEventArgs {
    const IID: ::windows_core::GUID = <IHandwritingPanelOpenedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for HandwritingPanelOpenedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.HandwritingPanelOpenedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    HandwritingPanelOpenedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for HandwritingPanelOpenedEventArgs {}
unsafe impl ::core::marker::Sync for HandwritingPanelOpenedEventArgs {}
#[repr(transparent)]
pub struct HandwritingView(::windows_core::IUnknown);
impl HandwritingView {}
impl ::core::cmp::PartialEq for HandwritingView {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for HandwritingView {}
impl ::core::fmt::Debug for HandwritingView {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("HandwritingView").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for HandwritingView {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.HandwritingView;{c44204a7-31e0-44bc-a38b-4bee64ecd99f})",
    );
}
impl ::core::clone::Clone for HandwritingView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for HandwritingView {
    type Vtable = IHandwritingView_Vtbl;
}
unsafe impl ::windows_core::ComInterface for HandwritingView {
    const IID: ::windows_core::GUID = <IHandwritingView as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for HandwritingView {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.HandwritingView";
}
::windows_core::imp::interface_hierarchy!(
    HandwritingView, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for HandwritingView {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for HandwritingView {}
impl ::windows_core::CanTryInto<super::UIElement> for HandwritingView {}
impl ::windows_core::CanTryInto<super::DependencyObject> for HandwritingView {}
unsafe impl ::core::marker::Send for HandwritingView {}
unsafe impl ::core::marker::Sync for HandwritingView {}
#[repr(transparent)]
pub struct HandwritingViewCandidatesChangedEventArgs(::windows_core::IUnknown);
impl HandwritingViewCandidatesChangedEventArgs {}
impl ::core::cmp::PartialEq for HandwritingViewCandidatesChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for HandwritingViewCandidatesChangedEventArgs {}
impl ::core::fmt::Debug for HandwritingViewCandidatesChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("HandwritingViewCandidatesChangedEventArgs")
            .field(&self.0)
            .finish()
    }
}
impl ::windows_core::RuntimeType for HandwritingViewCandidatesChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.HandwritingViewCandidatesChangedEventArgs;{6f5f63d8-56b1-56c5-a416-c19c16bf7884})",
    );
}
impl ::core::clone::Clone for HandwritingViewCandidatesChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for HandwritingViewCandidatesChangedEventArgs {
    type Vtable = IHandwritingViewCandidatesChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for HandwritingViewCandidatesChangedEventArgs {
    const IID: ::windows_core::GUID = <IHandwritingViewCandidatesChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for HandwritingViewCandidatesChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.HandwritingViewCandidatesChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    HandwritingViewCandidatesChangedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for HandwritingViewCandidatesChangedEventArgs {}
unsafe impl ::core::marker::Sync for HandwritingViewCandidatesChangedEventArgs {}
#[repr(transparent)]
pub struct HandwritingViewTextSubmittedEventArgs(::windows_core::IUnknown);
impl HandwritingViewTextSubmittedEventArgs {}
impl ::core::cmp::PartialEq for HandwritingViewTextSubmittedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for HandwritingViewTextSubmittedEventArgs {}
impl ::core::fmt::Debug for HandwritingViewTextSubmittedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("HandwritingViewTextSubmittedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for HandwritingViewTextSubmittedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.HandwritingViewTextSubmittedEventArgs;{55ac0f47-f5e4-55da-b8a3-d418b7564291})",
    );
}
impl ::core::clone::Clone for HandwritingViewTextSubmittedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for HandwritingViewTextSubmittedEventArgs {
    type Vtable = IHandwritingViewTextSubmittedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for HandwritingViewTextSubmittedEventArgs {
    const IID: ::windows_core::GUID = <IHandwritingViewTextSubmittedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for HandwritingViewTextSubmittedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.HandwritingViewTextSubmittedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    HandwritingViewTextSubmittedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for HandwritingViewTextSubmittedEventArgs {}
unsafe impl ::core::marker::Sync for HandwritingViewTextSubmittedEventArgs {}
#[repr(transparent)]
pub struct Hub(::windows_core::IUnknown);
impl Hub {}
impl ::core::cmp::PartialEq for Hub {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Hub {}
impl ::core::fmt::Debug for Hub {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Hub").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for Hub {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.Hub;{ae692e82-7314-4f51-ab11-2af1ed4a19f8})",
    );
}
impl ::core::clone::Clone for Hub {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for Hub {
    type Vtable = IHub_Vtbl;
}
unsafe impl ::windows_core::ComInterface for Hub {
    const IID: ::windows_core::GUID = <IHub as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for Hub {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.Hub";
}
::windows_core::imp::interface_hierarchy!(
    Hub, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ISemanticZoomInformation> for Hub {}
impl ::windows_core::CanTryInto<Control> for Hub {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for Hub {}
impl ::windows_core::CanTryInto<super::UIElement> for Hub {}
impl ::windows_core::CanTryInto<super::DependencyObject> for Hub {}
unsafe impl ::core::marker::Send for Hub {}
unsafe impl ::core::marker::Sync for Hub {}
#[repr(transparent)]
pub struct HubSection(::windows_core::IUnknown);
impl HubSection {}
impl ::core::cmp::PartialEq for HubSection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for HubSection {}
impl ::core::fmt::Debug for HubSection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("HubSection").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for HubSection {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.HubSection;{a4e66cb7-7fdd-4fe0-ab49-c246639dccf9})",
    );
}
impl ::core::clone::Clone for HubSection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for HubSection {
    type Vtable = IHubSection_Vtbl;
}
unsafe impl ::windows_core::ComInterface for HubSection {
    const IID: ::windows_core::GUID = <IHubSection as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for HubSection {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.HubSection";
}
::windows_core::imp::interface_hierarchy!(
    HubSection, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for HubSection {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for HubSection {}
impl ::windows_core::CanTryInto<super::UIElement> for HubSection {}
impl ::windows_core::CanTryInto<super::DependencyObject> for HubSection {}
unsafe impl ::core::marker::Send for HubSection {}
unsafe impl ::core::marker::Sync for HubSection {}
#[repr(transparent)]
pub struct HubSectionCollection(::windows_core::IUnknown);
impl HubSectionCollection {}
impl ::core::cmp::PartialEq for HubSectionCollection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for HubSectionCollection {}
impl ::core::fmt::Debug for HubSectionCollection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("HubSectionCollection").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for HubSectionCollection {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.HubSectionCollection;pinterface({913337e9-11a1-4345-a3a2-4e7f956e222d};rc(Windows.UI.Xaml.Controls.HubSection;{a4e66cb7-7fdd-4fe0-ab49-c246639dccf9})))",
    );
}
impl ::core::clone::Clone for HubSectionCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for HubSectionCollection {
    type Vtable = super::super::super::Foundation::Collections::IVector_Vtbl<HubSection>;
}
unsafe impl ::windows_core::ComInterface for HubSectionCollection {
    const IID: ::windows_core::GUID = <super::super::super::Foundation::Collections::IVector<
        HubSection,
    > as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for HubSectionCollection {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.HubSectionCollection";
}
impl ::core::iter::IntoIterator for HubSectionCollection {
    type Item = HubSection;
    type IntoIter = super::super::super::Foundation::Collections::VectorIterator<
        Self::Item,
    >;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
impl ::core::iter::IntoIterator for &HubSectionCollection {
    type Item = HubSection;
    type IntoIter = super::super::super::Foundation::Collections::VectorIterator<
        Self::Item,
    >;
    fn into_iter(self) -> Self::IntoIter {
        super::super::super::Foundation::Collections::VectorIterator::new(
            ::windows_core::ComInterface::cast(self).ok(),
        )
    }
}
::windows_core::imp::interface_hierarchy!(
    HubSectionCollection, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<
    super::super::super::Foundation::Collections::IIterable<HubSection>,
> for HubSectionCollection {}
impl ::windows_core::CanTryInto<
    super::super::super::Foundation::Collections::IVector<HubSection>,
> for HubSectionCollection {}
unsafe impl ::core::marker::Send for HubSectionCollection {}
unsafe impl ::core::marker::Sync for HubSectionCollection {}
#[repr(transparent)]
pub struct HubSectionHeaderClickEventArgs(::windows_core::IUnknown);
impl HubSectionHeaderClickEventArgs {}
impl ::core::cmp::PartialEq for HubSectionHeaderClickEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for HubSectionHeaderClickEventArgs {}
impl ::core::fmt::Debug for HubSectionHeaderClickEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("HubSectionHeaderClickEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for HubSectionHeaderClickEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.HubSectionHeaderClickEventArgs;{e1c5ef04-1edd-4112-aeeb-996c96400698})",
    );
}
impl ::core::clone::Clone for HubSectionHeaderClickEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for HubSectionHeaderClickEventArgs {
    type Vtable = IHubSectionHeaderClickEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for HubSectionHeaderClickEventArgs {
    const IID: ::windows_core::GUID = <IHubSectionHeaderClickEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for HubSectionHeaderClickEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.HubSectionHeaderClickEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    HubSectionHeaderClickEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for HubSectionHeaderClickEventArgs {}
unsafe impl ::core::marker::Sync for HubSectionHeaderClickEventArgs {}
#[repr(transparent)]
pub struct HyperlinkButton(::windows_core::IUnknown);
impl HyperlinkButton {}
impl ::core::cmp::PartialEq for HyperlinkButton {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for HyperlinkButton {}
impl ::core::fmt::Debug for HyperlinkButton {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("HyperlinkButton").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for HyperlinkButton {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.HyperlinkButton;{ccebaca3-3b5c-4f4c-9bfd-86887bc79772})",
    );
}
impl ::core::clone::Clone for HyperlinkButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for HyperlinkButton {
    type Vtable = IHyperlinkButton_Vtbl;
}
unsafe impl ::windows_core::ComInterface for HyperlinkButton {
    const IID: ::windows_core::GUID = <IHyperlinkButton as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for HyperlinkButton {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.HyperlinkButton";
}
::windows_core::imp::interface_hierarchy!(
    HyperlinkButton, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Primitives::ButtonBase> for HyperlinkButton {}
impl ::windows_core::CanTryInto<ContentControl> for HyperlinkButton {}
impl ::windows_core::CanTryInto<Control> for HyperlinkButton {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for HyperlinkButton {}
impl ::windows_core::CanTryInto<super::UIElement> for HyperlinkButton {}
impl ::windows_core::CanTryInto<super::DependencyObject> for HyperlinkButton {}
unsafe impl ::core::marker::Send for HyperlinkButton {}
unsafe impl ::core::marker::Sync for HyperlinkButton {}
#[repr(transparent)]
pub struct IconElement(::windows_core::IUnknown);
impl IconElement {}
impl ::core::cmp::PartialEq for IconElement {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IconElement {}
impl ::core::fmt::Debug for IconElement {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IconElement").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for IconElement {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.IconElement;{9af0803b-d04c-467a-bbd5-9b81f02d9a56})",
    );
}
impl ::core::clone::Clone for IconElement {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for IconElement {
    type Vtable = IIconElement_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IconElement {
    const IID: ::windows_core::GUID = <IIconElement as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for IconElement {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.IconElement";
}
::windows_core::imp::interface_hierarchy!(
    IconElement, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::FrameworkElement> for IconElement {}
impl ::windows_core::CanTryInto<super::UIElement> for IconElement {}
impl ::windows_core::CanTryInto<super::DependencyObject> for IconElement {}
unsafe impl ::core::marker::Send for IconElement {}
unsafe impl ::core::marker::Sync for IconElement {}
#[repr(transparent)]
pub struct IconSource(::windows_core::IUnknown);
impl IconSource {}
impl ::core::cmp::PartialEq for IconSource {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IconSource {}
impl ::core::fmt::Debug for IconSource {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IconSource").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for IconSource {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.IconSource;{92ec8d55-45eb-47a4-863c-91b224044f9b})",
    );
}
impl ::core::clone::Clone for IconSource {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for IconSource {
    type Vtable = IIconSource_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IconSource {
    const IID: ::windows_core::GUID = <IIconSource as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for IconSource {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.IconSource";
}
::windows_core::imp::interface_hierarchy!(
    IconSource, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::DependencyObject> for IconSource {}
unsafe impl ::core::marker::Send for IconSource {}
unsafe impl ::core::marker::Sync for IconSource {}
#[repr(transparent)]
pub struct IconSourceElement(::windows_core::IUnknown);
impl IconSourceElement {}
impl ::core::cmp::PartialEq for IconSourceElement {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IconSourceElement {}
impl ::core::fmt::Debug for IconSourceElement {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IconSourceElement").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for IconSourceElement {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.IconSourceElement;{d7a64502-ddda-55cd-b4c9-e79abc8b0ea4})",
    );
}
impl ::core::clone::Clone for IconSourceElement {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for IconSourceElement {
    type Vtable = IIconSourceElement_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IconSourceElement {
    const IID: ::windows_core::GUID = <IIconSourceElement as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for IconSourceElement {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.IconSourceElement";
}
::windows_core::imp::interface_hierarchy!(
    IconSourceElement, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IconElement> for IconSourceElement {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for IconSourceElement {}
impl ::windows_core::CanTryInto<super::UIElement> for IconSourceElement {}
impl ::windows_core::CanTryInto<super::DependencyObject> for IconSourceElement {}
unsafe impl ::core::marker::Send for IconSourceElement {}
unsafe impl ::core::marker::Sync for IconSourceElement {}
#[repr(transparent)]
pub struct Image(::windows_core::IUnknown);
impl Image {}
impl ::core::cmp::PartialEq for Image {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Image {}
impl ::core::fmt::Debug for Image {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Image").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for Image {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.Image;{495b7402-9af3-4e50-aa90-03388f3086d2})",
    );
}
impl ::core::clone::Clone for Image {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for Image {
    type Vtable = IImage_Vtbl;
}
unsafe impl ::windows_core::ComInterface for Image {
    const IID: ::windows_core::GUID = <IImage as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for Image {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.Image";
}
::windows_core::imp::interface_hierarchy!(
    Image, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::FrameworkElement> for Image {}
impl ::windows_core::CanTryInto<super::UIElement> for Image {}
impl ::windows_core::CanTryInto<super::DependencyObject> for Image {}
unsafe impl ::core::marker::Send for Image {}
unsafe impl ::core::marker::Sync for Image {}
#[repr(transparent)]
pub struct InkCanvas(::windows_core::IUnknown);
impl InkCanvas {}
impl ::core::cmp::PartialEq for InkCanvas {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for InkCanvas {}
impl ::core::fmt::Debug for InkCanvas {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkCanvas").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkCanvas {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.InkCanvas;{29443c28-8e48-4fc8-a473-35b0ba12acea})",
    );
}
impl ::core::clone::Clone for InkCanvas {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for InkCanvas {
    type Vtable = IInkCanvas_Vtbl;
}
unsafe impl ::windows_core::ComInterface for InkCanvas {
    const IID: ::windows_core::GUID = <IInkCanvas as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for InkCanvas {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.InkCanvas";
}
::windows_core::imp::interface_hierarchy!(
    InkCanvas, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::FrameworkElement> for InkCanvas {}
impl ::windows_core::CanTryInto<super::UIElement> for InkCanvas {}
impl ::windows_core::CanTryInto<super::DependencyObject> for InkCanvas {}
unsafe impl ::core::marker::Send for InkCanvas {}
unsafe impl ::core::marker::Sync for InkCanvas {}
#[repr(transparent)]
pub struct InkToolbar(::windows_core::IUnknown);
impl InkToolbar {}
impl ::core::cmp::PartialEq for InkToolbar {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for InkToolbar {}
impl ::core::fmt::Debug for InkToolbar {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbar").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbar {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.InkToolbar;{3ddd0cca-51f0-486f-a03e-4ee13dc12bcb})",
    );
}
impl ::core::clone::Clone for InkToolbar {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for InkToolbar {
    type Vtable = IInkToolbar_Vtbl;
}
unsafe impl ::windows_core::ComInterface for InkToolbar {
    const IID: ::windows_core::GUID = <IInkToolbar as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for InkToolbar {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.InkToolbar";
}
::windows_core::imp::interface_hierarchy!(
    InkToolbar, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for InkToolbar {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for InkToolbar {}
impl ::windows_core::CanTryInto<super::UIElement> for InkToolbar {}
impl ::windows_core::CanTryInto<super::DependencyObject> for InkToolbar {}
unsafe impl ::core::marker::Send for InkToolbar {}
unsafe impl ::core::marker::Sync for InkToolbar {}
#[repr(transparent)]
pub struct InkToolbarBallpointPenButton(::windows_core::IUnknown);
impl InkToolbarBallpointPenButton {}
impl ::core::cmp::PartialEq for InkToolbarBallpointPenButton {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for InkToolbarBallpointPenButton {}
impl ::core::fmt::Debug for InkToolbarBallpointPenButton {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarBallpointPenButton").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarBallpointPenButton {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.InkToolbarBallpointPenButton;{158329f8-1e99-3acc-910f-9da2d872ae12})",
    );
}
impl ::core::clone::Clone for InkToolbarBallpointPenButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for InkToolbarBallpointPenButton {
    type Vtable = IInkToolbarBallpointPenButton_Vtbl;
}
unsafe impl ::windows_core::ComInterface for InkToolbarBallpointPenButton {
    const IID: ::windows_core::GUID = <IInkToolbarBallpointPenButton as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for InkToolbarBallpointPenButton {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.InkToolbarBallpointPenButton";
}
::windows_core::imp::interface_hierarchy!(
    InkToolbarBallpointPenButton, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<InkToolbarPenButton> for InkToolbarBallpointPenButton {}
impl ::windows_core::CanTryInto<InkToolbarToolButton> for InkToolbarBallpointPenButton {}
impl ::windows_core::CanTryInto<RadioButton> for InkToolbarBallpointPenButton {}
impl ::windows_core::CanTryInto<Primitives::ToggleButton>
for InkToolbarBallpointPenButton {}
impl ::windows_core::CanTryInto<Primitives::ButtonBase>
for InkToolbarBallpointPenButton {}
impl ::windows_core::CanTryInto<ContentControl> for InkToolbarBallpointPenButton {}
impl ::windows_core::CanTryInto<Control> for InkToolbarBallpointPenButton {}
impl ::windows_core::CanTryInto<super::FrameworkElement>
for InkToolbarBallpointPenButton {}
impl ::windows_core::CanTryInto<super::UIElement> for InkToolbarBallpointPenButton {}
impl ::windows_core::CanTryInto<super::DependencyObject>
for InkToolbarBallpointPenButton {}
unsafe impl ::core::marker::Send for InkToolbarBallpointPenButton {}
unsafe impl ::core::marker::Sync for InkToolbarBallpointPenButton {}
#[repr(transparent)]
pub struct InkToolbarCustomPen(::windows_core::IUnknown);
impl InkToolbarCustomPen {}
impl ::core::cmp::PartialEq for InkToolbarCustomPen {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for InkToolbarCustomPen {}
impl ::core::fmt::Debug for InkToolbarCustomPen {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarCustomPen").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarCustomPen {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.InkToolbarCustomPen;{4082207b-2f3d-4e6a-8c27-fe61ef7e70eb})",
    );
}
impl ::core::clone::Clone for InkToolbarCustomPen {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for InkToolbarCustomPen {
    type Vtable = IInkToolbarCustomPen_Vtbl;
}
unsafe impl ::windows_core::ComInterface for InkToolbarCustomPen {
    const IID: ::windows_core::GUID = <IInkToolbarCustomPen as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for InkToolbarCustomPen {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.InkToolbarCustomPen";
}
::windows_core::imp::interface_hierarchy!(
    InkToolbarCustomPen, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::DependencyObject> for InkToolbarCustomPen {}
unsafe impl ::core::marker::Send for InkToolbarCustomPen {}
unsafe impl ::core::marker::Sync for InkToolbarCustomPen {}
#[repr(transparent)]
pub struct InkToolbarCustomPenButton(::windows_core::IUnknown);
impl InkToolbarCustomPenButton {}
impl ::core::cmp::PartialEq for InkToolbarCustomPenButton {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for InkToolbarCustomPenButton {}
impl ::core::fmt::Debug for InkToolbarCustomPenButton {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarCustomPenButton").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarCustomPenButton {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.InkToolbarCustomPenButton;{46024401-2b2a-4f3c-a53c-1a045a408efa})",
    );
}
impl ::core::clone::Clone for InkToolbarCustomPenButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for InkToolbarCustomPenButton {
    type Vtable = IInkToolbarCustomPenButton_Vtbl;
}
unsafe impl ::windows_core::ComInterface for InkToolbarCustomPenButton {
    const IID: ::windows_core::GUID = <IInkToolbarCustomPenButton as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for InkToolbarCustomPenButton {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.InkToolbarCustomPenButton";
}
::windows_core::imp::interface_hierarchy!(
    InkToolbarCustomPenButton, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<InkToolbarPenButton> for InkToolbarCustomPenButton {}
impl ::windows_core::CanTryInto<InkToolbarToolButton> for InkToolbarCustomPenButton {}
impl ::windows_core::CanTryInto<RadioButton> for InkToolbarCustomPenButton {}
impl ::windows_core::CanTryInto<Primitives::ToggleButton> for InkToolbarCustomPenButton {}
impl ::windows_core::CanTryInto<Primitives::ButtonBase> for InkToolbarCustomPenButton {}
impl ::windows_core::CanTryInto<ContentControl> for InkToolbarCustomPenButton {}
impl ::windows_core::CanTryInto<Control> for InkToolbarCustomPenButton {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for InkToolbarCustomPenButton {}
impl ::windows_core::CanTryInto<super::UIElement> for InkToolbarCustomPenButton {}
impl ::windows_core::CanTryInto<super::DependencyObject> for InkToolbarCustomPenButton {}
unsafe impl ::core::marker::Send for InkToolbarCustomPenButton {}
unsafe impl ::core::marker::Sync for InkToolbarCustomPenButton {}
#[repr(transparent)]
pub struct InkToolbarCustomToggleButton(::windows_core::IUnknown);
impl InkToolbarCustomToggleButton {}
impl ::core::cmp::PartialEq for InkToolbarCustomToggleButton {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for InkToolbarCustomToggleButton {}
impl ::core::fmt::Debug for InkToolbarCustomToggleButton {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarCustomToggleButton").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarCustomToggleButton {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton;{550c4d84-4f54-4fbe-b12b-e0a50aab0d05})",
    );
}
impl ::core::clone::Clone for InkToolbarCustomToggleButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for InkToolbarCustomToggleButton {
    type Vtable = IInkToolbarCustomToggleButton_Vtbl;
}
unsafe impl ::windows_core::ComInterface for InkToolbarCustomToggleButton {
    const IID: ::windows_core::GUID = <IInkToolbarCustomToggleButton as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for InkToolbarCustomToggleButton {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton";
}
::windows_core::imp::interface_hierarchy!(
    InkToolbarCustomToggleButton, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<InkToolbarToggleButton>
for InkToolbarCustomToggleButton {}
impl ::windows_core::CanTryInto<CheckBox> for InkToolbarCustomToggleButton {}
impl ::windows_core::CanTryInto<Primitives::ToggleButton>
for InkToolbarCustomToggleButton {}
impl ::windows_core::CanTryInto<Primitives::ButtonBase>
for InkToolbarCustomToggleButton {}
impl ::windows_core::CanTryInto<ContentControl> for InkToolbarCustomToggleButton {}
impl ::windows_core::CanTryInto<Control> for InkToolbarCustomToggleButton {}
impl ::windows_core::CanTryInto<super::FrameworkElement>
for InkToolbarCustomToggleButton {}
impl ::windows_core::CanTryInto<super::UIElement> for InkToolbarCustomToggleButton {}
impl ::windows_core::CanTryInto<super::DependencyObject>
for InkToolbarCustomToggleButton {}
unsafe impl ::core::marker::Send for InkToolbarCustomToggleButton {}
unsafe impl ::core::marker::Sync for InkToolbarCustomToggleButton {}
#[repr(transparent)]
pub struct InkToolbarCustomToolButton(::windows_core::IUnknown);
impl InkToolbarCustomToolButton {}
impl ::core::cmp::PartialEq for InkToolbarCustomToolButton {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for InkToolbarCustomToolButton {}
impl ::core::fmt::Debug for InkToolbarCustomToolButton {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarCustomToolButton").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarCustomToolButton {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.InkToolbarCustomToolButton;{9f98acd7-c605-4105-be10-3943a7c0da3c})",
    );
}
impl ::core::clone::Clone for InkToolbarCustomToolButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for InkToolbarCustomToolButton {
    type Vtable = IInkToolbarCustomToolButton_Vtbl;
}
unsafe impl ::windows_core::ComInterface for InkToolbarCustomToolButton {
    const IID: ::windows_core::GUID = <IInkToolbarCustomToolButton as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for InkToolbarCustomToolButton {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.InkToolbarCustomToolButton";
}
::windows_core::imp::interface_hierarchy!(
    InkToolbarCustomToolButton, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<InkToolbarToolButton> for InkToolbarCustomToolButton {}
impl ::windows_core::CanTryInto<RadioButton> for InkToolbarCustomToolButton {}
impl ::windows_core::CanTryInto<Primitives::ToggleButton>
for InkToolbarCustomToolButton {}
impl ::windows_core::CanTryInto<Primitives::ButtonBase> for InkToolbarCustomToolButton {}
impl ::windows_core::CanTryInto<ContentControl> for InkToolbarCustomToolButton {}
impl ::windows_core::CanTryInto<Control> for InkToolbarCustomToolButton {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for InkToolbarCustomToolButton {}
impl ::windows_core::CanTryInto<super::UIElement> for InkToolbarCustomToolButton {}
impl ::windows_core::CanTryInto<super::DependencyObject> for InkToolbarCustomToolButton {}
unsafe impl ::core::marker::Send for InkToolbarCustomToolButton {}
unsafe impl ::core::marker::Sync for InkToolbarCustomToolButton {}
#[repr(transparent)]
pub struct InkToolbarEraserButton(::windows_core::IUnknown);
impl InkToolbarEraserButton {}
impl ::core::cmp::PartialEq for InkToolbarEraserButton {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for InkToolbarEraserButton {}
impl ::core::fmt::Debug for InkToolbarEraserButton {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarEraserButton").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarEraserButton {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.InkToolbarEraserButton;{4cbdb92e-5f5e-4b35-a41c-16ffb0283bc0})",
    );
}
impl ::core::clone::Clone for InkToolbarEraserButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for InkToolbarEraserButton {
    type Vtable = IInkToolbarEraserButton_Vtbl;
}
unsafe impl ::windows_core::ComInterface for InkToolbarEraserButton {
    const IID: ::windows_core::GUID = <IInkToolbarEraserButton as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for InkToolbarEraserButton {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.InkToolbarEraserButton";
}
::windows_core::imp::interface_hierarchy!(
    InkToolbarEraserButton, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<InkToolbarToolButton> for InkToolbarEraserButton {}
impl ::windows_core::CanTryInto<RadioButton> for InkToolbarEraserButton {}
impl ::windows_core::CanTryInto<Primitives::ToggleButton> for InkToolbarEraserButton {}
impl ::windows_core::CanTryInto<Primitives::ButtonBase> for InkToolbarEraserButton {}
impl ::windows_core::CanTryInto<ContentControl> for InkToolbarEraserButton {}
impl ::windows_core::CanTryInto<Control> for InkToolbarEraserButton {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for InkToolbarEraserButton {}
impl ::windows_core::CanTryInto<super::UIElement> for InkToolbarEraserButton {}
impl ::windows_core::CanTryInto<super::DependencyObject> for InkToolbarEraserButton {}
unsafe impl ::core::marker::Send for InkToolbarEraserButton {}
unsafe impl ::core::marker::Sync for InkToolbarEraserButton {}
#[repr(transparent)]
pub struct InkToolbarFlyoutItem(::windows_core::IUnknown);
impl InkToolbarFlyoutItem {}
impl ::core::cmp::PartialEq for InkToolbarFlyoutItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for InkToolbarFlyoutItem {}
impl ::core::fmt::Debug for InkToolbarFlyoutItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarFlyoutItem").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarFlyoutItem {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.InkToolbarFlyoutItem;{92b68786-37ee-4915-9e89-e187564a889a})",
    );
}
impl ::core::clone::Clone for InkToolbarFlyoutItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for InkToolbarFlyoutItem {
    type Vtable = IInkToolbarFlyoutItem_Vtbl;
}
unsafe impl ::windows_core::ComInterface for InkToolbarFlyoutItem {
    const IID: ::windows_core::GUID = <IInkToolbarFlyoutItem as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for InkToolbarFlyoutItem {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.InkToolbarFlyoutItem";
}
::windows_core::imp::interface_hierarchy!(
    InkToolbarFlyoutItem, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Primitives::ButtonBase> for InkToolbarFlyoutItem {}
impl ::windows_core::CanTryInto<ContentControl> for InkToolbarFlyoutItem {}
impl ::windows_core::CanTryInto<Control> for InkToolbarFlyoutItem {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for InkToolbarFlyoutItem {}
impl ::windows_core::CanTryInto<super::UIElement> for InkToolbarFlyoutItem {}
impl ::windows_core::CanTryInto<super::DependencyObject> for InkToolbarFlyoutItem {}
unsafe impl ::core::marker::Send for InkToolbarFlyoutItem {}
unsafe impl ::core::marker::Sync for InkToolbarFlyoutItem {}
#[repr(transparent)]
pub struct InkToolbarHighlighterButton(::windows_core::IUnknown);
impl InkToolbarHighlighterButton {}
impl ::core::cmp::PartialEq for InkToolbarHighlighterButton {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for InkToolbarHighlighterButton {}
impl ::core::fmt::Debug for InkToolbarHighlighterButton {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarHighlighterButton").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarHighlighterButton {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.InkToolbarHighlighterButton;{0b3cc15b-7abf-487e-acc1-5b5048fee6d2})",
    );
}
impl ::core::clone::Clone for InkToolbarHighlighterButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for InkToolbarHighlighterButton {
    type Vtable = IInkToolbarHighlighterButton_Vtbl;
}
unsafe impl ::windows_core::ComInterface for InkToolbarHighlighterButton {
    const IID: ::windows_core::GUID = <IInkToolbarHighlighterButton as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for InkToolbarHighlighterButton {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.InkToolbarHighlighterButton";
}
::windows_core::imp::interface_hierarchy!(
    InkToolbarHighlighterButton, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<InkToolbarPenButton> for InkToolbarHighlighterButton {}
impl ::windows_core::CanTryInto<InkToolbarToolButton> for InkToolbarHighlighterButton {}
impl ::windows_core::CanTryInto<RadioButton> for InkToolbarHighlighterButton {}
impl ::windows_core::CanTryInto<Primitives::ToggleButton>
for InkToolbarHighlighterButton {}
impl ::windows_core::CanTryInto<Primitives::ButtonBase> for InkToolbarHighlighterButton {}
impl ::windows_core::CanTryInto<ContentControl> for InkToolbarHighlighterButton {}
impl ::windows_core::CanTryInto<Control> for InkToolbarHighlighterButton {}
impl ::windows_core::CanTryInto<super::FrameworkElement>
for InkToolbarHighlighterButton {}
impl ::windows_core::CanTryInto<super::UIElement> for InkToolbarHighlighterButton {}
impl ::windows_core::CanTryInto<super::DependencyObject>
for InkToolbarHighlighterButton {}
unsafe impl ::core::marker::Send for InkToolbarHighlighterButton {}
unsafe impl ::core::marker::Sync for InkToolbarHighlighterButton {}
#[repr(transparent)]
pub struct InkToolbarIsStencilButtonCheckedChangedEventArgs(::windows_core::IUnknown);
impl InkToolbarIsStencilButtonCheckedChangedEventArgs {}
impl ::core::cmp::PartialEq for InkToolbarIsStencilButtonCheckedChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for InkToolbarIsStencilButtonCheckedChangedEventArgs {}
impl ::core::fmt::Debug for InkToolbarIsStencilButtonCheckedChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarIsStencilButtonCheckedChangedEventArgs")
            .field(&self.0)
            .finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarIsStencilButtonCheckedChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.InkToolbarIsStencilButtonCheckedChangedEventArgs;{026edd26-d32b-4e28-a033-d5097662b292})",
    );
}
impl ::core::clone::Clone for InkToolbarIsStencilButtonCheckedChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface
for InkToolbarIsStencilButtonCheckedChangedEventArgs {
    type Vtable = IInkToolbarIsStencilButtonCheckedChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface
for InkToolbarIsStencilButtonCheckedChangedEventArgs {
    const IID: ::windows_core::GUID = <IInkToolbarIsStencilButtonCheckedChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for InkToolbarIsStencilButtonCheckedChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.InkToolbarIsStencilButtonCheckedChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    InkToolbarIsStencilButtonCheckedChangedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for InkToolbarIsStencilButtonCheckedChangedEventArgs {}
unsafe impl ::core::marker::Sync for InkToolbarIsStencilButtonCheckedChangedEventArgs {}
#[repr(transparent)]
pub struct InkToolbarMenuButton(::windows_core::IUnknown);
impl InkToolbarMenuButton {}
impl ::core::cmp::PartialEq for InkToolbarMenuButton {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for InkToolbarMenuButton {}
impl ::core::fmt::Debug for InkToolbarMenuButton {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarMenuButton").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarMenuButton {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.InkToolbarMenuButton;{860ecae5-7633-4ea1-a209-50392d1aebd1})",
    );
}
impl ::core::clone::Clone for InkToolbarMenuButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for InkToolbarMenuButton {
    type Vtable = IInkToolbarMenuButton_Vtbl;
}
unsafe impl ::windows_core::ComInterface for InkToolbarMenuButton {
    const IID: ::windows_core::GUID = <IInkToolbarMenuButton as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for InkToolbarMenuButton {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.InkToolbarMenuButton";
}
::windows_core::imp::interface_hierarchy!(
    InkToolbarMenuButton, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Primitives::ToggleButton> for InkToolbarMenuButton {}
impl ::windows_core::CanTryInto<Primitives::ButtonBase> for InkToolbarMenuButton {}
impl ::windows_core::CanTryInto<ContentControl> for InkToolbarMenuButton {}
impl ::windows_core::CanTryInto<Control> for InkToolbarMenuButton {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for InkToolbarMenuButton {}
impl ::windows_core::CanTryInto<super::UIElement> for InkToolbarMenuButton {}
impl ::windows_core::CanTryInto<super::DependencyObject> for InkToolbarMenuButton {}
unsafe impl ::core::marker::Send for InkToolbarMenuButton {}
unsafe impl ::core::marker::Sync for InkToolbarMenuButton {}
#[repr(transparent)]
pub struct InkToolbarPenButton(::windows_core::IUnknown);
impl InkToolbarPenButton {}
impl ::core::cmp::PartialEq for InkToolbarPenButton {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for InkToolbarPenButton {}
impl ::core::fmt::Debug for InkToolbarPenButton {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarPenButton").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarPenButton {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.InkToolbarPenButton;{e0b80c21-b032-40ee-a2b9-507f6ccb827b})",
    );
}
impl ::core::clone::Clone for InkToolbarPenButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for InkToolbarPenButton {
    type Vtable = IInkToolbarPenButton_Vtbl;
}
unsafe impl ::windows_core::ComInterface for InkToolbarPenButton {
    const IID: ::windows_core::GUID = <IInkToolbarPenButton as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for InkToolbarPenButton {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.InkToolbarPenButton";
}
::windows_core::imp::interface_hierarchy!(
    InkToolbarPenButton, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<InkToolbarToolButton> for InkToolbarPenButton {}
impl ::windows_core::CanTryInto<RadioButton> for InkToolbarPenButton {}
impl ::windows_core::CanTryInto<Primitives::ToggleButton> for InkToolbarPenButton {}
impl ::windows_core::CanTryInto<Primitives::ButtonBase> for InkToolbarPenButton {}
impl ::windows_core::CanTryInto<ContentControl> for InkToolbarPenButton {}
impl ::windows_core::CanTryInto<Control> for InkToolbarPenButton {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for InkToolbarPenButton {}
impl ::windows_core::CanTryInto<super::UIElement> for InkToolbarPenButton {}
impl ::windows_core::CanTryInto<super::DependencyObject> for InkToolbarPenButton {}
unsafe impl ::core::marker::Send for InkToolbarPenButton {}
unsafe impl ::core::marker::Sync for InkToolbarPenButton {}
#[repr(transparent)]
pub struct InkToolbarPenConfigurationControl(::windows_core::IUnknown);
impl InkToolbarPenConfigurationControl {}
impl ::core::cmp::PartialEq for InkToolbarPenConfigurationControl {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for InkToolbarPenConfigurationControl {}
impl ::core::fmt::Debug for InkToolbarPenConfigurationControl {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarPenConfigurationControl").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarPenConfigurationControl {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.InkToolbarPenConfigurationControl;{601ae5f6-28a5-44cc-89a6-380e91a572dd})",
    );
}
impl ::core::clone::Clone for InkToolbarPenConfigurationControl {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for InkToolbarPenConfigurationControl {
    type Vtable = IInkToolbarPenConfigurationControl_Vtbl;
}
unsafe impl ::windows_core::ComInterface for InkToolbarPenConfigurationControl {
    const IID: ::windows_core::GUID = <IInkToolbarPenConfigurationControl as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for InkToolbarPenConfigurationControl {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.InkToolbarPenConfigurationControl";
}
::windows_core::imp::interface_hierarchy!(
    InkToolbarPenConfigurationControl, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for InkToolbarPenConfigurationControl {}
impl ::windows_core::CanTryInto<super::FrameworkElement>
for InkToolbarPenConfigurationControl {}
impl ::windows_core::CanTryInto<super::UIElement> for InkToolbarPenConfigurationControl {}
impl ::windows_core::CanTryInto<super::DependencyObject>
for InkToolbarPenConfigurationControl {}
unsafe impl ::core::marker::Send for InkToolbarPenConfigurationControl {}
unsafe impl ::core::marker::Sync for InkToolbarPenConfigurationControl {}
#[repr(transparent)]
pub struct InkToolbarPencilButton(::windows_core::IUnknown);
impl InkToolbarPencilButton {}
impl ::core::cmp::PartialEq for InkToolbarPencilButton {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for InkToolbarPencilButton {}
impl ::core::fmt::Debug for InkToolbarPencilButton {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarPencilButton").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarPencilButton {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.InkToolbarPencilButton;{5b112832-1984-4148-9f25-382b35db087f})",
    );
}
impl ::core::clone::Clone for InkToolbarPencilButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for InkToolbarPencilButton {
    type Vtable = IInkToolbarPencilButton_Vtbl;
}
unsafe impl ::windows_core::ComInterface for InkToolbarPencilButton {
    const IID: ::windows_core::GUID = <IInkToolbarPencilButton as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for InkToolbarPencilButton {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.InkToolbarPencilButton";
}
::windows_core::imp::interface_hierarchy!(
    InkToolbarPencilButton, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<InkToolbarPenButton> for InkToolbarPencilButton {}
impl ::windows_core::CanTryInto<InkToolbarToolButton> for InkToolbarPencilButton {}
impl ::windows_core::CanTryInto<RadioButton> for InkToolbarPencilButton {}
impl ::windows_core::CanTryInto<Primitives::ToggleButton> for InkToolbarPencilButton {}
impl ::windows_core::CanTryInto<Primitives::ButtonBase> for InkToolbarPencilButton {}
impl ::windows_core::CanTryInto<ContentControl> for InkToolbarPencilButton {}
impl ::windows_core::CanTryInto<Control> for InkToolbarPencilButton {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for InkToolbarPencilButton {}
impl ::windows_core::CanTryInto<super::UIElement> for InkToolbarPencilButton {}
impl ::windows_core::CanTryInto<super::DependencyObject> for InkToolbarPencilButton {}
unsafe impl ::core::marker::Send for InkToolbarPencilButton {}
unsafe impl ::core::marker::Sync for InkToolbarPencilButton {}
#[repr(transparent)]
pub struct InkToolbarStencilButton(::windows_core::IUnknown);
impl InkToolbarStencilButton {}
impl ::core::cmp::PartialEq for InkToolbarStencilButton {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for InkToolbarStencilButton {}
impl ::core::fmt::Debug for InkToolbarStencilButton {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarStencilButton").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarStencilButton {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.InkToolbarStencilButton;{306a2616-5b40-4bf3-92b7-f1df936aeff5})",
    );
}
impl ::core::clone::Clone for InkToolbarStencilButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for InkToolbarStencilButton {
    type Vtable = IInkToolbarStencilButton_Vtbl;
}
unsafe impl ::windows_core::ComInterface for InkToolbarStencilButton {
    const IID: ::windows_core::GUID = <IInkToolbarStencilButton as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for InkToolbarStencilButton {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.InkToolbarStencilButton";
}
::windows_core::imp::interface_hierarchy!(
    InkToolbarStencilButton, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<InkToolbarMenuButton> for InkToolbarStencilButton {}
impl ::windows_core::CanTryInto<Primitives::ToggleButton> for InkToolbarStencilButton {}
impl ::windows_core::CanTryInto<Primitives::ButtonBase> for InkToolbarStencilButton {}
impl ::windows_core::CanTryInto<ContentControl> for InkToolbarStencilButton {}
impl ::windows_core::CanTryInto<Control> for InkToolbarStencilButton {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for InkToolbarStencilButton {}
impl ::windows_core::CanTryInto<super::UIElement> for InkToolbarStencilButton {}
impl ::windows_core::CanTryInto<super::DependencyObject> for InkToolbarStencilButton {}
unsafe impl ::core::marker::Send for InkToolbarStencilButton {}
unsafe impl ::core::marker::Sync for InkToolbarStencilButton {}
#[repr(transparent)]
pub struct InkToolbarToggleButton(::windows_core::IUnknown);
impl InkToolbarToggleButton {}
impl ::core::cmp::PartialEq for InkToolbarToggleButton {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for InkToolbarToggleButton {}
impl ::core::fmt::Debug for InkToolbarToggleButton {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarToggleButton").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarToggleButton {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.InkToolbarToggleButton;{b4a278fa-f5f0-4b1f-beb0-0b8a29905a4a})",
    );
}
impl ::core::clone::Clone for InkToolbarToggleButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for InkToolbarToggleButton {
    type Vtable = IInkToolbarToggleButton_Vtbl;
}
unsafe impl ::windows_core::ComInterface for InkToolbarToggleButton {
    const IID: ::windows_core::GUID = <IInkToolbarToggleButton as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for InkToolbarToggleButton {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.InkToolbarToggleButton";
}
::windows_core::imp::interface_hierarchy!(
    InkToolbarToggleButton, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<CheckBox> for InkToolbarToggleButton {}
impl ::windows_core::CanTryInto<Primitives::ToggleButton> for InkToolbarToggleButton {}
impl ::windows_core::CanTryInto<Primitives::ButtonBase> for InkToolbarToggleButton {}
impl ::windows_core::CanTryInto<ContentControl> for InkToolbarToggleButton {}
impl ::windows_core::CanTryInto<Control> for InkToolbarToggleButton {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for InkToolbarToggleButton {}
impl ::windows_core::CanTryInto<super::UIElement> for InkToolbarToggleButton {}
impl ::windows_core::CanTryInto<super::DependencyObject> for InkToolbarToggleButton {}
unsafe impl ::core::marker::Send for InkToolbarToggleButton {}
unsafe impl ::core::marker::Sync for InkToolbarToggleButton {}
#[repr(transparent)]
pub struct InkToolbarToolButton(::windows_core::IUnknown);
impl InkToolbarToolButton {}
impl ::core::cmp::PartialEq for InkToolbarToolButton {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for InkToolbarToolButton {}
impl ::core::fmt::Debug for InkToolbarToolButton {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarToolButton").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarToolButton {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.InkToolbarToolButton;{5c5af41e-ccb7-4458-8064-a9849d31561b})",
    );
}
impl ::core::clone::Clone for InkToolbarToolButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for InkToolbarToolButton {
    type Vtable = IInkToolbarToolButton_Vtbl;
}
unsafe impl ::windows_core::ComInterface for InkToolbarToolButton {
    const IID: ::windows_core::GUID = <IInkToolbarToolButton as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for InkToolbarToolButton {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.InkToolbarToolButton";
}
::windows_core::imp::interface_hierarchy!(
    InkToolbarToolButton, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<RadioButton> for InkToolbarToolButton {}
impl ::windows_core::CanTryInto<Primitives::ToggleButton> for InkToolbarToolButton {}
impl ::windows_core::CanTryInto<Primitives::ButtonBase> for InkToolbarToolButton {}
impl ::windows_core::CanTryInto<ContentControl> for InkToolbarToolButton {}
impl ::windows_core::CanTryInto<Control> for InkToolbarToolButton {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for InkToolbarToolButton {}
impl ::windows_core::CanTryInto<super::UIElement> for InkToolbarToolButton {}
impl ::windows_core::CanTryInto<super::DependencyObject> for InkToolbarToolButton {}
unsafe impl ::core::marker::Send for InkToolbarToolButton {}
unsafe impl ::core::marker::Sync for InkToolbarToolButton {}
#[repr(transparent)]
pub struct IsTextTrimmedChangedEventArgs(::windows_core::IUnknown);
impl IsTextTrimmedChangedEventArgs {}
impl ::core::cmp::PartialEq for IsTextTrimmedChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IsTextTrimmedChangedEventArgs {}
impl ::core::fmt::Debug for IsTextTrimmedChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IsTextTrimmedChangedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for IsTextTrimmedChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs;{16f597cd-ebff-4fb4-8714-26147418b945})",
    );
}
impl ::core::clone::Clone for IsTextTrimmedChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for IsTextTrimmedChangedEventArgs {
    type Vtable = IIsTextTrimmedChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IsTextTrimmedChangedEventArgs {
    const IID: ::windows_core::GUID = <IIsTextTrimmedChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for IsTextTrimmedChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    IsTextTrimmedChangedEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for IsTextTrimmedChangedEventArgs {}
unsafe impl ::core::marker::Sync for IsTextTrimmedChangedEventArgs {}
#[repr(transparent)]
pub struct ItemClickEventArgs(::windows_core::IUnknown);
impl ItemClickEventArgs {}
impl ::core::cmp::PartialEq for ItemClickEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ItemClickEventArgs {}
impl ::core::fmt::Debug for ItemClickEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ItemClickEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ItemClickEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ItemClickEventArgs;{9c314242-f29a-494d-a3a5-d4c7b2a46852})",
    );
}
impl ::core::clone::Clone for ItemClickEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ItemClickEventArgs {
    type Vtable = IItemClickEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ItemClickEventArgs {
    const IID: ::windows_core::GUID = <IItemClickEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ItemClickEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ItemClickEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    ItemClickEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::RoutedEventArgs> for ItemClickEventArgs {}
unsafe impl ::core::marker::Send for ItemClickEventArgs {}
unsafe impl ::core::marker::Sync for ItemClickEventArgs {}
#[repr(transparent)]
pub struct ItemCollection(::windows_core::IUnknown);
impl ItemCollection {}
impl ::core::cmp::PartialEq for ItemCollection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ItemCollection {}
impl ::core::fmt::Debug for ItemCollection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ItemCollection").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ItemCollection {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ItemCollection;pinterface({5917eb53-50b4-4a0d-b309-65862b3f1dbc};cinterface(IInspectable)))",
    );
}
impl ::core::clone::Clone for ItemCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ItemCollection {
    type Vtable = super::super::super::Foundation::Collections::IObservableVector_Vtbl<
        ::windows_core::IInspectable,
    >;
}
unsafe impl ::windows_core::ComInterface for ItemCollection {
    const IID: ::windows_core::GUID = <super::super::super::Foundation::Collections::IObservableVector<
        ::windows_core::IInspectable,
    > as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ItemCollection {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ItemCollection";
}
impl ::core::iter::IntoIterator for ItemCollection {
    type Item = ::windows_core::IInspectable;
    type IntoIter = super::super::super::Foundation::Collections::VectorIterator<
        Self::Item,
    >;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
impl ::core::iter::IntoIterator for &ItemCollection {
    type Item = ::windows_core::IInspectable;
    type IntoIter = super::super::super::Foundation::Collections::VectorIterator<
        Self::Item,
    >;
    fn into_iter(self) -> Self::IntoIter {
        super::super::super::Foundation::Collections::VectorIterator::new(
            ::windows_core::ComInterface::cast(self).ok(),
        )
    }
}
::windows_core::imp::interface_hierarchy!(
    ItemCollection, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<
    super::super::super::Foundation::Collections::IIterable<::windows_core::IInspectable>,
> for ItemCollection {}
impl ::windows_core::CanTryInto<
    super::super::super::Foundation::Collections::IObservableVector<
        ::windows_core::IInspectable,
    >,
> for ItemCollection {}
impl ::windows_core::CanTryInto<
    super::super::super::Foundation::Collections::IVector<::windows_core::IInspectable>,
> for ItemCollection {}
unsafe impl ::core::marker::Send for ItemCollection {}
unsafe impl ::core::marker::Sync for ItemCollection {}
#[repr(transparent)]
pub struct ItemContainerGenerator(::windows_core::IUnknown);
impl ItemContainerGenerator {}
impl ::core::cmp::PartialEq for ItemContainerGenerator {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ItemContainerGenerator {}
impl ::core::fmt::Debug for ItemContainerGenerator {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ItemContainerGenerator").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ItemContainerGenerator {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ItemContainerGenerator;{40765f00-83f0-4d7f-b1b8-f19de4f1d5da})",
    );
}
impl ::core::clone::Clone for ItemContainerGenerator {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ItemContainerGenerator {
    type Vtable = IItemContainerGenerator_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ItemContainerGenerator {
    const IID: ::windows_core::GUID = <IItemContainerGenerator as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ItemContainerGenerator {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ItemContainerGenerator";
}
::windows_core::imp::interface_hierarchy!(
    ItemContainerGenerator, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ItemContainerGenerator {}
unsafe impl ::core::marker::Sync for ItemContainerGenerator {}
#[repr(transparent)]
pub struct ItemsControl(::windows_core::IUnknown);
impl ItemsControl {}
impl ::core::cmp::PartialEq for ItemsControl {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ItemsControl {}
impl ::core::fmt::Debug for ItemsControl {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ItemsControl").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ItemsControl {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ItemsControl;{f4a91dd8-d979-4381-8652-bda0342a765e})",
    );
}
impl ::core::clone::Clone for ItemsControl {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ItemsControl {
    type Vtable = IItemsControl_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ItemsControl {
    const IID: ::windows_core::GUID = <IItemsControl as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ItemsControl {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ItemsControl";
}
::windows_core::imp::interface_hierarchy!(
    ItemsControl, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IItemContainerMapping> for ItemsControl {}
impl ::windows_core::CanTryInto<Control> for ItemsControl {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ItemsControl {}
impl ::windows_core::CanTryInto<super::UIElement> for ItemsControl {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ItemsControl {}
unsafe impl ::core::marker::Send for ItemsControl {}
unsafe impl ::core::marker::Sync for ItemsControl {}
#[repr(transparent)]
pub struct ItemsPanelTemplate(::windows_core::IUnknown);
impl ItemsPanelTemplate {}
impl ::core::cmp::PartialEq for ItemsPanelTemplate {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ItemsPanelTemplate {}
impl ::core::fmt::Debug for ItemsPanelTemplate {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ItemsPanelTemplate").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ItemsPanelTemplate {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ItemsPanelTemplate;{14ead768-34b2-4b97-bf3c-e8d73230a2aa})",
    );
}
impl ::core::clone::Clone for ItemsPanelTemplate {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ItemsPanelTemplate {
    type Vtable = IItemsPanelTemplate_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ItemsPanelTemplate {
    const IID: ::windows_core::GUID = <IItemsPanelTemplate as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ItemsPanelTemplate {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ItemsPanelTemplate";
}
::windows_core::imp::interface_hierarchy!(
    ItemsPanelTemplate, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::FrameworkTemplate> for ItemsPanelTemplate {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ItemsPanelTemplate {}
unsafe impl ::core::marker::Send for ItemsPanelTemplate {}
unsafe impl ::core::marker::Sync for ItemsPanelTemplate {}
#[repr(transparent)]
pub struct ItemsPickedEventArgs(::windows_core::IUnknown);
impl ItemsPickedEventArgs {}
impl ::core::cmp::PartialEq for ItemsPickedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ItemsPickedEventArgs {}
impl ::core::fmt::Debug for ItemsPickedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ItemsPickedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ItemsPickedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ItemsPickedEventArgs;{f95b9aac-a621-488e-9156-8ee31165be04})",
    );
}
impl ::core::clone::Clone for ItemsPickedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ItemsPickedEventArgs {
    type Vtable = IItemsPickedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ItemsPickedEventArgs {
    const IID: ::windows_core::GUID = <IItemsPickedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ItemsPickedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ItemsPickedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    ItemsPickedEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::DependencyObject> for ItemsPickedEventArgs {}
unsafe impl ::core::marker::Send for ItemsPickedEventArgs {}
unsafe impl ::core::marker::Sync for ItemsPickedEventArgs {}
#[repr(transparent)]
pub struct ItemsPresenter(::windows_core::IUnknown);
impl ItemsPresenter {}
impl ::core::cmp::PartialEq for ItemsPresenter {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ItemsPresenter {}
impl ::core::fmt::Debug for ItemsPresenter {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ItemsPresenter").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ItemsPresenter {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ItemsPresenter;{c271569b-6dca-4e2b-8e14-c55136b02a71})",
    );
}
impl ::core::clone::Clone for ItemsPresenter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ItemsPresenter {
    type Vtable = IItemsPresenter_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ItemsPresenter {
    const IID: ::windows_core::GUID = <IItemsPresenter as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ItemsPresenter {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ItemsPresenter";
}
::windows_core::imp::interface_hierarchy!(
    ItemsPresenter, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Primitives::IScrollSnapPointsInfo> for ItemsPresenter {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ItemsPresenter {}
impl ::windows_core::CanTryInto<super::UIElement> for ItemsPresenter {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ItemsPresenter {}
unsafe impl ::core::marker::Send for ItemsPresenter {}
unsafe impl ::core::marker::Sync for ItemsPresenter {}
#[repr(transparent)]
pub struct ItemsStackPanel(::windows_core::IUnknown);
impl ItemsStackPanel {}
impl ::core::cmp::PartialEq for ItemsStackPanel {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ItemsStackPanel {}
impl ::core::fmt::Debug for ItemsStackPanel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ItemsStackPanel").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ItemsStackPanel {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ItemsStackPanel;{df7ab79d-7ad5-4b58-9363-919af90226e6})",
    );
}
impl ::core::clone::Clone for ItemsStackPanel {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ItemsStackPanel {
    type Vtable = IItemsStackPanel_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ItemsStackPanel {
    const IID: ::windows_core::GUID = <IItemsStackPanel as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ItemsStackPanel {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ItemsStackPanel";
}
::windows_core::imp::interface_hierarchy!(
    ItemsStackPanel, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Panel> for ItemsStackPanel {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ItemsStackPanel {}
impl ::windows_core::CanTryInto<super::UIElement> for ItemsStackPanel {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ItemsStackPanel {}
unsafe impl ::core::marker::Send for ItemsStackPanel {}
unsafe impl ::core::marker::Sync for ItemsStackPanel {}
#[repr(transparent)]
pub struct ItemsWrapGrid(::windows_core::IUnknown);
impl ItemsWrapGrid {}
impl ::core::cmp::PartialEq for ItemsWrapGrid {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ItemsWrapGrid {}
impl ::core::fmt::Debug for ItemsWrapGrid {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ItemsWrapGrid").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ItemsWrapGrid {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ItemsWrapGrid;{ddfe6b5f-ba88-4a7d-8a5b-e58caf0f4e2d})",
    );
}
impl ::core::clone::Clone for ItemsWrapGrid {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ItemsWrapGrid {
    type Vtable = IItemsWrapGrid_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ItemsWrapGrid {
    const IID: ::windows_core::GUID = <IItemsWrapGrid as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ItemsWrapGrid {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ItemsWrapGrid";
}
::windows_core::imp::interface_hierarchy!(
    ItemsWrapGrid, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Panel> for ItemsWrapGrid {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ItemsWrapGrid {}
impl ::windows_core::CanTryInto<super::UIElement> for ItemsWrapGrid {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ItemsWrapGrid {}
unsafe impl ::core::marker::Send for ItemsWrapGrid {}
unsafe impl ::core::marker::Sync for ItemsWrapGrid {}
#[repr(transparent)]
pub struct ListBox(::windows_core::IUnknown);
impl ListBox {}
impl ::core::cmp::PartialEq for ListBox {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ListBox {}
impl ::core::fmt::Debug for ListBox {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ListBox").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ListBox {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ListBox;{e9f3b9ff-8e91-4ecf-a707-c927f694f881})",
    );
}
impl ::core::clone::Clone for ListBox {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ListBox {
    type Vtable = IListBox_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ListBox {
    const IID: ::windows_core::GUID = <IListBox as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ListBox {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ListBox";
}
::windows_core::imp::interface_hierarchy!(
    ListBox, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IItemContainerMapping> for ListBox {}
impl ::windows_core::CanTryInto<Primitives::Selector> for ListBox {}
impl ::windows_core::CanTryInto<ItemsControl> for ListBox {}
impl ::windows_core::CanTryInto<Control> for ListBox {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ListBox {}
impl ::windows_core::CanTryInto<super::UIElement> for ListBox {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ListBox {}
unsafe impl ::core::marker::Send for ListBox {}
unsafe impl ::core::marker::Sync for ListBox {}
#[repr(transparent)]
pub struct ListBoxItem(::windows_core::IUnknown);
impl ListBoxItem {}
impl ::core::cmp::PartialEq for ListBoxItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ListBoxItem {}
impl ::core::fmt::Debug for ListBoxItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ListBoxItem").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ListBoxItem {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ListBoxItem;{43c13323-6edf-4e4b-b6b2-3a93eec41d95})",
    );
}
impl ::core::clone::Clone for ListBoxItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ListBoxItem {
    type Vtable = IListBoxItem_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ListBoxItem {
    const IID: ::windows_core::GUID = <IListBoxItem as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ListBoxItem {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ListBoxItem";
}
::windows_core::imp::interface_hierarchy!(
    ListBoxItem, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Primitives::SelectorItem> for ListBoxItem {}
impl ::windows_core::CanTryInto<ContentControl> for ListBoxItem {}
impl ::windows_core::CanTryInto<Control> for ListBoxItem {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ListBoxItem {}
impl ::windows_core::CanTryInto<super::UIElement> for ListBoxItem {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ListBoxItem {}
unsafe impl ::core::marker::Send for ListBoxItem {}
unsafe impl ::core::marker::Sync for ListBoxItem {}
#[repr(transparent)]
pub struct ListPickerFlyout(::windows_core::IUnknown);
impl ListPickerFlyout {}
impl ::core::cmp::PartialEq for ListPickerFlyout {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ListPickerFlyout {}
impl ::core::fmt::Debug for ListPickerFlyout {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ListPickerFlyout").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ListPickerFlyout {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ListPickerFlyout;{0f0cb9d7-e5f3-45e6-9063-ff7bbb193c47})",
    );
}
impl ::core::clone::Clone for ListPickerFlyout {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ListPickerFlyout {
    type Vtable = IListPickerFlyout_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ListPickerFlyout {
    const IID: ::windows_core::GUID = <IListPickerFlyout as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ListPickerFlyout {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ListPickerFlyout";
}
::windows_core::imp::interface_hierarchy!(
    ListPickerFlyout, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Primitives::PickerFlyoutBase> for ListPickerFlyout {}
impl ::windows_core::CanTryInto<Primitives::FlyoutBase> for ListPickerFlyout {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ListPickerFlyout {}
unsafe impl ::core::marker::Send for ListPickerFlyout {}
unsafe impl ::core::marker::Sync for ListPickerFlyout {}
#[repr(transparent)]
pub struct ListPickerFlyoutPresenter(::windows_core::IUnknown);
impl ListPickerFlyoutPresenter {}
impl ::core::cmp::PartialEq for ListPickerFlyoutPresenter {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ListPickerFlyoutPresenter {}
impl ::core::fmt::Debug for ListPickerFlyoutPresenter {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ListPickerFlyoutPresenter").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ListPickerFlyoutPresenter {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ListPickerFlyoutPresenter;{68155fb3-883e-417a-80d0-e2fd88410084})",
    );
}
impl ::core::clone::Clone for ListPickerFlyoutPresenter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ListPickerFlyoutPresenter {
    type Vtable = IListPickerFlyoutPresenter_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ListPickerFlyoutPresenter {
    const IID: ::windows_core::GUID = <IListPickerFlyoutPresenter as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ListPickerFlyoutPresenter {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ListPickerFlyoutPresenter";
}
::windows_core::imp::interface_hierarchy!(
    ListPickerFlyoutPresenter, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for ListPickerFlyoutPresenter {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ListPickerFlyoutPresenter {}
impl ::windows_core::CanTryInto<super::UIElement> for ListPickerFlyoutPresenter {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ListPickerFlyoutPresenter {}
unsafe impl ::core::marker::Send for ListPickerFlyoutPresenter {}
unsafe impl ::core::marker::Sync for ListPickerFlyoutPresenter {}
#[repr(transparent)]
pub struct ListView(::windows_core::IUnknown);
impl ListView {}
impl ::core::cmp::PartialEq for ListView {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ListView {}
impl ::core::fmt::Debug for ListView {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ListView").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ListView {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ListView;{f6ce8c6d-fe96-41ad-a64a-c2b81c4af7f8})",
    );
}
impl ::core::clone::Clone for ListView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ListView {
    type Vtable = IListView_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ListView {
    const IID: ::windows_core::GUID = <IListView as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ListView {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ListView";
}
::windows_core::imp::interface_hierarchy!(
    ListView, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IItemContainerMapping> for ListView {}
impl ::windows_core::CanTryInto<ISemanticZoomInformation> for ListView {}
impl ::windows_core::CanTryInto<ListViewBase> for ListView {}
impl ::windows_core::CanTryInto<Primitives::Selector> for ListView {}
impl ::windows_core::CanTryInto<ItemsControl> for ListView {}
impl ::windows_core::CanTryInto<Control> for ListView {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ListView {}
impl ::windows_core::CanTryInto<super::UIElement> for ListView {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ListView {}
unsafe impl ::core::marker::Send for ListView {}
unsafe impl ::core::marker::Sync for ListView {}
#[repr(transparent)]
pub struct ListViewBase(::windows_core::IUnknown);
impl ListViewBase {}
impl ::core::cmp::PartialEq for ListViewBase {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ListViewBase {}
impl ::core::fmt::Debug for ListViewBase {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ListViewBase").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ListViewBase {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ListViewBase;{3d0813ba-6890-4537-bfe5-796d9458edd6})",
    );
}
impl ::core::clone::Clone for ListViewBase {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ListViewBase {
    type Vtable = IListViewBase_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ListViewBase {
    const IID: ::windows_core::GUID = <IListViewBase as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ListViewBase {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ListViewBase";
}
::windows_core::imp::interface_hierarchy!(
    ListViewBase, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IItemContainerMapping> for ListViewBase {}
impl ::windows_core::CanTryInto<ISemanticZoomInformation> for ListViewBase {}
impl ::windows_core::CanTryInto<Primitives::Selector> for ListViewBase {}
impl ::windows_core::CanTryInto<ItemsControl> for ListViewBase {}
impl ::windows_core::CanTryInto<Control> for ListViewBase {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ListViewBase {}
impl ::windows_core::CanTryInto<super::UIElement> for ListViewBase {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ListViewBase {}
unsafe impl ::core::marker::Send for ListViewBase {}
unsafe impl ::core::marker::Sync for ListViewBase {}
#[repr(transparent)]
pub struct ListViewBaseHeaderItem(::windows_core::IUnknown);
impl ListViewBaseHeaderItem {}
impl ::core::cmp::PartialEq for ListViewBaseHeaderItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ListViewBaseHeaderItem {}
impl ::core::fmt::Debug for ListViewBaseHeaderItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ListViewBaseHeaderItem").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ListViewBaseHeaderItem {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ListViewBaseHeaderItem;{6d0ded27-0d19-4091-8917-ce7c85c1e630})",
    );
}
impl ::core::clone::Clone for ListViewBaseHeaderItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ListViewBaseHeaderItem {
    type Vtable = IListViewBaseHeaderItem_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ListViewBaseHeaderItem {
    const IID: ::windows_core::GUID = <IListViewBaseHeaderItem as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ListViewBaseHeaderItem {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ListViewBaseHeaderItem";
}
::windows_core::imp::interface_hierarchy!(
    ListViewBaseHeaderItem, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ContentControl> for ListViewBaseHeaderItem {}
impl ::windows_core::CanTryInto<Control> for ListViewBaseHeaderItem {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ListViewBaseHeaderItem {}
impl ::windows_core::CanTryInto<super::UIElement> for ListViewBaseHeaderItem {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ListViewBaseHeaderItem {}
unsafe impl ::core::marker::Send for ListViewBaseHeaderItem {}
unsafe impl ::core::marker::Sync for ListViewBaseHeaderItem {}
#[repr(transparent)]
pub struct ListViewHeaderItem(::windows_core::IUnknown);
impl ListViewHeaderItem {}
impl ::core::cmp::PartialEq for ListViewHeaderItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ListViewHeaderItem {}
impl ::core::fmt::Debug for ListViewHeaderItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ListViewHeaderItem").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ListViewHeaderItem {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ListViewHeaderItem;{1b61baeb-e196-4b3b-a5f9-1ed636f3f79b})",
    );
}
impl ::core::clone::Clone for ListViewHeaderItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ListViewHeaderItem {
    type Vtable = IListViewHeaderItem_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ListViewHeaderItem {
    const IID: ::windows_core::GUID = <IListViewHeaderItem as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ListViewHeaderItem {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ListViewHeaderItem";
}
::windows_core::imp::interface_hierarchy!(
    ListViewHeaderItem, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ListViewBaseHeaderItem> for ListViewHeaderItem {}
impl ::windows_core::CanTryInto<ContentControl> for ListViewHeaderItem {}
impl ::windows_core::CanTryInto<Control> for ListViewHeaderItem {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ListViewHeaderItem {}
impl ::windows_core::CanTryInto<super::UIElement> for ListViewHeaderItem {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ListViewHeaderItem {}
unsafe impl ::core::marker::Send for ListViewHeaderItem {}
unsafe impl ::core::marker::Sync for ListViewHeaderItem {}
#[repr(transparent)]
pub struct ListViewItem(::windows_core::IUnknown);
impl ListViewItem {}
impl ::core::cmp::PartialEq for ListViewItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ListViewItem {}
impl ::core::fmt::Debug for ListViewItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ListViewItem").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ListViewItem {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ListViewItem;{b7bb4305-3dd9-43de-a8c0-c472f085bc11})",
    );
}
impl ::core::clone::Clone for ListViewItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ListViewItem {
    type Vtable = IListViewItem_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ListViewItem {
    const IID: ::windows_core::GUID = <IListViewItem as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ListViewItem {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ListViewItem";
}
::windows_core::imp::interface_hierarchy!(
    ListViewItem, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Primitives::SelectorItem> for ListViewItem {}
impl ::windows_core::CanTryInto<ContentControl> for ListViewItem {}
impl ::windows_core::CanTryInto<Control> for ListViewItem {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ListViewItem {}
impl ::windows_core::CanTryInto<super::UIElement> for ListViewItem {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ListViewItem {}
unsafe impl ::core::marker::Send for ListViewItem {}
unsafe impl ::core::marker::Sync for ListViewItem {}
#[repr(transparent)]
pub struct ListViewPersistenceHelper(::windows_core::IUnknown);
impl ListViewPersistenceHelper {}
impl ::core::cmp::PartialEq for ListViewPersistenceHelper {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ListViewPersistenceHelper {}
impl ::core::fmt::Debug for ListViewPersistenceHelper {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ListViewPersistenceHelper").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ListViewPersistenceHelper {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ListViewPersistenceHelper;{05bde8a6-2191-4b4b-8c22-9b25676e806e})",
    );
}
impl ::core::clone::Clone for ListViewPersistenceHelper {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ListViewPersistenceHelper {
    type Vtable = IListViewPersistenceHelper_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ListViewPersistenceHelper {
    const IID: ::windows_core::GUID = <IListViewPersistenceHelper as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ListViewPersistenceHelper {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ListViewPersistenceHelper";
}
::windows_core::imp::interface_hierarchy!(
    ListViewPersistenceHelper, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ListViewPersistenceHelper {}
unsafe impl ::core::marker::Sync for ListViewPersistenceHelper {}
#[repr(transparent)]
pub struct MediaElement(::windows_core::IUnknown);
impl MediaElement {}
impl ::core::cmp::PartialEq for MediaElement {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for MediaElement {}
impl ::core::fmt::Debug for MediaElement {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MediaElement").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for MediaElement {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.MediaElement;{a38ed2cf-13de-4299-ade2-ae18f74ed353})",
    );
}
impl ::core::clone::Clone for MediaElement {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for MediaElement {
    type Vtable = IMediaElement_Vtbl;
}
unsafe impl ::windows_core::ComInterface for MediaElement {
    const IID: ::windows_core::GUID = <IMediaElement as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for MediaElement {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.MediaElement";
}
::windows_core::imp::interface_hierarchy!(
    MediaElement, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::FrameworkElement> for MediaElement {}
impl ::windows_core::CanTryInto<super::UIElement> for MediaElement {}
impl ::windows_core::CanTryInto<super::DependencyObject> for MediaElement {}
unsafe impl ::core::marker::Send for MediaElement {}
unsafe impl ::core::marker::Sync for MediaElement {}
#[repr(transparent)]
pub struct MediaPlayerElement(::windows_core::IUnknown);
impl MediaPlayerElement {}
impl ::core::cmp::PartialEq for MediaPlayerElement {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for MediaPlayerElement {}
impl ::core::fmt::Debug for MediaPlayerElement {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MediaPlayerElement").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for MediaPlayerElement {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.MediaPlayerElement;{3b4ca526-2e25-4598-bc71-d491f8e8de39})",
    );
}
impl ::core::clone::Clone for MediaPlayerElement {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for MediaPlayerElement {
    type Vtable = IMediaPlayerElement_Vtbl;
}
unsafe impl ::windows_core::ComInterface for MediaPlayerElement {
    const IID: ::windows_core::GUID = <IMediaPlayerElement as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for MediaPlayerElement {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.MediaPlayerElement";
}
::windows_core::imp::interface_hierarchy!(
    MediaPlayerElement, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for MediaPlayerElement {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for MediaPlayerElement {}
impl ::windows_core::CanTryInto<super::UIElement> for MediaPlayerElement {}
impl ::windows_core::CanTryInto<super::DependencyObject> for MediaPlayerElement {}
unsafe impl ::core::marker::Send for MediaPlayerElement {}
unsafe impl ::core::marker::Sync for MediaPlayerElement {}
#[repr(transparent)]
pub struct MediaPlayerPresenter(::windows_core::IUnknown);
impl MediaPlayerPresenter {}
impl ::core::cmp::PartialEq for MediaPlayerPresenter {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for MediaPlayerPresenter {}
impl ::core::fmt::Debug for MediaPlayerPresenter {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MediaPlayerPresenter").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for MediaPlayerPresenter {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.MediaPlayerPresenter;{77a92326-0c5b-41fc-bf49-15f6c3524b6b})",
    );
}
impl ::core::clone::Clone for MediaPlayerPresenter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for MediaPlayerPresenter {
    type Vtable = IMediaPlayerPresenter_Vtbl;
}
unsafe impl ::windows_core::ComInterface for MediaPlayerPresenter {
    const IID: ::windows_core::GUID = <IMediaPlayerPresenter as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for MediaPlayerPresenter {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.MediaPlayerPresenter";
}
::windows_core::imp::interface_hierarchy!(
    MediaPlayerPresenter, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::FrameworkElement> for MediaPlayerPresenter {}
impl ::windows_core::CanTryInto<super::UIElement> for MediaPlayerPresenter {}
impl ::windows_core::CanTryInto<super::DependencyObject> for MediaPlayerPresenter {}
unsafe impl ::core::marker::Send for MediaPlayerPresenter {}
unsafe impl ::core::marker::Sync for MediaPlayerPresenter {}
#[repr(transparent)]
pub struct MediaTransportControls(::windows_core::IUnknown);
impl MediaTransportControls {}
impl ::core::cmp::PartialEq for MediaTransportControls {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for MediaTransportControls {}
impl ::core::fmt::Debug for MediaTransportControls {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MediaTransportControls").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for MediaTransportControls {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.MediaTransportControls;{d6f69e7d-0825-49a9-9fce-5586d8694f0c})",
    );
}
impl ::core::clone::Clone for MediaTransportControls {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for MediaTransportControls {
    type Vtable = IMediaTransportControls_Vtbl;
}
unsafe impl ::windows_core::ComInterface for MediaTransportControls {
    const IID: ::windows_core::GUID = <IMediaTransportControls as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for MediaTransportControls {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.MediaTransportControls";
}
::windows_core::imp::interface_hierarchy!(
    MediaTransportControls, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for MediaTransportControls {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for MediaTransportControls {}
impl ::windows_core::CanTryInto<super::UIElement> for MediaTransportControls {}
impl ::windows_core::CanTryInto<super::DependencyObject> for MediaTransportControls {}
unsafe impl ::core::marker::Send for MediaTransportControls {}
unsafe impl ::core::marker::Sync for MediaTransportControls {}
#[repr(transparent)]
pub struct MediaTransportControlsHelper(::windows_core::IUnknown);
impl MediaTransportControlsHelper {}
impl ::core::cmp::PartialEq for MediaTransportControlsHelper {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for MediaTransportControlsHelper {}
impl ::core::fmt::Debug for MediaTransportControlsHelper {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MediaTransportControlsHelper").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for MediaTransportControlsHelper {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.MediaTransportControlsHelper;{3d41d509-ff44-4420-807e-8f7a2e2c4251})",
    );
}
impl ::core::clone::Clone for MediaTransportControlsHelper {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for MediaTransportControlsHelper {
    type Vtable = IMediaTransportControlsHelper_Vtbl;
}
unsafe impl ::windows_core::ComInterface for MediaTransportControlsHelper {
    const IID: ::windows_core::GUID = <IMediaTransportControlsHelper as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for MediaTransportControlsHelper {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.MediaTransportControlsHelper";
}
::windows_core::imp::interface_hierarchy!(
    MediaTransportControlsHelper, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for MediaTransportControlsHelper {}
unsafe impl ::core::marker::Sync for MediaTransportControlsHelper {}
#[repr(transparent)]
pub struct MenuBar(::windows_core::IUnknown);
impl MenuBar {}
impl ::core::cmp::PartialEq for MenuBar {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for MenuBar {}
impl ::core::fmt::Debug for MenuBar {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MenuBar").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for MenuBar {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.MenuBar;{c8f67b0c-0e76-5af2-bade-785049c80a41})",
    );
}
impl ::core::clone::Clone for MenuBar {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for MenuBar {
    type Vtable = IMenuBar_Vtbl;
}
unsafe impl ::windows_core::ComInterface for MenuBar {
    const IID: ::windows_core::GUID = <IMenuBar as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for MenuBar {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.MenuBar";
}
::windows_core::imp::interface_hierarchy!(
    MenuBar, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for MenuBar {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for MenuBar {}
impl ::windows_core::CanTryInto<super::UIElement> for MenuBar {}
impl ::windows_core::CanTryInto<super::DependencyObject> for MenuBar {}
unsafe impl ::core::marker::Send for MenuBar {}
unsafe impl ::core::marker::Sync for MenuBar {}
#[repr(transparent)]
pub struct MenuBarItem(::windows_core::IUnknown);
impl MenuBarItem {}
impl ::core::cmp::PartialEq for MenuBarItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for MenuBarItem {}
impl ::core::fmt::Debug for MenuBarItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MenuBarItem").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for MenuBarItem {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.MenuBarItem;{bf643b4c-8125-5b53-a454-06e896a5acee})",
    );
}
impl ::core::clone::Clone for MenuBarItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for MenuBarItem {
    type Vtable = IMenuBarItem_Vtbl;
}
unsafe impl ::windows_core::ComInterface for MenuBarItem {
    const IID: ::windows_core::GUID = <IMenuBarItem as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for MenuBarItem {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.MenuBarItem";
}
::windows_core::imp::interface_hierarchy!(
    MenuBarItem, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for MenuBarItem {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for MenuBarItem {}
impl ::windows_core::CanTryInto<super::UIElement> for MenuBarItem {}
impl ::windows_core::CanTryInto<super::DependencyObject> for MenuBarItem {}
unsafe impl ::core::marker::Send for MenuBarItem {}
unsafe impl ::core::marker::Sync for MenuBarItem {}
#[repr(transparent)]
pub struct MenuBarItemFlyout(::windows_core::IUnknown);
impl MenuBarItemFlyout {}
impl ::core::cmp::PartialEq for MenuBarItemFlyout {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for MenuBarItemFlyout {}
impl ::core::fmt::Debug for MenuBarItemFlyout {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MenuBarItemFlyout").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for MenuBarItemFlyout {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.MenuBarItemFlyout;{ed00d2d8-b686-55fe-8dbb-f04a640e42ef})",
    );
}
impl ::core::clone::Clone for MenuBarItemFlyout {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for MenuBarItemFlyout {
    type Vtable = IMenuBarItemFlyout_Vtbl;
}
unsafe impl ::windows_core::ComInterface for MenuBarItemFlyout {
    const IID: ::windows_core::GUID = <IMenuBarItemFlyout as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for MenuBarItemFlyout {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.MenuBarItemFlyout";
}
::windows_core::imp::interface_hierarchy!(
    MenuBarItemFlyout, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<MenuFlyout> for MenuBarItemFlyout {}
impl ::windows_core::CanTryInto<Primitives::FlyoutBase> for MenuBarItemFlyout {}
impl ::windows_core::CanTryInto<super::DependencyObject> for MenuBarItemFlyout {}
unsafe impl ::core::marker::Send for MenuBarItemFlyout {}
unsafe impl ::core::marker::Sync for MenuBarItemFlyout {}
#[repr(transparent)]
pub struct MenuFlyout(::windows_core::IUnknown);
impl MenuFlyout {}
impl ::core::cmp::PartialEq for MenuFlyout {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for MenuFlyout {}
impl ::core::fmt::Debug for MenuFlyout {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MenuFlyout").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for MenuFlyout {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.MenuFlyout;{ad3210f1-985b-4171-bbba-67bcc729649b})",
    );
}
impl ::core::clone::Clone for MenuFlyout {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for MenuFlyout {
    type Vtable = IMenuFlyout_Vtbl;
}
unsafe impl ::windows_core::ComInterface for MenuFlyout {
    const IID: ::windows_core::GUID = <IMenuFlyout as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for MenuFlyout {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.MenuFlyout";
}
::windows_core::imp::interface_hierarchy!(
    MenuFlyout, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Primitives::FlyoutBase> for MenuFlyout {}
impl ::windows_core::CanTryInto<super::DependencyObject> for MenuFlyout {}
unsafe impl ::core::marker::Send for MenuFlyout {}
unsafe impl ::core::marker::Sync for MenuFlyout {}
#[repr(transparent)]
pub struct MenuFlyoutItem(::windows_core::IUnknown);
impl MenuFlyoutItem {}
impl ::core::cmp::PartialEq for MenuFlyoutItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for MenuFlyoutItem {}
impl ::core::fmt::Debug for MenuFlyoutItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MenuFlyoutItem").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for MenuFlyoutItem {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.MenuFlyoutItem;{160775cf-b598-44af-a488-c3ce2af6d3f0})",
    );
}
impl ::core::clone::Clone for MenuFlyoutItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for MenuFlyoutItem {
    type Vtable = IMenuFlyoutItem_Vtbl;
}
unsafe impl ::windows_core::ComInterface for MenuFlyoutItem {
    const IID: ::windows_core::GUID = <IMenuFlyoutItem as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for MenuFlyoutItem {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.MenuFlyoutItem";
}
::windows_core::imp::interface_hierarchy!(
    MenuFlyoutItem, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<MenuFlyoutItemBase> for MenuFlyoutItem {}
impl ::windows_core::CanTryInto<Control> for MenuFlyoutItem {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for MenuFlyoutItem {}
impl ::windows_core::CanTryInto<super::UIElement> for MenuFlyoutItem {}
impl ::windows_core::CanTryInto<super::DependencyObject> for MenuFlyoutItem {}
unsafe impl ::core::marker::Send for MenuFlyoutItem {}
unsafe impl ::core::marker::Sync for MenuFlyoutItem {}
#[repr(transparent)]
pub struct MenuFlyoutItemBase(::windows_core::IUnknown);
impl MenuFlyoutItemBase {}
impl ::core::cmp::PartialEq for MenuFlyoutItemBase {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for MenuFlyoutItemBase {}
impl ::core::fmt::Debug for MenuFlyoutItemBase {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MenuFlyoutItemBase").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for MenuFlyoutItemBase {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.MenuFlyoutItemBase;{f9b56047-8da6-4730-9208-144125c6b396})",
    );
}
impl ::core::clone::Clone for MenuFlyoutItemBase {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for MenuFlyoutItemBase {
    type Vtable = IMenuFlyoutItemBase_Vtbl;
}
unsafe impl ::windows_core::ComInterface for MenuFlyoutItemBase {
    const IID: ::windows_core::GUID = <IMenuFlyoutItemBase as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for MenuFlyoutItemBase {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.MenuFlyoutItemBase";
}
::windows_core::imp::interface_hierarchy!(
    MenuFlyoutItemBase, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for MenuFlyoutItemBase {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for MenuFlyoutItemBase {}
impl ::windows_core::CanTryInto<super::UIElement> for MenuFlyoutItemBase {}
impl ::windows_core::CanTryInto<super::DependencyObject> for MenuFlyoutItemBase {}
unsafe impl ::core::marker::Send for MenuFlyoutItemBase {}
unsafe impl ::core::marker::Sync for MenuFlyoutItemBase {}
#[repr(transparent)]
pub struct MenuFlyoutPresenter(::windows_core::IUnknown);
impl MenuFlyoutPresenter {}
impl ::core::cmp::PartialEq for MenuFlyoutPresenter {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for MenuFlyoutPresenter {}
impl ::core::fmt::Debug for MenuFlyoutPresenter {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MenuFlyoutPresenter").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for MenuFlyoutPresenter {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.MenuFlyoutPresenter;{906e0304-254e-413f-b219-c7b97f003752})",
    );
}
impl ::core::clone::Clone for MenuFlyoutPresenter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for MenuFlyoutPresenter {
    type Vtable = IMenuFlyoutPresenter_Vtbl;
}
unsafe impl ::windows_core::ComInterface for MenuFlyoutPresenter {
    const IID: ::windows_core::GUID = <IMenuFlyoutPresenter as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for MenuFlyoutPresenter {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.MenuFlyoutPresenter";
}
::windows_core::imp::interface_hierarchy!(
    MenuFlyoutPresenter, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IItemContainerMapping> for MenuFlyoutPresenter {}
impl ::windows_core::CanTryInto<ItemsControl> for MenuFlyoutPresenter {}
impl ::windows_core::CanTryInto<Control> for MenuFlyoutPresenter {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for MenuFlyoutPresenter {}
impl ::windows_core::CanTryInto<super::UIElement> for MenuFlyoutPresenter {}
impl ::windows_core::CanTryInto<super::DependencyObject> for MenuFlyoutPresenter {}
unsafe impl ::core::marker::Send for MenuFlyoutPresenter {}
unsafe impl ::core::marker::Sync for MenuFlyoutPresenter {}
#[repr(transparent)]
pub struct MenuFlyoutSeparator(::windows_core::IUnknown);
impl MenuFlyoutSeparator {}
impl ::core::cmp::PartialEq for MenuFlyoutSeparator {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for MenuFlyoutSeparator {}
impl ::core::fmt::Debug for MenuFlyoutSeparator {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MenuFlyoutSeparator").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for MenuFlyoutSeparator {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.MenuFlyoutSeparator;{71fa2b7d-0b51-4950-a1a4-bbc42eac4c12})",
    );
}
impl ::core::clone::Clone for MenuFlyoutSeparator {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for MenuFlyoutSeparator {
    type Vtable = IMenuFlyoutSeparator_Vtbl;
}
unsafe impl ::windows_core::ComInterface for MenuFlyoutSeparator {
    const IID: ::windows_core::GUID = <IMenuFlyoutSeparator as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for MenuFlyoutSeparator {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.MenuFlyoutSeparator";
}
::windows_core::imp::interface_hierarchy!(
    MenuFlyoutSeparator, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<MenuFlyoutItemBase> for MenuFlyoutSeparator {}
impl ::windows_core::CanTryInto<Control> for MenuFlyoutSeparator {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for MenuFlyoutSeparator {}
impl ::windows_core::CanTryInto<super::UIElement> for MenuFlyoutSeparator {}
impl ::windows_core::CanTryInto<super::DependencyObject> for MenuFlyoutSeparator {}
unsafe impl ::core::marker::Send for MenuFlyoutSeparator {}
unsafe impl ::core::marker::Sync for MenuFlyoutSeparator {}
#[repr(transparent)]
pub struct MenuFlyoutSubItem(::windows_core::IUnknown);
impl MenuFlyoutSubItem {}
impl ::core::cmp::PartialEq for MenuFlyoutSubItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for MenuFlyoutSubItem {}
impl ::core::fmt::Debug for MenuFlyoutSubItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MenuFlyoutSubItem").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for MenuFlyoutSubItem {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.MenuFlyoutSubItem;{e5386550-fe2c-43e2-a73f-62168f619973})",
    );
}
impl ::core::clone::Clone for MenuFlyoutSubItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for MenuFlyoutSubItem {
    type Vtable = IMenuFlyoutSubItem_Vtbl;
}
unsafe impl ::windows_core::ComInterface for MenuFlyoutSubItem {
    const IID: ::windows_core::GUID = <IMenuFlyoutSubItem as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for MenuFlyoutSubItem {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.MenuFlyoutSubItem";
}
::windows_core::imp::interface_hierarchy!(
    MenuFlyoutSubItem, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<MenuFlyoutItemBase> for MenuFlyoutSubItem {}
impl ::windows_core::CanTryInto<Control> for MenuFlyoutSubItem {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for MenuFlyoutSubItem {}
impl ::windows_core::CanTryInto<super::UIElement> for MenuFlyoutSubItem {}
impl ::windows_core::CanTryInto<super::DependencyObject> for MenuFlyoutSubItem {}
unsafe impl ::core::marker::Send for MenuFlyoutSubItem {}
unsafe impl ::core::marker::Sync for MenuFlyoutSubItem {}
#[repr(transparent)]
pub struct NavigationView(::windows_core::IUnknown);
impl NavigationView {}
impl ::core::cmp::PartialEq for NavigationView {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for NavigationView {}
impl ::core::fmt::Debug for NavigationView {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NavigationView").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for NavigationView {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.NavigationView;{f209ce15-391a-42ca-9fc6-f79da65aca32})",
    );
}
impl ::core::clone::Clone for NavigationView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for NavigationView {
    type Vtable = INavigationView_Vtbl;
}
unsafe impl ::windows_core::ComInterface for NavigationView {
    const IID: ::windows_core::GUID = <INavigationView as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for NavigationView {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.NavigationView";
}
::windows_core::imp::interface_hierarchy!(
    NavigationView, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ContentControl> for NavigationView {}
impl ::windows_core::CanTryInto<Control> for NavigationView {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for NavigationView {}
impl ::windows_core::CanTryInto<super::UIElement> for NavigationView {}
impl ::windows_core::CanTryInto<super::DependencyObject> for NavigationView {}
unsafe impl ::core::marker::Send for NavigationView {}
unsafe impl ::core::marker::Sync for NavigationView {}
#[repr(transparent)]
pub struct NavigationViewBackRequestedEventArgs(::windows_core::IUnknown);
impl NavigationViewBackRequestedEventArgs {}
impl ::core::cmp::PartialEq for NavigationViewBackRequestedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for NavigationViewBackRequestedEventArgs {}
impl ::core::fmt::Debug for NavigationViewBackRequestedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NavigationViewBackRequestedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for NavigationViewBackRequestedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.NavigationViewBackRequestedEventArgs;{446700e1-9a9d-4500-a71d-25c15809b879})",
    );
}
impl ::core::clone::Clone for NavigationViewBackRequestedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for NavigationViewBackRequestedEventArgs {
    type Vtable = INavigationViewBackRequestedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for NavigationViewBackRequestedEventArgs {
    const IID: ::windows_core::GUID = <INavigationViewBackRequestedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for NavigationViewBackRequestedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.NavigationViewBackRequestedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    NavigationViewBackRequestedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for NavigationViewBackRequestedEventArgs {}
unsafe impl ::core::marker::Sync for NavigationViewBackRequestedEventArgs {}
#[repr(transparent)]
pub struct NavigationViewDisplayModeChangedEventArgs(::windows_core::IUnknown);
impl NavigationViewDisplayModeChangedEventArgs {}
impl ::core::cmp::PartialEq for NavigationViewDisplayModeChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for NavigationViewDisplayModeChangedEventArgs {}
impl ::core::fmt::Debug for NavigationViewDisplayModeChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NavigationViewDisplayModeChangedEventArgs")
            .field(&self.0)
            .finish()
    }
}
impl ::windows_core::RuntimeType for NavigationViewDisplayModeChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.NavigationViewDisplayModeChangedEventArgs;{b7c1ad35-5544-40c1-9b33-acfe1d6c8094})",
    );
}
impl ::core::clone::Clone for NavigationViewDisplayModeChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for NavigationViewDisplayModeChangedEventArgs {
    type Vtable = INavigationViewDisplayModeChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for NavigationViewDisplayModeChangedEventArgs {
    const IID: ::windows_core::GUID = <INavigationViewDisplayModeChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for NavigationViewDisplayModeChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.NavigationViewDisplayModeChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    NavigationViewDisplayModeChangedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for NavigationViewDisplayModeChangedEventArgs {}
unsafe impl ::core::marker::Sync for NavigationViewDisplayModeChangedEventArgs {}
#[repr(transparent)]
pub struct NavigationViewItem(::windows_core::IUnknown);
impl NavigationViewItem {}
impl ::core::cmp::PartialEq for NavigationViewItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for NavigationViewItem {}
impl ::core::fmt::Debug for NavigationViewItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NavigationViewItem").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for NavigationViewItem {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.NavigationViewItem;{8614be0f-b7b6-4851-960a-f5e3f69f624a})",
    );
}
impl ::core::clone::Clone for NavigationViewItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for NavigationViewItem {
    type Vtable = INavigationViewItem_Vtbl;
}
unsafe impl ::windows_core::ComInterface for NavigationViewItem {
    const IID: ::windows_core::GUID = <INavigationViewItem as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for NavigationViewItem {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.NavigationViewItem";
}
::windows_core::imp::interface_hierarchy!(
    NavigationViewItem, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<NavigationViewItemBase> for NavigationViewItem {}
impl ::windows_core::CanTryInto<ListViewItem> for NavigationViewItem {}
impl ::windows_core::CanTryInto<Primitives::SelectorItem> for NavigationViewItem {}
impl ::windows_core::CanTryInto<ContentControl> for NavigationViewItem {}
impl ::windows_core::CanTryInto<Control> for NavigationViewItem {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for NavigationViewItem {}
impl ::windows_core::CanTryInto<super::UIElement> for NavigationViewItem {}
impl ::windows_core::CanTryInto<super::DependencyObject> for NavigationViewItem {}
unsafe impl ::core::marker::Send for NavigationViewItem {}
unsafe impl ::core::marker::Sync for NavigationViewItem {}
#[repr(transparent)]
pub struct NavigationViewItemBase(::windows_core::IUnknown);
impl NavigationViewItemBase {}
impl ::core::cmp::PartialEq for NavigationViewItemBase {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for NavigationViewItemBase {}
impl ::core::fmt::Debug for NavigationViewItemBase {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NavigationViewItemBase").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for NavigationViewItemBase {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.NavigationViewItemBase;{edf04eb1-37d1-471f-8570-3829ee5b2bc6})",
    );
}
impl ::core::clone::Clone for NavigationViewItemBase {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for NavigationViewItemBase {
    type Vtable = INavigationViewItemBase_Vtbl;
}
unsafe impl ::windows_core::ComInterface for NavigationViewItemBase {
    const IID: ::windows_core::GUID = <INavigationViewItemBase as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for NavigationViewItemBase {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.NavigationViewItemBase";
}
::windows_core::imp::interface_hierarchy!(
    NavigationViewItemBase, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ListViewItem> for NavigationViewItemBase {}
impl ::windows_core::CanTryInto<Primitives::SelectorItem> for NavigationViewItemBase {}
impl ::windows_core::CanTryInto<ContentControl> for NavigationViewItemBase {}
impl ::windows_core::CanTryInto<Control> for NavigationViewItemBase {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for NavigationViewItemBase {}
impl ::windows_core::CanTryInto<super::UIElement> for NavigationViewItemBase {}
impl ::windows_core::CanTryInto<super::DependencyObject> for NavigationViewItemBase {}
unsafe impl ::core::marker::Send for NavigationViewItemBase {}
unsafe impl ::core::marker::Sync for NavigationViewItemBase {}
#[repr(transparent)]
pub struct NavigationViewItemHeader(::windows_core::IUnknown);
impl NavigationViewItemHeader {}
impl ::core::cmp::PartialEq for NavigationViewItemHeader {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for NavigationViewItemHeader {}
impl ::core::fmt::Debug for NavigationViewItemHeader {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NavigationViewItemHeader").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for NavigationViewItemHeader {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.NavigationViewItemHeader;{e21df22c-da4a-4e74-9ffc-b163bd7adacd})",
    );
}
impl ::core::clone::Clone for NavigationViewItemHeader {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for NavigationViewItemHeader {
    type Vtable = INavigationViewItemHeader_Vtbl;
}
unsafe impl ::windows_core::ComInterface for NavigationViewItemHeader {
    const IID: ::windows_core::GUID = <INavigationViewItemHeader as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for NavigationViewItemHeader {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.NavigationViewItemHeader";
}
::windows_core::imp::interface_hierarchy!(
    NavigationViewItemHeader, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<NavigationViewItemBase> for NavigationViewItemHeader {}
impl ::windows_core::CanTryInto<ListViewItem> for NavigationViewItemHeader {}
impl ::windows_core::CanTryInto<Primitives::SelectorItem> for NavigationViewItemHeader {}
impl ::windows_core::CanTryInto<ContentControl> for NavigationViewItemHeader {}
impl ::windows_core::CanTryInto<Control> for NavigationViewItemHeader {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for NavigationViewItemHeader {}
impl ::windows_core::CanTryInto<super::UIElement> for NavigationViewItemHeader {}
impl ::windows_core::CanTryInto<super::DependencyObject> for NavigationViewItemHeader {}
unsafe impl ::core::marker::Send for NavigationViewItemHeader {}
unsafe impl ::core::marker::Sync for NavigationViewItemHeader {}
#[repr(transparent)]
pub struct NavigationViewItemInvokedEventArgs(::windows_core::IUnknown);
impl NavigationViewItemInvokedEventArgs {}
impl ::core::cmp::PartialEq for NavigationViewItemInvokedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for NavigationViewItemInvokedEventArgs {}
impl ::core::fmt::Debug for NavigationViewItemInvokedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NavigationViewItemInvokedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for NavigationViewItemInvokedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs;{29496822-55d2-49fa-964b-f1dbafef85c4})",
    );
}
impl ::core::clone::Clone for NavigationViewItemInvokedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for NavigationViewItemInvokedEventArgs {
    type Vtable = INavigationViewItemInvokedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for NavigationViewItemInvokedEventArgs {
    const IID: ::windows_core::GUID = <INavigationViewItemInvokedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for NavigationViewItemInvokedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    NavigationViewItemInvokedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for NavigationViewItemInvokedEventArgs {}
unsafe impl ::core::marker::Sync for NavigationViewItemInvokedEventArgs {}
#[repr(transparent)]
pub struct NavigationViewItemSeparator(::windows_core::IUnknown);
impl NavigationViewItemSeparator {}
impl ::core::cmp::PartialEq for NavigationViewItemSeparator {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for NavigationViewItemSeparator {}
impl ::core::fmt::Debug for NavigationViewItemSeparator {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NavigationViewItemSeparator").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for NavigationViewItemSeparator {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.NavigationViewItemSeparator;{de62c951-bb9b-471e-83e3-af4791e7096a})",
    );
}
impl ::core::clone::Clone for NavigationViewItemSeparator {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for NavigationViewItemSeparator {
    type Vtable = INavigationViewItemSeparator_Vtbl;
}
unsafe impl ::windows_core::ComInterface for NavigationViewItemSeparator {
    const IID: ::windows_core::GUID = <INavigationViewItemSeparator as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for NavigationViewItemSeparator {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.NavigationViewItemSeparator";
}
::windows_core::imp::interface_hierarchy!(
    NavigationViewItemSeparator, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<NavigationViewItemBase> for NavigationViewItemSeparator {}
impl ::windows_core::CanTryInto<ListViewItem> for NavigationViewItemSeparator {}
impl ::windows_core::CanTryInto<Primitives::SelectorItem>
for NavigationViewItemSeparator {}
impl ::windows_core::CanTryInto<ContentControl> for NavigationViewItemSeparator {}
impl ::windows_core::CanTryInto<Control> for NavigationViewItemSeparator {}
impl ::windows_core::CanTryInto<super::FrameworkElement>
for NavigationViewItemSeparator {}
impl ::windows_core::CanTryInto<super::UIElement> for NavigationViewItemSeparator {}
impl ::windows_core::CanTryInto<super::DependencyObject>
for NavigationViewItemSeparator {}
unsafe impl ::core::marker::Send for NavigationViewItemSeparator {}
unsafe impl ::core::marker::Sync for NavigationViewItemSeparator {}
#[repr(transparent)]
pub struct NavigationViewList(::windows_core::IUnknown);
impl NavigationViewList {}
impl ::core::cmp::PartialEq for NavigationViewList {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for NavigationViewList {}
impl ::core::fmt::Debug for NavigationViewList {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NavigationViewList").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for NavigationViewList {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.NavigationViewList;{4f726f85-5ce0-48cd-8ef2-1a29458a3404})",
    );
}
impl ::core::clone::Clone for NavigationViewList {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for NavigationViewList {
    type Vtable = INavigationViewList_Vtbl;
}
unsafe impl ::windows_core::ComInterface for NavigationViewList {
    const IID: ::windows_core::GUID = <INavigationViewList as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for NavigationViewList {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.NavigationViewList";
}
::windows_core::imp::interface_hierarchy!(
    NavigationViewList, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IItemContainerMapping> for NavigationViewList {}
impl ::windows_core::CanTryInto<ISemanticZoomInformation> for NavigationViewList {}
impl ::windows_core::CanTryInto<ListView> for NavigationViewList {}
impl ::windows_core::CanTryInto<ListViewBase> for NavigationViewList {}
impl ::windows_core::CanTryInto<Primitives::Selector> for NavigationViewList {}
impl ::windows_core::CanTryInto<ItemsControl> for NavigationViewList {}
impl ::windows_core::CanTryInto<Control> for NavigationViewList {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for NavigationViewList {}
impl ::windows_core::CanTryInto<super::UIElement> for NavigationViewList {}
impl ::windows_core::CanTryInto<super::DependencyObject> for NavigationViewList {}
unsafe impl ::core::marker::Send for NavigationViewList {}
unsafe impl ::core::marker::Sync for NavigationViewList {}
#[repr(transparent)]
pub struct NavigationViewPaneClosingEventArgs(::windows_core::IUnknown);
impl NavigationViewPaneClosingEventArgs {}
impl ::core::cmp::PartialEq for NavigationViewPaneClosingEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for NavigationViewPaneClosingEventArgs {}
impl ::core::fmt::Debug for NavigationViewPaneClosingEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NavigationViewPaneClosingEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for NavigationViewPaneClosingEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.NavigationViewPaneClosingEventArgs;{955575ba-75f5-432d-b49b-60e47552d5ee})",
    );
}
impl ::core::clone::Clone for NavigationViewPaneClosingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for NavigationViewPaneClosingEventArgs {
    type Vtable = INavigationViewPaneClosingEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for NavigationViewPaneClosingEventArgs {
    const IID: ::windows_core::GUID = <INavigationViewPaneClosingEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for NavigationViewPaneClosingEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.NavigationViewPaneClosingEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    NavigationViewPaneClosingEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for NavigationViewPaneClosingEventArgs {}
unsafe impl ::core::marker::Sync for NavigationViewPaneClosingEventArgs {}
#[repr(transparent)]
pub struct NavigationViewSelectionChangedEventArgs(::windows_core::IUnknown);
impl NavigationViewSelectionChangedEventArgs {}
impl ::core::cmp::PartialEq for NavigationViewSelectionChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for NavigationViewSelectionChangedEventArgs {}
impl ::core::fmt::Debug for NavigationViewSelectionChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NavigationViewSelectionChangedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for NavigationViewSelectionChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.NavigationViewSelectionChangedEventArgs;{5aa509a0-3a5e-4f54-896c-98b85f819508})",
    );
}
impl ::core::clone::Clone for NavigationViewSelectionChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for NavigationViewSelectionChangedEventArgs {
    type Vtable = INavigationViewSelectionChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for NavigationViewSelectionChangedEventArgs {
    const IID: ::windows_core::GUID = <INavigationViewSelectionChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for NavigationViewSelectionChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.NavigationViewSelectionChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    NavigationViewSelectionChangedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for NavigationViewSelectionChangedEventArgs {}
unsafe impl ::core::marker::Sync for NavigationViewSelectionChangedEventArgs {}
#[repr(transparent)]
pub struct NavigationViewTemplateSettings(::windows_core::IUnknown);
impl NavigationViewTemplateSettings {}
impl ::core::cmp::PartialEq for NavigationViewTemplateSettings {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for NavigationViewTemplateSettings {}
impl ::core::fmt::Debug for NavigationViewTemplateSettings {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NavigationViewTemplateSettings").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for NavigationViewTemplateSettings {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.NavigationViewTemplateSettings;{2956cbc4-0528-55d5-b2d1-eae807aea6da})",
    );
}
impl ::core::clone::Clone for NavigationViewTemplateSettings {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for NavigationViewTemplateSettings {
    type Vtable = INavigationViewTemplateSettings_Vtbl;
}
unsafe impl ::windows_core::ComInterface for NavigationViewTemplateSettings {
    const IID: ::windows_core::GUID = <INavigationViewTemplateSettings as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for NavigationViewTemplateSettings {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.NavigationViewTemplateSettings";
}
::windows_core::imp::interface_hierarchy!(
    NavigationViewTemplateSettings, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::DependencyObject>
for NavigationViewTemplateSettings {}
unsafe impl ::core::marker::Send for NavigationViewTemplateSettings {}
unsafe impl ::core::marker::Sync for NavigationViewTemplateSettings {}
#[repr(transparent)]
pub struct NotifyEventArgs(::windows_core::IUnknown);
impl NotifyEventArgs {}
impl ::core::cmp::PartialEq for NotifyEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for NotifyEventArgs {}
impl ::core::fmt::Debug for NotifyEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NotifyEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for NotifyEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.NotifyEventArgs;{af0e05f7-c4b7-44c5-b09d-5cb7052b3a97})",
    );
}
impl ::core::clone::Clone for NotifyEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for NotifyEventArgs {
    type Vtable = INotifyEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for NotifyEventArgs {
    const IID: ::windows_core::GUID = <INotifyEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for NotifyEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.NotifyEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    NotifyEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for NotifyEventArgs {}
unsafe impl ::core::marker::Sync for NotifyEventArgs {}
#[repr(transparent)]
pub struct Page(::windows_core::IUnknown);
impl Page {}
impl ::core::cmp::PartialEq for Page {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Page {}
impl ::core::fmt::Debug for Page {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Page").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for Page {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.Page;{c4b27075-e641-453e-824d-012fc7cf95cf})",
    );
}
impl ::core::clone::Clone for Page {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for Page {
    type Vtable = IPage_Vtbl;
}
unsafe impl ::windows_core::ComInterface for Page {
    const IID: ::windows_core::GUID = <IPage as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for Page {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.Page";
}
::windows_core::imp::interface_hierarchy!(
    Page, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<UserControl> for Page {}
impl ::windows_core::CanTryInto<Control> for Page {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for Page {}
impl ::windows_core::CanTryInto<super::UIElement> for Page {}
impl ::windows_core::CanTryInto<super::DependencyObject> for Page {}
unsafe impl ::core::marker::Send for Page {}
unsafe impl ::core::marker::Sync for Page {}
#[repr(transparent)]
pub struct Panel(::windows_core::IUnknown);
impl Panel {}
impl ::core::cmp::PartialEq for Panel {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Panel {}
impl ::core::fmt::Debug for Panel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Panel").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for Panel {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.Panel;{a50a4bbd-8361-469c-90da-e9a40c7474df})",
    );
}
impl ::core::clone::Clone for Panel {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for Panel {
    type Vtable = IPanel_Vtbl;
}
unsafe impl ::windows_core::ComInterface for Panel {
    const IID: ::windows_core::GUID = <IPanel as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for Panel {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.Panel";
}
::windows_core::imp::interface_hierarchy!(
    Panel, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::FrameworkElement> for Panel {}
impl ::windows_core::CanTryInto<super::UIElement> for Panel {}
impl ::windows_core::CanTryInto<super::DependencyObject> for Panel {}
unsafe impl ::core::marker::Send for Panel {}
unsafe impl ::core::marker::Sync for Panel {}
#[repr(transparent)]
pub struct ParallaxView(::windows_core::IUnknown);
impl ParallaxView {}
impl ::core::cmp::PartialEq for ParallaxView {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ParallaxView {}
impl ::core::fmt::Debug for ParallaxView {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ParallaxView").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ParallaxView {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ParallaxView;{6b84fcd4-4083-5b4b-bc40-d9204e19b41a})",
    );
}
impl ::core::clone::Clone for ParallaxView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ParallaxView {
    type Vtable = IParallaxView_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ParallaxView {
    const IID: ::windows_core::GUID = <IParallaxView as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ParallaxView {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ParallaxView";
}
::windows_core::imp::interface_hierarchy!(
    ParallaxView, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::FrameworkElement> for ParallaxView {}
impl ::windows_core::CanTryInto<super::UIElement> for ParallaxView {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ParallaxView {}
unsafe impl ::core::marker::Send for ParallaxView {}
unsafe impl ::core::marker::Sync for ParallaxView {}
#[repr(transparent)]
pub struct PasswordBox(::windows_core::IUnknown);
impl PasswordBox {}
impl ::core::cmp::PartialEq for PasswordBox {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PasswordBox {}
impl ::core::fmt::Debug for PasswordBox {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PasswordBox").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for PasswordBox {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.PasswordBox;{02b9aa11-0b47-4e7d-ad91-3a4168ed230d})",
    );
}
impl ::core::clone::Clone for PasswordBox {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for PasswordBox {
    type Vtable = IPasswordBox_Vtbl;
}
unsafe impl ::windows_core::ComInterface for PasswordBox {
    const IID: ::windows_core::GUID = <IPasswordBox as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for PasswordBox {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.PasswordBox";
}
::windows_core::imp::interface_hierarchy!(
    PasswordBox, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for PasswordBox {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for PasswordBox {}
impl ::windows_core::CanTryInto<super::UIElement> for PasswordBox {}
impl ::windows_core::CanTryInto<super::DependencyObject> for PasswordBox {}
unsafe impl ::core::marker::Send for PasswordBox {}
unsafe impl ::core::marker::Sync for PasswordBox {}
#[repr(transparent)]
pub struct PasswordBoxPasswordChangingEventArgs(::windows_core::IUnknown);
impl PasswordBoxPasswordChangingEventArgs {}
impl ::core::cmp::PartialEq for PasswordBoxPasswordChangingEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PasswordBoxPasswordChangingEventArgs {}
impl ::core::fmt::Debug for PasswordBoxPasswordChangingEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PasswordBoxPasswordChangingEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for PasswordBoxPasswordChangingEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.PasswordBoxPasswordChangingEventArgs;{142eda22-3552-4ab8-81a6-a48620ee9c53})",
    );
}
impl ::core::clone::Clone for PasswordBoxPasswordChangingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for PasswordBoxPasswordChangingEventArgs {
    type Vtable = IPasswordBoxPasswordChangingEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for PasswordBoxPasswordChangingEventArgs {
    const IID: ::windows_core::GUID = <IPasswordBoxPasswordChangingEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for PasswordBoxPasswordChangingEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.PasswordBoxPasswordChangingEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    PasswordBoxPasswordChangingEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for PasswordBoxPasswordChangingEventArgs {}
unsafe impl ::core::marker::Sync for PasswordBoxPasswordChangingEventArgs {}
#[repr(transparent)]
pub struct PathIcon(::windows_core::IUnknown);
impl PathIcon {}
impl ::core::cmp::PartialEq for PathIcon {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PathIcon {}
impl ::core::fmt::Debug for PathIcon {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PathIcon").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for PathIcon {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.PathIcon;{214c62db-c366-4a0e-b9ad-dcf168d7ec0c})",
    );
}
impl ::core::clone::Clone for PathIcon {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for PathIcon {
    type Vtable = IPathIcon_Vtbl;
}
unsafe impl ::windows_core::ComInterface for PathIcon {
    const IID: ::windows_core::GUID = <IPathIcon as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for PathIcon {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.PathIcon";
}
::windows_core::imp::interface_hierarchy!(
    PathIcon, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IconElement> for PathIcon {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for PathIcon {}
impl ::windows_core::CanTryInto<super::UIElement> for PathIcon {}
impl ::windows_core::CanTryInto<super::DependencyObject> for PathIcon {}
unsafe impl ::core::marker::Send for PathIcon {}
unsafe impl ::core::marker::Sync for PathIcon {}
#[repr(transparent)]
pub struct PathIconSource(::windows_core::IUnknown);
impl PathIconSource {}
impl ::core::cmp::PartialEq for PathIconSource {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PathIconSource {}
impl ::core::fmt::Debug for PathIconSource {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PathIconSource").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for PathIconSource {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.PathIconSource;{1f47010e-b305-4863-8b7a-15d08d633c7a})",
    );
}
impl ::core::clone::Clone for PathIconSource {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for PathIconSource {
    type Vtable = IPathIconSource_Vtbl;
}
unsafe impl ::windows_core::ComInterface for PathIconSource {
    const IID: ::windows_core::GUID = <IPathIconSource as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for PathIconSource {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.PathIconSource";
}
::windows_core::imp::interface_hierarchy!(
    PathIconSource, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IconSource> for PathIconSource {}
impl ::windows_core::CanTryInto<super::DependencyObject> for PathIconSource {}
unsafe impl ::core::marker::Send for PathIconSource {}
unsafe impl ::core::marker::Sync for PathIconSource {}
#[repr(transparent)]
pub struct PersonPicture(::windows_core::IUnknown);
impl PersonPicture {}
impl ::core::cmp::PartialEq for PersonPicture {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PersonPicture {}
impl ::core::fmt::Debug for PersonPicture {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PersonPicture").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for PersonPicture {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.PersonPicture;{6c230b6d-0d75-4059-91bc-7b174d1d7315})",
    );
}
impl ::core::clone::Clone for PersonPicture {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for PersonPicture {
    type Vtable = IPersonPicture_Vtbl;
}
unsafe impl ::windows_core::ComInterface for PersonPicture {
    const IID: ::windows_core::GUID = <IPersonPicture as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for PersonPicture {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.PersonPicture";
}
::windows_core::imp::interface_hierarchy!(
    PersonPicture, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for PersonPicture {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for PersonPicture {}
impl ::windows_core::CanTryInto<super::UIElement> for PersonPicture {}
impl ::windows_core::CanTryInto<super::DependencyObject> for PersonPicture {}
unsafe impl ::core::marker::Send for PersonPicture {}
unsafe impl ::core::marker::Sync for PersonPicture {}
#[repr(transparent)]
pub struct PickerConfirmedEventArgs(::windows_core::IUnknown);
impl PickerConfirmedEventArgs {}
impl ::core::cmp::PartialEq for PickerConfirmedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PickerConfirmedEventArgs {}
impl ::core::fmt::Debug for PickerConfirmedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PickerConfirmedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for PickerConfirmedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.PickerConfirmedEventArgs;{447a9b51-1e23-4779-992b-986849713941})",
    );
}
impl ::core::clone::Clone for PickerConfirmedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for PickerConfirmedEventArgs {
    type Vtable = IPickerConfirmedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for PickerConfirmedEventArgs {
    const IID: ::windows_core::GUID = <IPickerConfirmedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for PickerConfirmedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.PickerConfirmedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    PickerConfirmedEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::DependencyObject> for PickerConfirmedEventArgs {}
unsafe impl ::core::marker::Send for PickerConfirmedEventArgs {}
unsafe impl ::core::marker::Sync for PickerConfirmedEventArgs {}
#[repr(transparent)]
pub struct PickerFlyout(::windows_core::IUnknown);
impl PickerFlyout {}
impl ::core::cmp::PartialEq for PickerFlyout {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PickerFlyout {}
impl ::core::fmt::Debug for PickerFlyout {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PickerFlyout").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for PickerFlyout {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.PickerFlyout;{a336ffdb-08d9-43e6-944e-f2e5c7cee630})",
    );
}
impl ::core::clone::Clone for PickerFlyout {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for PickerFlyout {
    type Vtable = IPickerFlyout_Vtbl;
}
unsafe impl ::windows_core::ComInterface for PickerFlyout {
    const IID: ::windows_core::GUID = <IPickerFlyout as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for PickerFlyout {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.PickerFlyout";
}
::windows_core::imp::interface_hierarchy!(
    PickerFlyout, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Primitives::PickerFlyoutBase> for PickerFlyout {}
impl ::windows_core::CanTryInto<Primitives::FlyoutBase> for PickerFlyout {}
impl ::windows_core::CanTryInto<super::DependencyObject> for PickerFlyout {}
unsafe impl ::core::marker::Send for PickerFlyout {}
unsafe impl ::core::marker::Sync for PickerFlyout {}
#[repr(transparent)]
pub struct PickerFlyoutPresenter(::windows_core::IUnknown);
impl PickerFlyoutPresenter {}
impl ::core::cmp::PartialEq for PickerFlyoutPresenter {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PickerFlyoutPresenter {}
impl ::core::fmt::Debug for PickerFlyoutPresenter {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PickerFlyoutPresenter").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for PickerFlyoutPresenter {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.PickerFlyoutPresenter;{5884c978-6b27-4b38-a9ae-677c2994652e})",
    );
}
impl ::core::clone::Clone for PickerFlyoutPresenter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for PickerFlyoutPresenter {
    type Vtable = IPickerFlyoutPresenter_Vtbl;
}
unsafe impl ::windows_core::ComInterface for PickerFlyoutPresenter {
    const IID: ::windows_core::GUID = <IPickerFlyoutPresenter as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for PickerFlyoutPresenter {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.PickerFlyoutPresenter";
}
::windows_core::imp::interface_hierarchy!(
    PickerFlyoutPresenter, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ContentControl> for PickerFlyoutPresenter {}
impl ::windows_core::CanTryInto<Control> for PickerFlyoutPresenter {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for PickerFlyoutPresenter {}
impl ::windows_core::CanTryInto<super::UIElement> for PickerFlyoutPresenter {}
impl ::windows_core::CanTryInto<super::DependencyObject> for PickerFlyoutPresenter {}
unsafe impl ::core::marker::Send for PickerFlyoutPresenter {}
unsafe impl ::core::marker::Sync for PickerFlyoutPresenter {}
#[repr(transparent)]
pub struct Pivot(::windows_core::IUnknown);
impl Pivot {}
impl ::core::cmp::PartialEq for Pivot {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Pivot {}
impl ::core::fmt::Debug for Pivot {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Pivot").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for Pivot {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.Pivot;{103e9b13-3400-4a16-90b9-6912bf06974e})",
    );
}
impl ::core::clone::Clone for Pivot {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for Pivot {
    type Vtable = IPivot_Vtbl;
}
unsafe impl ::windows_core::ComInterface for Pivot {
    const IID: ::windows_core::GUID = <IPivot as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for Pivot {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.Pivot";
}
::windows_core::imp::interface_hierarchy!(
    Pivot, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IItemContainerMapping> for Pivot {}
impl ::windows_core::CanTryInto<ItemsControl> for Pivot {}
impl ::windows_core::CanTryInto<Control> for Pivot {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for Pivot {}
impl ::windows_core::CanTryInto<super::UIElement> for Pivot {}
impl ::windows_core::CanTryInto<super::DependencyObject> for Pivot {}
unsafe impl ::core::marker::Send for Pivot {}
unsafe impl ::core::marker::Sync for Pivot {}
#[repr(transparent)]
pub struct PivotItem(::windows_core::IUnknown);
impl PivotItem {}
impl ::core::cmp::PartialEq for PivotItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PivotItem {}
impl ::core::fmt::Debug for PivotItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PivotItem").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for PivotItem {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.PivotItem;{a4764371-a502-47a3-915e-4aa096daf87f})",
    );
}
impl ::core::clone::Clone for PivotItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for PivotItem {
    type Vtable = IPivotItem_Vtbl;
}
unsafe impl ::windows_core::ComInterface for PivotItem {
    const IID: ::windows_core::GUID = <IPivotItem as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for PivotItem {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.PivotItem";
}
::windows_core::imp::interface_hierarchy!(
    PivotItem, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ContentControl> for PivotItem {}
impl ::windows_core::CanTryInto<Control> for PivotItem {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for PivotItem {}
impl ::windows_core::CanTryInto<super::UIElement> for PivotItem {}
impl ::windows_core::CanTryInto<super::DependencyObject> for PivotItem {}
unsafe impl ::core::marker::Send for PivotItem {}
unsafe impl ::core::marker::Sync for PivotItem {}
#[repr(transparent)]
pub struct PivotItemEventArgs(::windows_core::IUnknown);
impl PivotItemEventArgs {}
impl ::core::cmp::PartialEq for PivotItemEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PivotItemEventArgs {}
impl ::core::fmt::Debug for PivotItemEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PivotItemEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for PivotItemEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.PivotItemEventArgs;{1a6f7254-1ed5-4bc5-a060-655530bca6ba})",
    );
}
impl ::core::clone::Clone for PivotItemEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for PivotItemEventArgs {
    type Vtable = IPivotItemEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for PivotItemEventArgs {
    const IID: ::windows_core::GUID = <IPivotItemEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for PivotItemEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.PivotItemEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    PivotItemEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for PivotItemEventArgs {}
unsafe impl ::core::marker::Sync for PivotItemEventArgs {}
#[repr(transparent)]
pub struct ProgressBar(::windows_core::IUnknown);
impl ProgressBar {}
impl ::core::cmp::PartialEq for ProgressBar {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ProgressBar {}
impl ::core::fmt::Debug for ProgressBar {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ProgressBar").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ProgressBar {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ProgressBar;{ae752c89-0067-4963-bf4c-29db0c4a507e})",
    );
}
impl ::core::clone::Clone for ProgressBar {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ProgressBar {
    type Vtable = IProgressBar_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ProgressBar {
    const IID: ::windows_core::GUID = <IProgressBar as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ProgressBar {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ProgressBar";
}
::windows_core::imp::interface_hierarchy!(
    ProgressBar, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Primitives::RangeBase> for ProgressBar {}
impl ::windows_core::CanTryInto<Control> for ProgressBar {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ProgressBar {}
impl ::windows_core::CanTryInto<super::UIElement> for ProgressBar {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ProgressBar {}
unsafe impl ::core::marker::Send for ProgressBar {}
unsafe impl ::core::marker::Sync for ProgressBar {}
#[repr(transparent)]
pub struct ProgressRing(::windows_core::IUnknown);
impl ProgressRing {}
impl ::core::cmp::PartialEq for ProgressRing {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ProgressRing {}
impl ::core::fmt::Debug for ProgressRing {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ProgressRing").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ProgressRing {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ProgressRing;{6da5e49e-6e9d-425c-bd7c-02173e39763f})",
    );
}
impl ::core::clone::Clone for ProgressRing {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ProgressRing {
    type Vtable = IProgressRing_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ProgressRing {
    const IID: ::windows_core::GUID = <IProgressRing as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ProgressRing {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ProgressRing";
}
::windows_core::imp::interface_hierarchy!(
    ProgressRing, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for ProgressRing {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ProgressRing {}
impl ::windows_core::CanTryInto<super::UIElement> for ProgressRing {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ProgressRing {}
unsafe impl ::core::marker::Send for ProgressRing {}
unsafe impl ::core::marker::Sync for ProgressRing {}
#[repr(transparent)]
pub struct RadioButton(::windows_core::IUnknown);
impl RadioButton {}
impl ::core::cmp::PartialEq for RadioButton {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RadioButton {}
impl ::core::fmt::Debug for RadioButton {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RadioButton").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RadioButton {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.RadioButton;{325c44e0-9a03-4bf3-abd6-6fbb46c9a486})",
    );
}
impl ::core::clone::Clone for RadioButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for RadioButton {
    type Vtable = IRadioButton_Vtbl;
}
unsafe impl ::windows_core::ComInterface for RadioButton {
    const IID: ::windows_core::GUID = <IRadioButton as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for RadioButton {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.RadioButton";
}
::windows_core::imp::interface_hierarchy!(
    RadioButton, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Primitives::ToggleButton> for RadioButton {}
impl ::windows_core::CanTryInto<Primitives::ButtonBase> for RadioButton {}
impl ::windows_core::CanTryInto<ContentControl> for RadioButton {}
impl ::windows_core::CanTryInto<Control> for RadioButton {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for RadioButton {}
impl ::windows_core::CanTryInto<super::UIElement> for RadioButton {}
impl ::windows_core::CanTryInto<super::DependencyObject> for RadioButton {}
unsafe impl ::core::marker::Send for RadioButton {}
unsafe impl ::core::marker::Sync for RadioButton {}
#[repr(transparent)]
pub struct RatingControl(::windows_core::IUnknown);
impl RatingControl {}
impl ::core::cmp::PartialEq for RatingControl {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RatingControl {}
impl ::core::fmt::Debug for RatingControl {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RatingControl").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RatingControl {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.RatingControl;{a7d91ca7-e5cf-4963-a24e-9673fe5ffdd5})",
    );
}
impl ::core::clone::Clone for RatingControl {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for RatingControl {
    type Vtable = IRatingControl_Vtbl;
}
unsafe impl ::windows_core::ComInterface for RatingControl {
    const IID: ::windows_core::GUID = <IRatingControl as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for RatingControl {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.RatingControl";
}
::windows_core::imp::interface_hierarchy!(
    RatingControl, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for RatingControl {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for RatingControl {}
impl ::windows_core::CanTryInto<super::UIElement> for RatingControl {}
impl ::windows_core::CanTryInto<super::DependencyObject> for RatingControl {}
unsafe impl ::core::marker::Send for RatingControl {}
unsafe impl ::core::marker::Sync for RatingControl {}
#[repr(transparent)]
pub struct RatingItemFontInfo(::windows_core::IUnknown);
impl RatingItemFontInfo {}
impl ::core::cmp::PartialEq for RatingItemFontInfo {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RatingItemFontInfo {}
impl ::core::fmt::Debug for RatingItemFontInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RatingItemFontInfo").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RatingItemFontInfo {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.RatingItemFontInfo;{054723e9-7989-4d5c-9d01-a7eb876f1071})",
    );
}
impl ::core::clone::Clone for RatingItemFontInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for RatingItemFontInfo {
    type Vtable = IRatingItemFontInfo_Vtbl;
}
unsafe impl ::windows_core::ComInterface for RatingItemFontInfo {
    const IID: ::windows_core::GUID = <IRatingItemFontInfo as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for RatingItemFontInfo {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.RatingItemFontInfo";
}
::windows_core::imp::interface_hierarchy!(
    RatingItemFontInfo, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<RatingItemInfo> for RatingItemFontInfo {}
impl ::windows_core::CanTryInto<super::DependencyObject> for RatingItemFontInfo {}
unsafe impl ::core::marker::Send for RatingItemFontInfo {}
unsafe impl ::core::marker::Sync for RatingItemFontInfo {}
#[repr(transparent)]
pub struct RatingItemImageInfo(::windows_core::IUnknown);
impl RatingItemImageInfo {}
impl ::core::cmp::PartialEq for RatingItemImageInfo {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RatingItemImageInfo {}
impl ::core::fmt::Debug for RatingItemImageInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RatingItemImageInfo").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RatingItemImageInfo {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.RatingItemImageInfo;{25240e8c-e0d2-490e-b8f8-96c8ee0512b9})",
    );
}
impl ::core::clone::Clone for RatingItemImageInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for RatingItemImageInfo {
    type Vtable = IRatingItemImageInfo_Vtbl;
}
unsafe impl ::windows_core::ComInterface for RatingItemImageInfo {
    const IID: ::windows_core::GUID = <IRatingItemImageInfo as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for RatingItemImageInfo {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.RatingItemImageInfo";
}
::windows_core::imp::interface_hierarchy!(
    RatingItemImageInfo, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<RatingItemInfo> for RatingItemImageInfo {}
impl ::windows_core::CanTryInto<super::DependencyObject> for RatingItemImageInfo {}
unsafe impl ::core::marker::Send for RatingItemImageInfo {}
unsafe impl ::core::marker::Sync for RatingItemImageInfo {}
#[repr(transparent)]
pub struct RatingItemInfo(::windows_core::IUnknown);
impl RatingItemInfo {}
impl ::core::cmp::PartialEq for RatingItemInfo {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RatingItemInfo {}
impl ::core::fmt::Debug for RatingItemInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RatingItemInfo").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RatingItemInfo {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.RatingItemInfo;{9ccbe6a2-591e-47a0-a318-6a1f7947da2d})",
    );
}
impl ::core::clone::Clone for RatingItemInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for RatingItemInfo {
    type Vtable = IRatingItemInfo_Vtbl;
}
unsafe impl ::windows_core::ComInterface for RatingItemInfo {
    const IID: ::windows_core::GUID = <IRatingItemInfo as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for RatingItemInfo {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.RatingItemInfo";
}
::windows_core::imp::interface_hierarchy!(
    RatingItemInfo, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::DependencyObject> for RatingItemInfo {}
unsafe impl ::core::marker::Send for RatingItemInfo {}
unsafe impl ::core::marker::Sync for RatingItemInfo {}
#[repr(transparent)]
pub struct RefreshContainer(::windows_core::IUnknown);
impl RefreshContainer {}
impl ::core::cmp::PartialEq for RefreshContainer {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RefreshContainer {}
impl ::core::fmt::Debug for RefreshContainer {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RefreshContainer").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RefreshContainer {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.RefreshContainer;{535dc413-b1d5-43c1-b057-8658ce1e0ba2})",
    );
}
impl ::core::clone::Clone for RefreshContainer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for RefreshContainer {
    type Vtable = IRefreshContainer_Vtbl;
}
unsafe impl ::windows_core::ComInterface for RefreshContainer {
    const IID: ::windows_core::GUID = <IRefreshContainer as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for RefreshContainer {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.RefreshContainer";
}
::windows_core::imp::interface_hierarchy!(
    RefreshContainer, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ContentControl> for RefreshContainer {}
impl ::windows_core::CanTryInto<Control> for RefreshContainer {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for RefreshContainer {}
impl ::windows_core::CanTryInto<super::UIElement> for RefreshContainer {}
impl ::windows_core::CanTryInto<super::DependencyObject> for RefreshContainer {}
unsafe impl ::core::marker::Send for RefreshContainer {}
unsafe impl ::core::marker::Sync for RefreshContainer {}
#[repr(transparent)]
pub struct RefreshInteractionRatioChangedEventArgs(::windows_core::IUnknown);
impl RefreshInteractionRatioChangedEventArgs {}
impl ::core::cmp::PartialEq for RefreshInteractionRatioChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RefreshInteractionRatioChangedEventArgs {}
impl ::core::fmt::Debug for RefreshInteractionRatioChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RefreshInteractionRatioChangedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RefreshInteractionRatioChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.RefreshInteractionRatioChangedEventArgs;{d7e47820-dc47-4b8e-bb27-7f0a83f29a07})",
    );
}
impl ::core::clone::Clone for RefreshInteractionRatioChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for RefreshInteractionRatioChangedEventArgs {
    type Vtable = IRefreshInteractionRatioChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for RefreshInteractionRatioChangedEventArgs {
    const IID: ::windows_core::GUID = <IRefreshInteractionRatioChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for RefreshInteractionRatioChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.RefreshInteractionRatioChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    RefreshInteractionRatioChangedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for RefreshInteractionRatioChangedEventArgs {}
unsafe impl ::core::marker::Sync for RefreshInteractionRatioChangedEventArgs {}
#[repr(transparent)]
pub struct RefreshRequestedEventArgs(::windows_core::IUnknown);
impl RefreshRequestedEventArgs {}
impl ::core::cmp::PartialEq for RefreshRequestedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RefreshRequestedEventArgs {}
impl ::core::fmt::Debug for RefreshRequestedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RefreshRequestedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RefreshRequestedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.RefreshRequestedEventArgs;{1b089f43-cfcf-4ac6-b31f-8dab6eefdd93})",
    );
}
impl ::core::clone::Clone for RefreshRequestedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for RefreshRequestedEventArgs {
    type Vtable = IRefreshRequestedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for RefreshRequestedEventArgs {
    const IID: ::windows_core::GUID = <IRefreshRequestedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for RefreshRequestedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.RefreshRequestedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    RefreshRequestedEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for RefreshRequestedEventArgs {}
unsafe impl ::core::marker::Sync for RefreshRequestedEventArgs {}
#[repr(transparent)]
pub struct RefreshStateChangedEventArgs(::windows_core::IUnknown);
impl RefreshStateChangedEventArgs {}
impl ::core::cmp::PartialEq for RefreshStateChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RefreshStateChangedEventArgs {}
impl ::core::fmt::Debug for RefreshStateChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RefreshStateChangedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RefreshStateChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.RefreshStateChangedEventArgs;{bb6c901e-21fe-4109-af80-73ec661b678a})",
    );
}
impl ::core::clone::Clone for RefreshStateChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for RefreshStateChangedEventArgs {
    type Vtable = IRefreshStateChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for RefreshStateChangedEventArgs {
    const IID: ::windows_core::GUID = <IRefreshStateChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for RefreshStateChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.RefreshStateChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    RefreshStateChangedEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for RefreshStateChangedEventArgs {}
unsafe impl ::core::marker::Sync for RefreshStateChangedEventArgs {}
#[repr(transparent)]
pub struct RefreshVisualizer(::windows_core::IUnknown);
impl RefreshVisualizer {}
impl ::core::cmp::PartialEq for RefreshVisualizer {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RefreshVisualizer {}
impl ::core::fmt::Debug for RefreshVisualizer {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RefreshVisualizer").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RefreshVisualizer {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.RefreshVisualizer;{c0e30122-f3eb-4baa-a11f-c3f87342cbf4})",
    );
}
impl ::core::clone::Clone for RefreshVisualizer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for RefreshVisualizer {
    type Vtable = IRefreshVisualizer_Vtbl;
}
unsafe impl ::windows_core::ComInterface for RefreshVisualizer {
    const IID: ::windows_core::GUID = <IRefreshVisualizer as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for RefreshVisualizer {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.RefreshVisualizer";
}
::windows_core::imp::interface_hierarchy!(
    RefreshVisualizer, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for RefreshVisualizer {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for RefreshVisualizer {}
impl ::windows_core::CanTryInto<super::UIElement> for RefreshVisualizer {}
impl ::windows_core::CanTryInto<super::DependencyObject> for RefreshVisualizer {}
unsafe impl ::core::marker::Send for RefreshVisualizer {}
unsafe impl ::core::marker::Sync for RefreshVisualizer {}
#[repr(transparent)]
pub struct RelativePanel(::windows_core::IUnknown);
impl RelativePanel {}
impl ::core::cmp::PartialEq for RelativePanel {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RelativePanel {}
impl ::core::fmt::Debug for RelativePanel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RelativePanel").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RelativePanel {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.RelativePanel;{2eabfaeb-b35a-4035-acea-3c4a3730683f})",
    );
}
impl ::core::clone::Clone for RelativePanel {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for RelativePanel {
    type Vtable = IRelativePanel_Vtbl;
}
unsafe impl ::windows_core::ComInterface for RelativePanel {
    const IID: ::windows_core::GUID = <IRelativePanel as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for RelativePanel {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.RelativePanel";
}
::windows_core::imp::interface_hierarchy!(
    RelativePanel, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Panel> for RelativePanel {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for RelativePanel {}
impl ::windows_core::CanTryInto<super::UIElement> for RelativePanel {}
impl ::windows_core::CanTryInto<super::DependencyObject> for RelativePanel {}
unsafe impl ::core::marker::Send for RelativePanel {}
unsafe impl ::core::marker::Sync for RelativePanel {}
#[repr(transparent)]
pub struct RichEditBox(::windows_core::IUnknown);
impl RichEditBox {}
impl ::core::cmp::PartialEq for RichEditBox {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RichEditBox {}
impl ::core::fmt::Debug for RichEditBox {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RichEditBox").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RichEditBox {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.RichEditBox;{90a57a40-80b6-4fce-b1ec-e3c616284b6a})",
    );
}
impl ::core::clone::Clone for RichEditBox {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for RichEditBox {
    type Vtable = IRichEditBox_Vtbl;
}
unsafe impl ::windows_core::ComInterface for RichEditBox {
    const IID: ::windows_core::GUID = <IRichEditBox as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for RichEditBox {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.RichEditBox";
}
::windows_core::imp::interface_hierarchy!(
    RichEditBox, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for RichEditBox {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for RichEditBox {}
impl ::windows_core::CanTryInto<super::UIElement> for RichEditBox {}
impl ::windows_core::CanTryInto<super::DependencyObject> for RichEditBox {}
unsafe impl ::core::marker::Send for RichEditBox {}
unsafe impl ::core::marker::Sync for RichEditBox {}
#[repr(transparent)]
pub struct RichEditBoxSelectionChangingEventArgs(::windows_core::IUnknown);
impl RichEditBoxSelectionChangingEventArgs {}
impl ::core::cmp::PartialEq for RichEditBoxSelectionChangingEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RichEditBoxSelectionChangingEventArgs {}
impl ::core::fmt::Debug for RichEditBoxSelectionChangingEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RichEditBoxSelectionChangingEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RichEditBoxSelectionChangingEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.RichEditBoxSelectionChangingEventArgs;{90e0035c-e8b8-5c33-9896-4e989d65829c})",
    );
}
impl ::core::clone::Clone for RichEditBoxSelectionChangingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for RichEditBoxSelectionChangingEventArgs {
    type Vtable = IRichEditBoxSelectionChangingEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for RichEditBoxSelectionChangingEventArgs {
    const IID: ::windows_core::GUID = <IRichEditBoxSelectionChangingEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for RichEditBoxSelectionChangingEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.RichEditBoxSelectionChangingEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    RichEditBoxSelectionChangingEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for RichEditBoxSelectionChangingEventArgs {}
unsafe impl ::core::marker::Sync for RichEditBoxSelectionChangingEventArgs {}
#[repr(transparent)]
pub struct RichEditBoxTextChangingEventArgs(::windows_core::IUnknown);
impl RichEditBoxTextChangingEventArgs {}
impl ::core::cmp::PartialEq for RichEditBoxTextChangingEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RichEditBoxTextChangingEventArgs {}
impl ::core::fmt::Debug for RichEditBoxTextChangingEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RichEditBoxTextChangingEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RichEditBoxTextChangingEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.RichEditBoxTextChangingEventArgs;{54065018-2813-4922-9f8e-b6bbafd995d8})",
    );
}
impl ::core::clone::Clone for RichEditBoxTextChangingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for RichEditBoxTextChangingEventArgs {
    type Vtable = IRichEditBoxTextChangingEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for RichEditBoxTextChangingEventArgs {
    const IID: ::windows_core::GUID = <IRichEditBoxTextChangingEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for RichEditBoxTextChangingEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.RichEditBoxTextChangingEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    RichEditBoxTextChangingEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for RichEditBoxTextChangingEventArgs {}
unsafe impl ::core::marker::Sync for RichEditBoxTextChangingEventArgs {}
#[repr(transparent)]
pub struct RichTextBlock(::windows_core::IUnknown);
impl RichTextBlock {}
impl ::core::cmp::PartialEq for RichTextBlock {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RichTextBlock {}
impl ::core::fmt::Debug for RichTextBlock {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RichTextBlock").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RichTextBlock {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.RichTextBlock;{e5fff9e2-b968-49e7-97d4-8cca2ac3ae7c})",
    );
}
impl ::core::clone::Clone for RichTextBlock {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for RichTextBlock {
    type Vtable = IRichTextBlock_Vtbl;
}
unsafe impl ::windows_core::ComInterface for RichTextBlock {
    const IID: ::windows_core::GUID = <IRichTextBlock as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for RichTextBlock {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.RichTextBlock";
}
::windows_core::imp::interface_hierarchy!(
    RichTextBlock, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::FrameworkElement> for RichTextBlock {}
impl ::windows_core::CanTryInto<super::UIElement> for RichTextBlock {}
impl ::windows_core::CanTryInto<super::DependencyObject> for RichTextBlock {}
unsafe impl ::core::marker::Send for RichTextBlock {}
unsafe impl ::core::marker::Sync for RichTextBlock {}
#[repr(transparent)]
pub struct RichTextBlockOverflow(::windows_core::IUnknown);
impl RichTextBlockOverflow {}
impl ::core::cmp::PartialEq for RichTextBlockOverflow {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RichTextBlockOverflow {}
impl ::core::fmt::Debug for RichTextBlockOverflow {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RichTextBlockOverflow").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RichTextBlockOverflow {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.RichTextBlockOverflow;{4f93749b-dac3-4a42-9cbb-99f0de37c071})",
    );
}
impl ::core::clone::Clone for RichTextBlockOverflow {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for RichTextBlockOverflow {
    type Vtable = IRichTextBlockOverflow_Vtbl;
}
unsafe impl ::windows_core::ComInterface for RichTextBlockOverflow {
    const IID: ::windows_core::GUID = <IRichTextBlockOverflow as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for RichTextBlockOverflow {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.RichTextBlockOverflow";
}
::windows_core::imp::interface_hierarchy!(
    RichTextBlockOverflow, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::FrameworkElement> for RichTextBlockOverflow {}
impl ::windows_core::CanTryInto<super::UIElement> for RichTextBlockOverflow {}
impl ::windows_core::CanTryInto<super::DependencyObject> for RichTextBlockOverflow {}
unsafe impl ::core::marker::Send for RichTextBlockOverflow {}
unsafe impl ::core::marker::Sync for RichTextBlockOverflow {}
#[repr(transparent)]
pub struct RowDefinition(::windows_core::IUnknown);
impl RowDefinition {}
impl ::core::cmp::PartialEq for RowDefinition {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RowDefinition {}
impl ::core::fmt::Debug for RowDefinition {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RowDefinition").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RowDefinition {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.RowDefinition;{4abae829-d80c-4a5e-a48c-f8b3d3b6533d})",
    );
}
impl ::core::clone::Clone for RowDefinition {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for RowDefinition {
    type Vtable = IRowDefinition_Vtbl;
}
unsafe impl ::windows_core::ComInterface for RowDefinition {
    const IID: ::windows_core::GUID = <IRowDefinition as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for RowDefinition {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.RowDefinition";
}
::windows_core::imp::interface_hierarchy!(
    RowDefinition, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::DependencyObject> for RowDefinition {}
unsafe impl ::core::marker::Send for RowDefinition {}
unsafe impl ::core::marker::Sync for RowDefinition {}
#[repr(transparent)]
pub struct RowDefinitionCollection(::windows_core::IUnknown);
impl RowDefinitionCollection {}
impl ::core::cmp::PartialEq for RowDefinitionCollection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RowDefinitionCollection {}
impl ::core::fmt::Debug for RowDefinitionCollection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RowDefinitionCollection").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RowDefinitionCollection {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.RowDefinitionCollection;pinterface({913337e9-11a1-4345-a3a2-4e7f956e222d};rc(Windows.UI.Xaml.Controls.RowDefinition;{4abae829-d80c-4a5e-a48c-f8b3d3b6533d})))",
    );
}
impl ::core::clone::Clone for RowDefinitionCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for RowDefinitionCollection {
    type Vtable = super::super::super::Foundation::Collections::IVector_Vtbl<
        RowDefinition,
    >;
}
unsafe impl ::windows_core::ComInterface for RowDefinitionCollection {
    const IID: ::windows_core::GUID = <super::super::super::Foundation::Collections::IVector<
        RowDefinition,
    > as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for RowDefinitionCollection {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.RowDefinitionCollection";
}
impl ::core::iter::IntoIterator for RowDefinitionCollection {
    type Item = RowDefinition;
    type IntoIter = super::super::super::Foundation::Collections::VectorIterator<
        Self::Item,
    >;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
impl ::core::iter::IntoIterator for &RowDefinitionCollection {
    type Item = RowDefinition;
    type IntoIter = super::super::super::Foundation::Collections::VectorIterator<
        Self::Item,
    >;
    fn into_iter(self) -> Self::IntoIter {
        super::super::super::Foundation::Collections::VectorIterator::new(
            ::windows_core::ComInterface::cast(self).ok(),
        )
    }
}
::windows_core::imp::interface_hierarchy!(
    RowDefinitionCollection, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<
    super::super::super::Foundation::Collections::IIterable<RowDefinition>,
> for RowDefinitionCollection {}
impl ::windows_core::CanTryInto<
    super::super::super::Foundation::Collections::IVector<RowDefinition>,
> for RowDefinitionCollection {}
unsafe impl ::core::marker::Send for RowDefinitionCollection {}
unsafe impl ::core::marker::Sync for RowDefinitionCollection {}
#[repr(transparent)]
pub struct ScrollContentPresenter(::windows_core::IUnknown);
impl ScrollContentPresenter {}
impl ::core::cmp::PartialEq for ScrollContentPresenter {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ScrollContentPresenter {}
impl ::core::fmt::Debug for ScrollContentPresenter {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ScrollContentPresenter").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ScrollContentPresenter {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ScrollContentPresenter;{5712ee2b-0eeb-46d3-aa31-5f6801b8de20})",
    );
}
impl ::core::clone::Clone for ScrollContentPresenter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ScrollContentPresenter {
    type Vtable = IScrollContentPresenter_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ScrollContentPresenter {
    const IID: ::windows_core::GUID = <IScrollContentPresenter as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ScrollContentPresenter {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ScrollContentPresenter";
}
::windows_core::imp::interface_hierarchy!(
    ScrollContentPresenter, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ContentPresenter> for ScrollContentPresenter {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ScrollContentPresenter {}
impl ::windows_core::CanTryInto<super::UIElement> for ScrollContentPresenter {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ScrollContentPresenter {}
unsafe impl ::core::marker::Send for ScrollContentPresenter {}
unsafe impl ::core::marker::Sync for ScrollContentPresenter {}
#[repr(transparent)]
pub struct ScrollViewer(::windows_core::IUnknown);
impl ScrollViewer {}
impl ::core::cmp::PartialEq for ScrollViewer {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ScrollViewer {}
impl ::core::fmt::Debug for ScrollViewer {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ScrollViewer").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ScrollViewer {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ScrollViewer;{64e9be00-4dc1-493d-abe7-cbd3c577490d})",
    );
}
impl ::core::clone::Clone for ScrollViewer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ScrollViewer {
    type Vtable = IScrollViewer_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ScrollViewer {
    const IID: ::windows_core::GUID = <IScrollViewer as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ScrollViewer {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ScrollViewer";
}
::windows_core::imp::interface_hierarchy!(
    ScrollViewer, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IScrollAnchorProvider> for ScrollViewer {}
impl ::windows_core::CanTryInto<ContentControl> for ScrollViewer {}
impl ::windows_core::CanTryInto<Control> for ScrollViewer {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ScrollViewer {}
impl ::windows_core::CanTryInto<super::UIElement> for ScrollViewer {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ScrollViewer {}
unsafe impl ::core::marker::Send for ScrollViewer {}
unsafe impl ::core::marker::Sync for ScrollViewer {}
#[repr(transparent)]
pub struct ScrollViewerView(::windows_core::IUnknown);
impl ScrollViewerView {}
impl ::core::cmp::PartialEq for ScrollViewerView {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ScrollViewerView {}
impl ::core::fmt::Debug for ScrollViewerView {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ScrollViewerView").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ScrollViewerView {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ScrollViewerView;{64e9be01-4dc2-493e-abe8-cbd3c577490e})",
    );
}
impl ::core::clone::Clone for ScrollViewerView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ScrollViewerView {
    type Vtable = IScrollViewerView_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ScrollViewerView {
    const IID: ::windows_core::GUID = <IScrollViewerView as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ScrollViewerView {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ScrollViewerView";
}
::windows_core::imp::interface_hierarchy!(
    ScrollViewerView, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ScrollViewerView {}
unsafe impl ::core::marker::Sync for ScrollViewerView {}
#[repr(transparent)]
pub struct ScrollViewerViewChangedEventArgs(::windows_core::IUnknown);
impl ScrollViewerViewChangedEventArgs {}
impl ::core::cmp::PartialEq for ScrollViewerViewChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ScrollViewerViewChangedEventArgs {}
impl ::core::fmt::Debug for ScrollViewerViewChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ScrollViewerViewChangedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ScrollViewerViewChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs;{4dd04f7e-7a11-4b2e-9933-577df39252b6})",
    );
}
impl ::core::clone::Clone for ScrollViewerViewChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ScrollViewerViewChangedEventArgs {
    type Vtable = IScrollViewerViewChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ScrollViewerViewChangedEventArgs {
    const IID: ::windows_core::GUID = <IScrollViewerViewChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ScrollViewerViewChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    ScrollViewerViewChangedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ScrollViewerViewChangedEventArgs {}
unsafe impl ::core::marker::Sync for ScrollViewerViewChangedEventArgs {}
#[repr(transparent)]
pub struct ScrollViewerViewChangingEventArgs(::windows_core::IUnknown);
impl ScrollViewerViewChangingEventArgs {}
impl ::core::cmp::PartialEq for ScrollViewerViewChangingEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ScrollViewerViewChangingEventArgs {}
impl ::core::fmt::Debug for ScrollViewerViewChangingEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ScrollViewerViewChangingEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ScrollViewerViewChangingEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ScrollViewerViewChangingEventArgs;{4dd04f7f-7a11-4b2e-9933-577df39252b6})",
    );
}
impl ::core::clone::Clone for ScrollViewerViewChangingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ScrollViewerViewChangingEventArgs {
    type Vtable = IScrollViewerViewChangingEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ScrollViewerViewChangingEventArgs {
    const IID: ::windows_core::GUID = <IScrollViewerViewChangingEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ScrollViewerViewChangingEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ScrollViewerViewChangingEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    ScrollViewerViewChangingEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ScrollViewerViewChangingEventArgs {}
unsafe impl ::core::marker::Sync for ScrollViewerViewChangingEventArgs {}
#[repr(transparent)]
pub struct SearchBox(::windows_core::IUnknown);
impl SearchBox {}
impl ::core::cmp::PartialEq for SearchBox {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SearchBox {}
impl ::core::fmt::Debug for SearchBox {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SearchBox").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SearchBox {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SearchBox;{f89ecc5a-99ba-4bd4-966c-f11fa443d13c})",
    );
}
impl ::core::clone::Clone for SearchBox {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SearchBox {
    type Vtable = ISearchBox_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SearchBox {
    const IID: ::windows_core::GUID = <ISearchBox as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SearchBox {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SearchBox";
}
::windows_core::imp::interface_hierarchy!(
    SearchBox, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for SearchBox {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for SearchBox {}
impl ::windows_core::CanTryInto<super::UIElement> for SearchBox {}
impl ::windows_core::CanTryInto<super::DependencyObject> for SearchBox {}
unsafe impl ::core::marker::Send for SearchBox {}
unsafe impl ::core::marker::Sync for SearchBox {}
#[repr(transparent)]
pub struct SearchBoxQueryChangedEventArgs(::windows_core::IUnknown);
impl SearchBoxQueryChangedEventArgs {}
impl ::core::cmp::PartialEq for SearchBoxQueryChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SearchBoxQueryChangedEventArgs {}
impl ::core::fmt::Debug for SearchBoxQueryChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SearchBoxQueryChangedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SearchBoxQueryChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SearchBoxQueryChangedEventArgs;{a9a70f8f-0cb0-4bd2-9998-2fb57ad5e731})",
    );
}
impl ::core::clone::Clone for SearchBoxQueryChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SearchBoxQueryChangedEventArgs {
    type Vtable = ISearchBoxQueryChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SearchBoxQueryChangedEventArgs {
    const IID: ::windows_core::GUID = <ISearchBoxQueryChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SearchBoxQueryChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SearchBoxQueryChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    SearchBoxQueryChangedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for SearchBoxQueryChangedEventArgs {}
unsafe impl ::core::marker::Sync for SearchBoxQueryChangedEventArgs {}
#[repr(transparent)]
pub struct SearchBoxQuerySubmittedEventArgs(::windows_core::IUnknown);
impl SearchBoxQuerySubmittedEventArgs {}
impl ::core::cmp::PartialEq for SearchBoxQuerySubmittedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SearchBoxQuerySubmittedEventArgs {}
impl ::core::fmt::Debug for SearchBoxQuerySubmittedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SearchBoxQuerySubmittedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SearchBoxQuerySubmittedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SearchBoxQuerySubmittedEventArgs;{126e90fd-3c4e-4ccb-9aef-4705d19fe548})",
    );
}
impl ::core::clone::Clone for SearchBoxQuerySubmittedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SearchBoxQuerySubmittedEventArgs {
    type Vtable = ISearchBoxQuerySubmittedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SearchBoxQuerySubmittedEventArgs {
    const IID: ::windows_core::GUID = <ISearchBoxQuerySubmittedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SearchBoxQuerySubmittedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SearchBoxQuerySubmittedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    SearchBoxQuerySubmittedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for SearchBoxQuerySubmittedEventArgs {}
unsafe impl ::core::marker::Sync for SearchBoxQuerySubmittedEventArgs {}
#[repr(transparent)]
pub struct SearchBoxResultSuggestionChosenEventArgs(::windows_core::IUnknown);
impl SearchBoxResultSuggestionChosenEventArgs {}
impl ::core::cmp::PartialEq for SearchBoxResultSuggestionChosenEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SearchBoxResultSuggestionChosenEventArgs {}
impl ::core::fmt::Debug for SearchBoxResultSuggestionChosenEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SearchBoxResultSuggestionChosenEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SearchBoxResultSuggestionChosenEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SearchBoxResultSuggestionChosenEventArgs;{18918c23-e4c3-4662-a03b-d054ffd0f905})",
    );
}
impl ::core::clone::Clone for SearchBoxResultSuggestionChosenEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SearchBoxResultSuggestionChosenEventArgs {
    type Vtable = ISearchBoxResultSuggestionChosenEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SearchBoxResultSuggestionChosenEventArgs {
    const IID: ::windows_core::GUID = <ISearchBoxResultSuggestionChosenEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SearchBoxResultSuggestionChosenEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SearchBoxResultSuggestionChosenEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    SearchBoxResultSuggestionChosenEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for SearchBoxResultSuggestionChosenEventArgs {}
unsafe impl ::core::marker::Sync for SearchBoxResultSuggestionChosenEventArgs {}
#[repr(transparent)]
pub struct SearchBoxSuggestionsRequestedEventArgs(::windows_core::IUnknown);
impl SearchBoxSuggestionsRequestedEventArgs {}
impl ::core::cmp::PartialEq for SearchBoxSuggestionsRequestedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SearchBoxSuggestionsRequestedEventArgs {}
impl ::core::fmt::Debug for SearchBoxSuggestionsRequestedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SearchBoxSuggestionsRequestedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SearchBoxSuggestionsRequestedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SearchBoxSuggestionsRequestedEventArgs;{da15170e-e566-48cb-bd11-fe4b0f30a44d})",
    );
}
impl ::core::clone::Clone for SearchBoxSuggestionsRequestedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SearchBoxSuggestionsRequestedEventArgs {
    type Vtable = ISearchBoxSuggestionsRequestedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SearchBoxSuggestionsRequestedEventArgs {
    const IID: ::windows_core::GUID = <ISearchBoxSuggestionsRequestedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SearchBoxSuggestionsRequestedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SearchBoxSuggestionsRequestedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    SearchBoxSuggestionsRequestedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for SearchBoxSuggestionsRequestedEventArgs {}
unsafe impl ::core::marker::Sync for SearchBoxSuggestionsRequestedEventArgs {}
#[repr(transparent)]
pub struct SectionsInViewChangedEventArgs(::windows_core::IUnknown);
impl SectionsInViewChangedEventArgs {}
impl ::core::cmp::PartialEq for SectionsInViewChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SectionsInViewChangedEventArgs {}
impl ::core::fmt::Debug for SectionsInViewChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SectionsInViewChangedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SectionsInViewChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SectionsInViewChangedEventArgs;{dd49ee6b-d165-430f-a37d-b807064f85e1})",
    );
}
impl ::core::clone::Clone for SectionsInViewChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SectionsInViewChangedEventArgs {
    type Vtable = ISectionsInViewChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SectionsInViewChangedEventArgs {
    const IID: ::windows_core::GUID = <ISectionsInViewChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SectionsInViewChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SectionsInViewChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    SectionsInViewChangedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for SectionsInViewChangedEventArgs {}
unsafe impl ::core::marker::Sync for SectionsInViewChangedEventArgs {}
#[repr(transparent)]
pub struct SelectionChangedEventArgs(::windows_core::IUnknown);
impl SelectionChangedEventArgs {}
impl ::core::cmp::PartialEq for SelectionChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SelectionChangedEventArgs {}
impl ::core::fmt::Debug for SelectionChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SelectionChangedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SelectionChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SelectionChangedEventArgs;{c972d2dc-b609-4758-851e-a799c21de97d})",
    );
}
impl ::core::clone::Clone for SelectionChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SelectionChangedEventArgs {
    type Vtable = ISelectionChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SelectionChangedEventArgs {
    const IID: ::windows_core::GUID = <ISelectionChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SelectionChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SelectionChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    SelectionChangedEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::RoutedEventArgs> for SelectionChangedEventArgs {}
unsafe impl ::core::marker::Send for SelectionChangedEventArgs {}
unsafe impl ::core::marker::Sync for SelectionChangedEventArgs {}
#[repr(transparent)]
pub struct SemanticZoom(::windows_core::IUnknown);
impl SemanticZoom {}
impl ::core::cmp::PartialEq for SemanticZoom {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SemanticZoom {}
impl ::core::fmt::Debug for SemanticZoom {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SemanticZoom").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SemanticZoom {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SemanticZoom;{019fff21-ece6-4fbc-bf40-8938d4813e27})",
    );
}
impl ::core::clone::Clone for SemanticZoom {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SemanticZoom {
    type Vtable = ISemanticZoom_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SemanticZoom {
    const IID: ::windows_core::GUID = <ISemanticZoom as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SemanticZoom {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SemanticZoom";
}
::windows_core::imp::interface_hierarchy!(
    SemanticZoom, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for SemanticZoom {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for SemanticZoom {}
impl ::windows_core::CanTryInto<super::UIElement> for SemanticZoom {}
impl ::windows_core::CanTryInto<super::DependencyObject> for SemanticZoom {}
unsafe impl ::core::marker::Send for SemanticZoom {}
unsafe impl ::core::marker::Sync for SemanticZoom {}
#[repr(transparent)]
pub struct SemanticZoomLocation(::windows_core::IUnknown);
impl SemanticZoomLocation {}
impl ::core::cmp::PartialEq for SemanticZoomLocation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SemanticZoomLocation {}
impl ::core::fmt::Debug for SemanticZoomLocation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SemanticZoomLocation").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SemanticZoomLocation {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SemanticZoomLocation;{42011736-e3c2-496b-bc4e-d750d4375b9a})",
    );
}
impl ::core::clone::Clone for SemanticZoomLocation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SemanticZoomLocation {
    type Vtable = ISemanticZoomLocation_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SemanticZoomLocation {
    const IID: ::windows_core::GUID = <ISemanticZoomLocation as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SemanticZoomLocation {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SemanticZoomLocation";
}
::windows_core::imp::interface_hierarchy!(
    SemanticZoomLocation, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for SemanticZoomLocation {}
unsafe impl ::core::marker::Sync for SemanticZoomLocation {}
#[repr(transparent)]
pub struct SemanticZoomViewChangedEventArgs(::windows_core::IUnknown);
impl SemanticZoomViewChangedEventArgs {}
impl ::core::cmp::PartialEq for SemanticZoomViewChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SemanticZoomViewChangedEventArgs {}
impl ::core::fmt::Debug for SemanticZoomViewChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SemanticZoomViewChangedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SemanticZoomViewChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SemanticZoomViewChangedEventArgs;{47dfc068-b569-4b19-842d-8e6cf90989af})",
    );
}
impl ::core::clone::Clone for SemanticZoomViewChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SemanticZoomViewChangedEventArgs {
    type Vtable = ISemanticZoomViewChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SemanticZoomViewChangedEventArgs {
    const IID: ::windows_core::GUID = <ISemanticZoomViewChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SemanticZoomViewChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SemanticZoomViewChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    SemanticZoomViewChangedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for SemanticZoomViewChangedEventArgs {}
unsafe impl ::core::marker::Sync for SemanticZoomViewChangedEventArgs {}
#[repr(transparent)]
pub struct SettingsFlyout(::windows_core::IUnknown);
impl SettingsFlyout {}
impl ::core::cmp::PartialEq for SettingsFlyout {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SettingsFlyout {}
impl ::core::fmt::Debug for SettingsFlyout {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SettingsFlyout").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SettingsFlyout {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SettingsFlyout;{830ba82b-c55b-4e32-a51c-5791e024c8af})",
    );
}
impl ::core::clone::Clone for SettingsFlyout {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SettingsFlyout {
    type Vtable = ISettingsFlyout_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SettingsFlyout {
    const IID: ::windows_core::GUID = <ISettingsFlyout as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SettingsFlyout {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SettingsFlyout";
}
::windows_core::imp::interface_hierarchy!(
    SettingsFlyout, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ContentControl> for SettingsFlyout {}
impl ::windows_core::CanTryInto<Control> for SettingsFlyout {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for SettingsFlyout {}
impl ::windows_core::CanTryInto<super::UIElement> for SettingsFlyout {}
impl ::windows_core::CanTryInto<super::DependencyObject> for SettingsFlyout {}
unsafe impl ::core::marker::Send for SettingsFlyout {}
unsafe impl ::core::marker::Sync for SettingsFlyout {}
#[repr(transparent)]
pub struct Slider(::windows_core::IUnknown);
impl Slider {
    pub fn FontSize(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontSize)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFontSize)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn FontFamily(&self) -> ::windows_core::Result<super::Media::FontFamily> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontFamily)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFontFamily<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::FontFamily>,
    {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFontFamily)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn FontWeight(&self) -> ::windows_core::Result<super::super::Text::FontWeight> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontWeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFontWeight(
        &self,
        value: super::super::Text::FontWeight,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFontWeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn FontStyle(&self) -> ::windows_core::Result<super::super::Text::FontStyle> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontStyle)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFontStyle(
        &self,
        value: super::super::Text::FontStyle,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFontStyle)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn FontStretch(
        &self,
    ) -> ::windows_core::Result<super::super::Text::FontStretch> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontStretch)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: super::super::Text::FontStretch,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFontStretch)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> ::windows_core::Result<i32> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CharacterSpacing)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCharacterSpacing)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Foreground(&self) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Foreground)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetForeground<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetForeground)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn IsTabStop(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsTabStop)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsTabStop)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsEnabled)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn TabIndex(&self) -> ::windows_core::Result<i32> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TabIndex)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTabIndex)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Template(&self) -> ::windows_core::Result<ControlTemplate> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Template)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetTemplate<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ControlTemplate>,
    {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTemplate)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn Padding(&self) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Padding)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetPadding(&self, value: super::Thickness) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetPadding)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn HorizontalContentAlignment(
        &self,
    ) -> ::windows_core::Result<super::HorizontalAlignment> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HorizontalContentAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetHorizontalContentAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHorizontalContentAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn VerticalContentAlignment(
        &self,
    ) -> ::windows_core::Result<super::VerticalAlignment> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .VerticalContentAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetVerticalContentAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetVerticalContentAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn Background(&self) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Background)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetBackground<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetBackground)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn BorderThickness(&self) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BorderThickness)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetBorderThickness(
        &self,
        value: super::Thickness,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetBorderThickness)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn BorderBrush(&self) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BorderBrush)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetBorderBrush<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetBorderBrush)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn FocusState(&self) -> ::windows_core::Result<super::FocusState> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusState)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn IsEnabledChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DependencyPropertyChangedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsEnabledChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveIsEnabledChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveIsEnabledChanged)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn ApplyTemplate(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ApplyTemplate)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Focus(&self, value: super::FocusState) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Focus)(::windows_core::Interface::as_raw(this), value, &mut result__)
                .from_abi(result__)
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IControl2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsTextScaleFactorEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(
        &self,
        value: bool,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsTextScaleFactorEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IControl3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .UseSystemFocusVisuals)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetUseSystemFocusVisuals)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn IsFocusEngagementEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsFocusEngagementEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsFocusEngagementEnabled(
        &self,
        value: bool,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsFocusEngagementEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn IsFocusEngaged(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsFocusEngaged)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetIsFocusEngaged(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsFocusEngaged)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn RequiresPointer(&self) -> ::windows_core::Result<RequiresPointer> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RequiresPointer)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetRequiresPointer(
        &self,
        value: RequiresPointer,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRequiresPointer)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .XYFocusLeft)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetXYFocusLeft)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn XYFocusRight(&self) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .XYFocusRight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetXYFocusRight)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn XYFocusUp(&self) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .XYFocusUp)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetXYFocusUp)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn XYFocusDown(&self) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .XYFocusDown)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetXYFocusDown)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn ElementSoundMode(&self) -> ::windows_core::Result<super::ElementSoundMode> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ElementSoundMode)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetElementSoundMode(
        &self,
        value: super::ElementSoundMode,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetElementSoundMode)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn FocusEngaged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                Control,
                FocusEngagedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusEngaged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveFocusEngaged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveFocusEngaged)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn FocusDisengaged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                Control,
                FocusDisengagedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusDisengaged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveFocusDisengaged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveFocusDisengaged)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveFocusEngagement(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveFocusEngagement)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn DefaultStyleResourceUri(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Uri> {
        let this = &::windows_core::ComInterface::cast::<IControl5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DefaultStyleResourceUri)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetDefaultStyleResourceUri<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::super::Foundation::Uri>,
    {
        let this = &::windows_core::ComInterface::cast::<IControl5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetDefaultStyleResourceUri)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn BackgroundSizing(&self) -> ::windows_core::Result<BackgroundSizing> {
        let this = &::windows_core::ComInterface::cast::<IControl7>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BackgroundSizing)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetBackgroundSizing(
        &self,
        value: BackgroundSizing,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetBackgroundSizing)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn CornerRadius(&self) -> ::windows_core::Result<super::CornerRadius> {
        let this = &::windows_core::ComInterface::cast::<IControl7>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CornerRadius)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCornerRadius(
        &self,
        value: super::CornerRadius,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCornerRadius)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn OnGotFocus<P0>(&self, e: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::RoutedEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<IControlOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnGotFocus)(
                    ::windows_core::Interface::as_raw(this),
                    e.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn OnLostFocus<P0>(&self, e: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::RoutedEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<IControlOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnLostFocus)(
                    ::windows_core::Interface::as_raw(this),
                    e.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn OnDragEnter<P0>(&self, e: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DragEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<IControlOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnDragEnter)(
                    ::windows_core::Interface::as_raw(this),
                    e.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn OnDragLeave<P0>(&self, e: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DragEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<IControlOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnDragLeave)(
                    ::windows_core::Interface::as_raw(this),
                    e.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn OnDragOver<P0>(&self, e: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DragEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<IControlOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnDragOver)(
                    ::windows_core::Interface::as_raw(this),
                    e.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn OnDrop<P0>(&self, e: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DragEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<IControlOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnDrop)(::windows_core::Interface::as_raw(this), e.into_param().abi())
                .ok()
        }
    }
    pub fn DefaultStyleKey(
        &self,
    ) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DefaultStyleKey)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetDefaultStyleKey<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IControlProtected>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetDefaultStyleKey)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn GetTemplateChild(
        &self,
        childname: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetTemplateChild)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(childname),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn GetValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .ClearValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn ReadLocalValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ReadLocalValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetAnimationBaseValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
        P1: ::windows_core::IntoParam<super::DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RegisterPropertyChangedCallback)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    callback.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject2,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .UnregisterPropertyChangedCallback)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    token,
                )
                .ok()
        }
    }
    pub fn Triggers(&self) -> ::windows_core::Result<super::TriggerCollection> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Triggers)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Resources(&self) -> ::windows_core::Result<super::ResourceDictionary> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Resources)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::ResourceDictionary>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetResources)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn Tag(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Tag)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTag)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn Language(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Language)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetLanguage(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetLanguage)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn ActualWidth(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualWidth)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn ActualHeight(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualHeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Width(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Width)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetWidth)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Height(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Height)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MinWidth(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MinWidth)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMinWidth)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MaxWidth(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MaxWidth)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMaxWidth)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MinHeight(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MinHeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMinHeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MaxHeight(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MaxHeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMaxHeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn HorizontalAlignment(
        &self,
    ) -> ::windows_core::Result<super::HorizontalAlignment> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HorizontalAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHorizontalAlignment)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> ::windows_core::Result<super::VerticalAlignment> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .VerticalAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetVerticalAlignment)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Margin(&self) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Margin)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMargin(&self, value: super::Thickness) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMargin)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Name(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Name)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetName(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetName)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn BaseUri(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Uri> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BaseUri)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn DataContext(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DataContext)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetDataContext)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn Style(&self) -> ::windows_core::Result<super::Style> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Style)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetStyle<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::Style>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetStyle)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn Parent(&self) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Parent)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn FlowDirection(&self) -> ::windows_core::Result<super::FlowDirection> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FlowDirection)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFlowDirection(
        &self,
        value: super::FlowDirection,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFlowDirection)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Loaded<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Loaded)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLoaded(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLoaded)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn Unloaded<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Unloaded)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveUnloaded(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveUnloaded)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn SizeChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::SizeChangedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SizeChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveSizeChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveSizeChanged)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn LayoutUpdated<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::EventHandler<::windows_core::IInspectable>,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .LayoutUpdated)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLayoutUpdated(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLayoutUpdated)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FindName)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(name),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RequestedTheme(&self) -> ::windows_core::Result<super::ElementTheme> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RequestedTheme)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetRequestedTheme(
        &self,
        value: super::ElementTheme,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRequestedTheme)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn DataContextChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::DataContextChangedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DataContextChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDataContextChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDataContextChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn Loading<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows_core::IInspectable,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement3,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Loading)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLoading(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement3,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLoading)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AllowFocusOnInteraction)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAllowFocusOnInteraction)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn FocusVisualMargin(&self) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualMargin)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualMargin(
        &self,
        value: super::Thickness,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualMargin)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn FocusVisualSecondaryThickness(
        &self,
    ) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualSecondaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualSecondaryThickness(
        &self,
        value: super::Thickness,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualSecondaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn FocusVisualPrimaryThickness(
        &self,
    ) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualPrimaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualPrimaryThickness(
        &self,
        value: super::Thickness,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualPrimaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn FocusVisualSecondaryBrush(
        &self,
    ) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualSecondaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualSecondaryBrush<P0>(
        &self,
        value: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualSecondaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn FocusVisualPrimaryBrush(
        &self,
    ) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualPrimaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualPrimaryBrush<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualPrimaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AllowFocusWhenDisabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAllowFocusWhenDisabled)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn ActualTheme(&self) -> ::windows_core::Result<super::ElementTheme> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement6,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualTheme)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn ActualThemeChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows_core::IInspectable,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement6,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualThemeChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveActualThemeChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement6,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveActualThemeChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn IsLoaded(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement7,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsLoaded)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn EffectiveViewportChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::EffectiveViewportChangedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement7,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .EffectiveViewportChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveEffectiveViewportChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement7,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveEffectiveViewportChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: super::super::super::Foundation::Size,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MeasureOverride)(
                    ::windows_core::Interface::as_raw(this),
                    availablesize,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: super::super::super::Foundation::Size,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ArrangeOverride)(
                    ::windows_core::Interface::as_raw(this),
                    finalsize,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnApplyTemplate)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &::windows_core::HSTRING,
        usetransitions: bool,
    ) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GoToElementStateCore)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(statename),
                    usetransitions,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn InvalidateViewport(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementProtected7,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .InvalidateViewport)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Minimum(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Minimum)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMinimum(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMinimum)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Maximum(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Maximum)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMaximum(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMaximum)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn SmallChange(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SmallChange)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetSmallChange(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetSmallChange)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn LargeChange(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .LargeChange)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetLargeChange(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetLargeChange)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Value(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Value)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetValue2(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetValue)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn ValueChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Primitives::RangeBaseValueChangedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ValueChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveValueChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveValueChanged)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn OnMinimumChanged(
        &self,
        oldminimum: f64,
        newminimum: f64,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            Primitives::IRangeBaseOverrides,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnMinimumChanged)(
                    ::windows_core::Interface::as_raw(this),
                    oldminimum,
                    newminimum,
                )
                .ok()
        }
    }
    pub fn OnMaximumChanged(
        &self,
        oldmaximum: f64,
        newmaximum: f64,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            Primitives::IRangeBaseOverrides,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnMaximumChanged)(
                    ::windows_core::Interface::as_raw(this),
                    oldmaximum,
                    newmaximum,
                )
                .ok()
        }
    }
    pub fn OnValueChanged(
        &self,
        oldvalue: f64,
        newvalue: f64,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            Primitives::IRangeBaseOverrides,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnValueChanged)(
                    ::windows_core::Interface::as_raw(this),
                    oldvalue,
                    newvalue,
                )
                .ok()
        }
    }
    pub fn IntermediateValue(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IntermediateValue)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIntermediateValue(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIntermediateValue)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn StepFrequency(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .StepFrequency)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetStepFrequency(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetStepFrequency)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn SnapsTo(&self) -> ::windows_core::Result<Primitives::SliderSnapsTo> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SnapsTo)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetSnapsTo(
        &self,
        value: Primitives::SliderSnapsTo,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetSnapsTo)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn TickFrequency(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TickFrequency)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetTickFrequency(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTickFrequency)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn TickPlacement(&self) -> ::windows_core::Result<Primitives::TickPlacement> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TickPlacement)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetTickPlacement(
        &self,
        value: Primitives::TickPlacement,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTickPlacement)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Orientation(&self) -> ::windows_core::Result<Orientation> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Orientation)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetOrientation(&self, value: Orientation) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetOrientation)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsDirectionReversed(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsDirectionReversed)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsDirectionReversed(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsDirectionReversed)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsThumbToolTipEnabled(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsThumbToolTipEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsThumbToolTipEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsThumbToolTipEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn Header(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<ISlider2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Header)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetHeader<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<ISlider2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHeader)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn HeaderTemplate(&self) -> ::windows_core::Result<super::DataTemplate> {
        let this = &::windows_core::ComInterface::cast::<ISlider2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HeaderTemplate)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetHeaderTemplate<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DataTemplate>,
    {
        let this = &::windows_core::ComInterface::cast::<ISlider2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHeaderTemplate)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn IntermediateValueProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ISliderStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IntermediateValueProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn StepFrequencyProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ISliderStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .StepFrequencyProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn SnapsToProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ISliderStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SnapsToProperty)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        })
    }
    pub fn TickFrequencyProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ISliderStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TickFrequencyProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn TickPlacementProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ISliderStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TickPlacementProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn OrientationProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ISliderStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .OrientationProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn IsDirectionReversedProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ISliderStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsDirectionReversedProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn IsThumbToolTipEnabledProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ISliderStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsThumbToolTipEnabledProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn ThumbToolTipValueConverterProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ISliderStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ThumbToolTipValueConverterProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn HeaderProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ISliderStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HeaderProperty)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        })
    }
    pub fn HeaderTemplateProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ISliderStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HeaderTemplateProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn DesiredSize(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DesiredSize)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn AllowDrop(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AllowDrop)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAllowDrop)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Opacity(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Opacity)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetOpacity)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Clip(&self) -> ::windows_core::Result<super::Media::RectangleGeometry> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Clip)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetClip<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::Media::RectangleGeometry>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetClip)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn RenderTransform(&self) -> ::windows_core::Result<super::Media::Transform> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RenderTransform)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetRenderTransform<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Transform>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRenderTransform)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn Projection(&self) -> ::windows_core::Result<super::Media::Projection> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Projection)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetProjection<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Projection>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetProjection)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn RenderTransformOrigin(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Point> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RenderTransformOrigin)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: super::super::super::Foundation::Point,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRenderTransformOrigin)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsHitTestVisible)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsHitTestVisible)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Visibility(&self) -> ::windows_core::Result<super::Visibility> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Visibility)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetVisibility)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn RenderSize(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RenderSize)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .UseLayoutRounding)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetUseLayoutRounding)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn CacheMode(&self) -> ::windows_core::Result<super::Media::CacheMode> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CacheMode)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCacheMode<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::CacheMode>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCacheMode)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsTapEnabled)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsTapEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsDoubleTapEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsDoubleTapEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsRightTapEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsRightTapEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsHoldingEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsHoldingEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn RemoveKeyUp(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveKeyUp)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveKeyDown(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveKeyDown)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn GotFocus<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GotFocus)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveGotFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveGotFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn LostFocus<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .LostFocus)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLostFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLostFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DragEnter<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragEnter)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragEnter(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragEnter)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DragLeave<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragLeave)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragLeave(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragLeave)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DragOver<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragOver)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragOver(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragOver)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn Drop<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Drop)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDrop(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDrop)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerPressed(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerPressed)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerMoved(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerMoved)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerReleased(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerReleased)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerEntered(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerEntered)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerExited(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerExited)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerCaptureLost(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerCaptureLost)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemovePointerCanceled(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerCanceled)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerWheelChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerWheelChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveTapped(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveTapped)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveDoubleTapped(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDoubleTapped)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveHolding(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveHolding)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveRightTapped(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveRightTapped)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveManipulationStarting(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationStarting)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationInertiaStarting)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveManipulationStarted(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationStarted)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveManipulationDelta(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationDelta)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveManipulationCompleted(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationCompleted)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn Measure(
        &self,
        availablesize: super::super::super::Foundation::Size,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .Measure)(::windows_core::Interface::as_raw(this), availablesize)
                .ok()
        }
    }
    pub fn Arrange(
        &self,
        finalrect: super::super::super::Foundation::Rect,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .Arrange)(::windows_core::Interface::as_raw(this), finalrect)
                .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .ReleasePointerCaptures)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn AddHandler<P0, P1>(
        &self,
        routedevent: P0,
        handler: P1,
        handledeventstoo: bool,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::RoutedEvent>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .AddHandler)(
                    ::windows_core::Interface::as_raw(this),
                    routedevent.into_param().abi(),
                    handler.into_param().abi(),
                    handledeventstoo,
                )
                .ok()
        }
    }
    pub fn RemoveHandler<P0, P1>(
        &self,
        routedevent: P0,
        handler: P1,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::RoutedEvent>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveHandler)(
                    ::windows_core::Interface::as_raw(this),
                    routedevent.into_param().abi(),
                    handler.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn TransformToVisual<P0>(
        &self,
        visual: P0,
    ) -> ::windows_core::Result<super::Media::GeneralTransform>
    where
        P0: ::windows_core::TryIntoParam<super::UIElement>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TransformToVisual)(
                    ::windows_core::Interface::as_raw(this),
                    visual.try_into_param()?.abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn InvalidateMeasure(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .InvalidateMeasure)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .InvalidateArrange)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn UpdateLayout(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .UpdateLayout)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn XamlRoot(&self) -> ::windows_core::Result<super::XamlRoot> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .XamlRoot)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetXamlRoot<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::XamlRoot>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetXamlRoot)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn UIContext(&self) -> ::windows_core::Result<super::super::UIContext> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .UIContext)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Shadow(&self) -> ::windows_core::Result<super::Media::Shadow> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Shadow)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetShadow<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Shadow>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetShadow)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn CompositeMode(
        &self,
    ) -> ::windows_core::Result<super::Media::ElementCompositeMode> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CompositeMode)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCompositeMode(
        &self,
        value: super::Media::ElementCompositeMode,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCompositeMode)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CancelDirectManipulations)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn CanDrag(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CanDrag)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCanDrag)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn DragStarting<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::DragStartingEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragStarting)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragStarting(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragStarting)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DropCompleted<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::DropCompletedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DropCompleted)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDropCompleted(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDropCompleted)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn ContextFlyout(&self) -> ::windows_core::Result<Primitives::FlyoutBase> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ContextFlyout)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetContextFlyout<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Primitives::FlyoutBase>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetContextFlyout)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ExitDisplayModeOnAccessKeyInvoked)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(
        &self,
        value: bool,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetExitDisplayModeOnAccessKeyInvoked)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsAccessKeyScope)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsAccessKeyScope)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn AccessKeyScopeOwner(
        &self,
    ) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AccessKeyScopeOwner)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAccessKeyScopeOwner)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn AccessKey(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AccessKey)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetAccessKey(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAccessKey)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn RemoveContextRequested(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveContextRequested)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn ContextCanceled<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::RoutedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ContextCanceled)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveContextCanceled(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveContextCanceled)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveAccessKeyDisplayRequested)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveAccessKeyDisplayDismissed)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveAccessKeyInvoked)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn Lights(
        &self,
    ) -> ::windows_core::Result<
        super::super::super::Foundation::Collections::IVector<super::Media::XamlLight>,
    > {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Lights)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyTipHorizontalOffset)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyTipHorizontalOffset)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyTipVerticalOffset)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyTipVerticalOffset)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn HighContrastAdjustment(
        &self,
    ) -> ::windows_core::Result<super::ElementHighContrastAdjustment> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HighContrastAdjustment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetHighContrastAdjustment(
        &self,
        value: super::ElementHighContrastAdjustment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHighContrastAdjustment)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn RemoveGettingFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveGettingFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveLosingFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLosingFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveNoFocusCandidateFound)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn StartBringIntoView(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .StartBringIntoView)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn StartBringIntoViewWithOptions<P0>(
        &self,
        options: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::BringIntoViewOptions>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .StartBringIntoViewWithOptions)(
                    ::windows_core::Interface::as_raw(this),
                    options.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn RemoveCharacterReceived(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveCharacterReceived)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveProcessKeyboardAccelerators)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemovePreviewKeyDown(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePreviewKeyDown)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePreviewKeyUp(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePreviewKeyUp)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyTipTarget)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyTipTarget)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyboardAcceleratorPlacementTarget)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(
        &self,
        value: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyboardAcceleratorPlacementTarget)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn BringIntoViewRequested<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::BringIntoViewRequestedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BringIntoViewRequested)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveBringIntoViewRequested(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveBringIntoViewRequested)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn CanBeScrollAnchor(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CanBeScrollAnchor)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCanBeScrollAnchor)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn OpacityTransition(&self) -> ::windows_core::Result<super::ScalarTransition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .OpacityTransition)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetOpacityTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::ScalarTransition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetOpacityTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn TranslationTransition(
        &self,
    ) -> ::windows_core::Result<super::Vector3Transition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TranslationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetTranslationTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Vector3Transition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTranslationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn Rotation(&self) -> ::windows_core::Result<f32> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Rotation)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRotation)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn RotationTransition(&self) -> ::windows_core::Result<super::ScalarTransition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RotationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetRotationTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::ScalarTransition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRotationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn ScaleTransition(&self) -> ::windows_core::Result<super::Vector3Transition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ScaleTransition)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetScaleTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Vector3Transition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetScaleTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnDisconnectVisualChildren)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: super::super::super::Foundation::Point,
        boundingrect: super::super::super::Foundation::Rect,
    ) -> ::windows_core::Result<
        super::super::super::Foundation::Collections::IIterable<
            super::super::super::Foundation::Collections::IIterable<
                super::super::super::Foundation::Point,
            >,
        >,
    > {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FindSubElementsForTouchTargeting)(
                    ::windows_core::Interface::as_raw(this),
                    point,
                    boundingrect,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> ::windows_core::Result<
        super::super::super::Foundation::Collections::IIterable<super::DependencyObject>,
    > {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides7,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetChildrenInTabFocusOrder)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn OnBringIntoViewRequested<P0>(&self, e: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::BringIntoViewRequestedEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides8,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnBringIntoViewRequested)(
                    ::windows_core::Interface::as_raw(this),
                    e.into_param().abi(),
                )
                .ok()
        }
    }
    #[doc(hidden)]
    pub fn ISliderStatics<R, F: FnOnce(&ISliderStatics) -> ::windows_core::Result<R>>(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<Slider, ISliderStatics> = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn ISliderStatics2<R, F: FnOnce(&ISliderStatics2) -> ::windows_core::Result<R>>(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<Slider, ISliderStatics2> = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn new() -> ::windows_core::Result<Slider> {
        Self::ISliderFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CreateInstance)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::ptr::null_mut(),
                    &mut ::core::option::Option::<::windows::core::IInspectable>::None
                        as *mut _ as _,
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn ISliderFactory<R, F: FnOnce(&ISliderFactory) -> ::windows_core::Result<R>>(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<Slider, ISliderFactory> = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::cmp::PartialEq for Slider {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Slider {}
impl ::core::fmt::Debug for Slider {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Slider").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for Slider {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.Slider;{89572027-4c48-4700-8076-497ba73d9c18})",
    );
}
impl ::core::clone::Clone for Slider {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for Slider {
    type Vtable = ISlider_Vtbl;
}
unsafe impl ::windows_core::ComInterface for Slider {
    const IID: ::windows_core::GUID = <ISlider as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for Slider {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.Slider";
}
::windows_core::imp::interface_hierarchy!(
    Slider, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Primitives::RangeBase> for Slider {}
impl ::windows_core::CanTryInto<Control> for Slider {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for Slider {}
impl ::windows_core::CanTryInto<super::UIElement> for Slider {}
impl ::windows_core::CanTryInto<super::DependencyObject> for Slider {}
unsafe impl ::core::marker::Send for Slider {}
unsafe impl ::core::marker::Sync for Slider {}
#[repr(transparent)]
pub struct SplitButton(::windows_core::IUnknown);
impl SplitButton {}
impl ::core::cmp::PartialEq for SplitButton {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SplitButton {}
impl ::core::fmt::Debug for SplitButton {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SplitButton").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SplitButton {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SplitButton;{58bbb066-c2ea-5499-8150-40faa75f6bb5})",
    );
}
impl ::core::clone::Clone for SplitButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SplitButton {
    type Vtable = ISplitButton_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SplitButton {
    const IID: ::windows_core::GUID = <ISplitButton as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SplitButton {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SplitButton";
}
::windows_core::imp::interface_hierarchy!(
    SplitButton, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ContentControl> for SplitButton {}
impl ::windows_core::CanTryInto<Control> for SplitButton {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for SplitButton {}
impl ::windows_core::CanTryInto<super::UIElement> for SplitButton {}
impl ::windows_core::CanTryInto<super::DependencyObject> for SplitButton {}
unsafe impl ::core::marker::Send for SplitButton {}
unsafe impl ::core::marker::Sync for SplitButton {}
#[repr(transparent)]
pub struct SplitButtonAutomationPeer(::windows_core::IUnknown);
impl SplitButtonAutomationPeer {}
impl ::core::cmp::PartialEq for SplitButtonAutomationPeer {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SplitButtonAutomationPeer {}
impl ::core::fmt::Debug for SplitButtonAutomationPeer {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SplitButtonAutomationPeer").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SplitButtonAutomationPeer {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SplitButtonAutomationPeer;{c46a58b8-3828-5c36-aa13-f79f02c12f34})",
    );
}
impl ::core::clone::Clone for SplitButtonAutomationPeer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SplitButtonAutomationPeer {
    type Vtable = ISplitButtonAutomationPeer_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SplitButtonAutomationPeer {
    const IID: ::windows_core::GUID = <ISplitButtonAutomationPeer as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SplitButtonAutomationPeer {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SplitButtonAutomationPeer";
}
::windows_core::imp::interface_hierarchy!(
    SplitButtonAutomationPeer, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::DependencyObject> for SplitButtonAutomationPeer {}
unsafe impl ::core::marker::Send for SplitButtonAutomationPeer {}
unsafe impl ::core::marker::Sync for SplitButtonAutomationPeer {}
#[repr(transparent)]
pub struct SplitButtonClickEventArgs(::windows_core::IUnknown);
impl SplitButtonClickEventArgs {}
impl ::core::cmp::PartialEq for SplitButtonClickEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SplitButtonClickEventArgs {}
impl ::core::fmt::Debug for SplitButtonClickEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SplitButtonClickEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SplitButtonClickEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SplitButtonClickEventArgs;{c227c2ca-26f4-5960-98d5-919149d1b525})",
    );
}
impl ::core::clone::Clone for SplitButtonClickEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SplitButtonClickEventArgs {
    type Vtable = ISplitButtonClickEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SplitButtonClickEventArgs {
    const IID: ::windows_core::GUID = <ISplitButtonClickEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SplitButtonClickEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SplitButtonClickEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    SplitButtonClickEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for SplitButtonClickEventArgs {}
unsafe impl ::core::marker::Sync for SplitButtonClickEventArgs {}
#[repr(transparent)]
pub struct SplitView(::windows_core::IUnknown);
impl SplitView {}
impl ::core::cmp::PartialEq for SplitView {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SplitView {}
impl ::core::fmt::Debug for SplitView {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SplitView").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SplitView {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SplitView;{97222f31-3844-429e-939c-1673155322a1})",
    );
}
impl ::core::clone::Clone for SplitView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SplitView {
    type Vtable = ISplitView_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SplitView {
    const IID: ::windows_core::GUID = <ISplitView as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SplitView {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SplitView";
}
::windows_core::imp::interface_hierarchy!(
    SplitView, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for SplitView {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for SplitView {}
impl ::windows_core::CanTryInto<super::UIElement> for SplitView {}
impl ::windows_core::CanTryInto<super::DependencyObject> for SplitView {}
unsafe impl ::core::marker::Send for SplitView {}
unsafe impl ::core::marker::Sync for SplitView {}
#[repr(transparent)]
pub struct SplitViewPaneClosingEventArgs(::windows_core::IUnknown);
impl SplitViewPaneClosingEventArgs {}
impl ::core::cmp::PartialEq for SplitViewPaneClosingEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SplitViewPaneClosingEventArgs {}
impl ::core::fmt::Debug for SplitViewPaneClosingEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SplitViewPaneClosingEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SplitViewPaneClosingEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SplitViewPaneClosingEventArgs;{93cf494e-7a95-44d8-9562-1b348248da9f})",
    );
}
impl ::core::clone::Clone for SplitViewPaneClosingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SplitViewPaneClosingEventArgs {
    type Vtable = ISplitViewPaneClosingEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SplitViewPaneClosingEventArgs {
    const IID: ::windows_core::GUID = <ISplitViewPaneClosingEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SplitViewPaneClosingEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SplitViewPaneClosingEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    SplitViewPaneClosingEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for SplitViewPaneClosingEventArgs {}
unsafe impl ::core::marker::Sync for SplitViewPaneClosingEventArgs {}
#[repr(transparent)]
pub struct StackPanel(::windows_core::IUnknown);
impl StackPanel {
    pub fn GetValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .ClearValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn ReadLocalValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ReadLocalValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetAnimationBaseValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
        P1: ::windows_core::IntoParam<super::DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RegisterPropertyChangedCallback)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    callback.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject2,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .UnregisterPropertyChangedCallback)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    token,
                )
                .ok()
        }
    }
    pub fn Triggers(&self) -> ::windows_core::Result<super::TriggerCollection> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Triggers)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Resources(&self) -> ::windows_core::Result<super::ResourceDictionary> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Resources)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::ResourceDictionary>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetResources)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn Tag(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Tag)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTag)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn Language(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Language)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetLanguage(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetLanguage)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn ActualWidth(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualWidth)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn ActualHeight(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualHeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Width(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Width)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetWidth)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Height(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Height)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MinWidth(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MinWidth)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMinWidth)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MaxWidth(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MaxWidth)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMaxWidth)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MinHeight(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MinHeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMinHeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MaxHeight(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MaxHeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMaxHeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn HorizontalAlignment(
        &self,
    ) -> ::windows_core::Result<super::HorizontalAlignment> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HorizontalAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHorizontalAlignment)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> ::windows_core::Result<super::VerticalAlignment> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .VerticalAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetVerticalAlignment)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Margin(&self) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Margin)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMargin(&self, value: super::Thickness) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMargin)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Name(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Name)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetName(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetName)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn BaseUri(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Uri> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BaseUri)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn DataContext(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DataContext)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetDataContext)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn Style(&self) -> ::windows_core::Result<super::Style> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Style)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetStyle<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::Style>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetStyle)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn Parent(&self) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Parent)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn FlowDirection(&self) -> ::windows_core::Result<super::FlowDirection> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FlowDirection)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFlowDirection(
        &self,
        value: super::FlowDirection,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFlowDirection)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Loaded<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Loaded)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLoaded(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLoaded)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn Unloaded<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Unloaded)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveUnloaded(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveUnloaded)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn SizeChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::SizeChangedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SizeChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveSizeChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveSizeChanged)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn LayoutUpdated<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::EventHandler<::windows_core::IInspectable>,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .LayoutUpdated)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLayoutUpdated(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLayoutUpdated)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FindName)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(name),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RequestedTheme(&self) -> ::windows_core::Result<super::ElementTheme> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RequestedTheme)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetRequestedTheme(
        &self,
        value: super::ElementTheme,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRequestedTheme)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn DataContextChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::DataContextChangedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DataContextChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDataContextChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDataContextChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn Loading<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows_core::IInspectable,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement3,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Loading)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLoading(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement3,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLoading)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AllowFocusOnInteraction)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAllowFocusOnInteraction)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn FocusVisualMargin(&self) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualMargin)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualMargin(
        &self,
        value: super::Thickness,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualMargin)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn FocusVisualSecondaryThickness(
        &self,
    ) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualSecondaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualSecondaryThickness(
        &self,
        value: super::Thickness,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualSecondaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn FocusVisualPrimaryThickness(
        &self,
    ) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualPrimaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualPrimaryThickness(
        &self,
        value: super::Thickness,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualPrimaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn FocusVisualSecondaryBrush(
        &self,
    ) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualSecondaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualSecondaryBrush<P0>(
        &self,
        value: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualSecondaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn FocusVisualPrimaryBrush(
        &self,
    ) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualPrimaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualPrimaryBrush<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualPrimaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AllowFocusWhenDisabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAllowFocusWhenDisabled)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn ActualTheme(&self) -> ::windows_core::Result<super::ElementTheme> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement6,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualTheme)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn ActualThemeChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows_core::IInspectable,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement6,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualThemeChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveActualThemeChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement6,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveActualThemeChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn IsLoaded(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement7,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsLoaded)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn EffectiveViewportChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::EffectiveViewportChangedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement7,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .EffectiveViewportChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveEffectiveViewportChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement7,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveEffectiveViewportChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: super::super::super::Foundation::Size,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MeasureOverride)(
                    ::windows_core::Interface::as_raw(this),
                    availablesize,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: super::super::super::Foundation::Size,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ArrangeOverride)(
                    ::windows_core::Interface::as_raw(this),
                    finalsize,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnApplyTemplate)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &::windows_core::HSTRING,
        usetransitions: bool,
    ) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GoToElementStateCore)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(statename),
                    usetransitions,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn InvalidateViewport(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementProtected7,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .InvalidateViewport)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetInsertionIndexes(
        &self,
        position: super::super::super::Foundation::Point,
        first: &mut i32,
        second: &mut i32,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IInsertionPanel>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .GetInsertionIndexes)(
                    ::windows_core::Interface::as_raw(this),
                    position,
                    first,
                    second,
                )
                .ok()
        }
    }
    pub fn Children(&self) -> ::windows_core::Result<UIElementCollection> {
        let this = &::windows_core::ComInterface::cast::<IPanel>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Children)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Background(&self) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<IPanel>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Background)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetBackground<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<IPanel>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetBackground)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn IsItemsHost(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IPanel>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsItemsHost)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn BackgroundTransition(
        &self,
    ) -> ::windows_core::Result<super::BrushTransition> {
        let this = &::windows_core::ComInterface::cast::<IPanel2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BackgroundTransition)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetBackgroundTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::BrushTransition>,
    {
        let this = &::windows_core::ComInterface::cast::<IPanel2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetBackgroundTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn AreHorizontalSnapPointsRegular(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            Primitives::IScrollSnapPointsInfo,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AreHorizontalSnapPointsRegular)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn AreVerticalSnapPointsRegular(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            Primitives::IScrollSnapPointsInfo,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AreVerticalSnapPointsRegular)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn HorizontalSnapPointsChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::EventHandler<::windows_core::IInspectable>,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            Primitives::IScrollSnapPointsInfo,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HorizontalSnapPointsChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveHorizontalSnapPointsChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            Primitives::IScrollSnapPointsInfo,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveHorizontalSnapPointsChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn VerticalSnapPointsChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::EventHandler<::windows_core::IInspectable>,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            Primitives::IScrollSnapPointsInfo,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .VerticalSnapPointsChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveVerticalSnapPointsChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            Primitives::IScrollSnapPointsInfo,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveVerticalSnapPointsChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn GetIrregularSnapPoints(
        &self,
        orientation: Orientation,
        alignment: Primitives::SnapPointsAlignment,
    ) -> ::windows_core::Result<
        super::super::super::Foundation::Collections::IVectorView<f32>,
    > {
        let this = &::windows_core::ComInterface::cast::<
            Primitives::IScrollSnapPointsInfo,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetIrregularSnapPoints)(
                    ::windows_core::Interface::as_raw(this),
                    orientation,
                    alignment,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn GetRegularSnapPoints(
        &self,
        orientation: Orientation,
        alignment: Primitives::SnapPointsAlignment,
        offset: &mut f32,
    ) -> ::windows_core::Result<f32> {
        let this = &::windows_core::ComInterface::cast::<
            Primitives::IScrollSnapPointsInfo,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetRegularSnapPoints)(
                    ::windows_core::Interface::as_raw(this),
                    orientation,
                    alignment,
                    offset,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn AreScrollSnapPointsRegular(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AreScrollSnapPointsRegular)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetAreScrollSnapPointsRegular(
        &self,
        value: bool,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAreScrollSnapPointsRegular)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn Orientation(&self) -> ::windows_core::Result<Orientation> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Orientation)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetOrientation(&self, value: Orientation) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetOrientation)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn BorderBrush(&self) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<IStackPanel2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BorderBrush)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetBorderBrush<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<IStackPanel2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetBorderBrush)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn BorderThickness(&self) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<IStackPanel2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BorderThickness)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetBorderThickness(
        &self,
        value: super::Thickness,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IStackPanel2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetBorderThickness)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn CornerRadius(&self) -> ::windows_core::Result<super::CornerRadius> {
        let this = &::windows_core::ComInterface::cast::<IStackPanel2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CornerRadius)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCornerRadius(
        &self,
        value: super::CornerRadius,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IStackPanel2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCornerRadius)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Padding(&self) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<IStackPanel2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Padding)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetPadding(&self, value: super::Thickness) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IStackPanel2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetPadding)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Spacing(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<IStackPanel4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Spacing)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetSpacing(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IStackPanel4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetSpacing)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn BackgroundSizing(&self) -> ::windows_core::Result<BackgroundSizing> {
        let this = &::windows_core::ComInterface::cast::<IStackPanel5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BackgroundSizing)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetBackgroundSizing(
        &self,
        value: BackgroundSizing,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IStackPanel5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetBackgroundSizing)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn AreScrollSnapPointsRegularProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::IStackPanelStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AreScrollSnapPointsRegularProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn OrientationProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::IStackPanelStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .OrientationProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn BorderBrushProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::IStackPanelStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BorderBrushProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn BorderThicknessProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::IStackPanelStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BorderThicknessProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn CornerRadiusProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::IStackPanelStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CornerRadiusProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn PaddingProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::IStackPanelStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .PaddingProperty)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        })
    }
    pub fn SpacingProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::IStackPanelStatics4(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SpacingProperty)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        })
    }
    pub fn BackgroundSizingProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::IStackPanelStatics5(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BackgroundSizingProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn DesiredSize(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DesiredSize)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn AllowDrop(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AllowDrop)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAllowDrop)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Opacity(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Opacity)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetOpacity)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Clip(&self) -> ::windows_core::Result<super::Media::RectangleGeometry> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Clip)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetClip<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::Media::RectangleGeometry>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetClip)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn RenderTransform(&self) -> ::windows_core::Result<super::Media::Transform> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RenderTransform)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetRenderTransform<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Transform>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRenderTransform)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn Projection(&self) -> ::windows_core::Result<super::Media::Projection> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Projection)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetProjection<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Projection>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetProjection)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn RenderTransformOrigin(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Point> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RenderTransformOrigin)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: super::super::super::Foundation::Point,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRenderTransformOrigin)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsHitTestVisible)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsHitTestVisible)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Visibility(&self) -> ::windows_core::Result<super::Visibility> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Visibility)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetVisibility)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn RenderSize(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RenderSize)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .UseLayoutRounding)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetUseLayoutRounding)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn CacheMode(&self) -> ::windows_core::Result<super::Media::CacheMode> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CacheMode)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCacheMode<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::CacheMode>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCacheMode)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsTapEnabled)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsTapEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsDoubleTapEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsDoubleTapEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsRightTapEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsRightTapEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsHoldingEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsHoldingEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn RemoveKeyUp(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveKeyUp)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveKeyDown(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveKeyDown)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn GotFocus<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GotFocus)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveGotFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveGotFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn LostFocus<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .LostFocus)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLostFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLostFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DragEnter<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragEnter)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragEnter(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragEnter)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DragLeave<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragLeave)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragLeave(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragLeave)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DragOver<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragOver)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragOver(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragOver)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn Drop<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Drop)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDrop(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDrop)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerPressed(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerPressed)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerMoved(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerMoved)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerReleased(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerReleased)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerEntered(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerEntered)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerExited(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerExited)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerCaptureLost(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerCaptureLost)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemovePointerCanceled(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerCanceled)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerWheelChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerWheelChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveTapped(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveTapped)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveDoubleTapped(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDoubleTapped)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveHolding(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveHolding)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveRightTapped(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveRightTapped)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveManipulationStarting(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationStarting)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationInertiaStarting)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveManipulationStarted(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationStarted)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveManipulationDelta(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationDelta)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveManipulationCompleted(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationCompleted)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn Measure(
        &self,
        availablesize: super::super::super::Foundation::Size,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .Measure)(::windows_core::Interface::as_raw(this), availablesize)
                .ok()
        }
    }
    pub fn Arrange(
        &self,
        finalrect: super::super::super::Foundation::Rect,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .Arrange)(::windows_core::Interface::as_raw(this), finalrect)
                .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .ReleasePointerCaptures)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn AddHandler<P0, P1>(
        &self,
        routedevent: P0,
        handler: P1,
        handledeventstoo: bool,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::RoutedEvent>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .AddHandler)(
                    ::windows_core::Interface::as_raw(this),
                    routedevent.into_param().abi(),
                    handler.into_param().abi(),
                    handledeventstoo,
                )
                .ok()
        }
    }
    pub fn RemoveHandler<P0, P1>(
        &self,
        routedevent: P0,
        handler: P1,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::RoutedEvent>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveHandler)(
                    ::windows_core::Interface::as_raw(this),
                    routedevent.into_param().abi(),
                    handler.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn TransformToVisual<P0>(
        &self,
        visual: P0,
    ) -> ::windows_core::Result<super::Media::GeneralTransform>
    where
        P0: ::windows_core::TryIntoParam<super::UIElement>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TransformToVisual)(
                    ::windows_core::Interface::as_raw(this),
                    visual.try_into_param()?.abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn InvalidateMeasure(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .InvalidateMeasure)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .InvalidateArrange)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn UpdateLayout(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .UpdateLayout)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn XamlRoot(&self) -> ::windows_core::Result<super::XamlRoot> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .XamlRoot)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetXamlRoot<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::XamlRoot>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetXamlRoot)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn UIContext(&self) -> ::windows_core::Result<super::super::UIContext> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .UIContext)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Shadow(&self) -> ::windows_core::Result<super::Media::Shadow> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Shadow)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetShadow<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Shadow>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetShadow)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn CompositeMode(
        &self,
    ) -> ::windows_core::Result<super::Media::ElementCompositeMode> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CompositeMode)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCompositeMode(
        &self,
        value: super::Media::ElementCompositeMode,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCompositeMode)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CancelDirectManipulations)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn CanDrag(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CanDrag)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCanDrag)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn DragStarting<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::DragStartingEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragStarting)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragStarting(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragStarting)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DropCompleted<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::DropCompletedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DropCompleted)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDropCompleted(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDropCompleted)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn ContextFlyout(&self) -> ::windows_core::Result<Primitives::FlyoutBase> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ContextFlyout)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetContextFlyout<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Primitives::FlyoutBase>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetContextFlyout)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ExitDisplayModeOnAccessKeyInvoked)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(
        &self,
        value: bool,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetExitDisplayModeOnAccessKeyInvoked)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsAccessKeyScope)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsAccessKeyScope)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn AccessKeyScopeOwner(
        &self,
    ) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AccessKeyScopeOwner)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAccessKeyScopeOwner)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn AccessKey(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AccessKey)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetAccessKey(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAccessKey)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn RemoveContextRequested(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveContextRequested)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn ContextCanceled<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::RoutedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ContextCanceled)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveContextCanceled(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveContextCanceled)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveAccessKeyDisplayRequested)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveAccessKeyDisplayDismissed)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveAccessKeyInvoked)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn Lights(
        &self,
    ) -> ::windows_core::Result<
        super::super::super::Foundation::Collections::IVector<super::Media::XamlLight>,
    > {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Lights)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyTipHorizontalOffset)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyTipHorizontalOffset)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyTipVerticalOffset)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyTipVerticalOffset)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn HighContrastAdjustment(
        &self,
    ) -> ::windows_core::Result<super::ElementHighContrastAdjustment> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HighContrastAdjustment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetHighContrastAdjustment(
        &self,
        value: super::ElementHighContrastAdjustment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHighContrastAdjustment)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn RemoveGettingFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveGettingFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveLosingFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLosingFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveNoFocusCandidateFound)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn StartBringIntoView(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .StartBringIntoView)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn StartBringIntoViewWithOptions<P0>(
        &self,
        options: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::BringIntoViewOptions>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .StartBringIntoViewWithOptions)(
                    ::windows_core::Interface::as_raw(this),
                    options.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn RemoveCharacterReceived(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveCharacterReceived)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveProcessKeyboardAccelerators)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemovePreviewKeyDown(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePreviewKeyDown)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePreviewKeyUp(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePreviewKeyUp)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyTipTarget)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyTipTarget)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyboardAcceleratorPlacementTarget)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(
        &self,
        value: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyboardAcceleratorPlacementTarget)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn BringIntoViewRequested<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::BringIntoViewRequestedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BringIntoViewRequested)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveBringIntoViewRequested(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveBringIntoViewRequested)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn CanBeScrollAnchor(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CanBeScrollAnchor)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCanBeScrollAnchor)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn OpacityTransition(&self) -> ::windows_core::Result<super::ScalarTransition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .OpacityTransition)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetOpacityTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::ScalarTransition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetOpacityTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn TranslationTransition(
        &self,
    ) -> ::windows_core::Result<super::Vector3Transition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TranslationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetTranslationTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Vector3Transition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTranslationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn Rotation(&self) -> ::windows_core::Result<f32> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Rotation)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRotation)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn RotationTransition(&self) -> ::windows_core::Result<super::ScalarTransition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RotationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetRotationTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::ScalarTransition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRotationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn ScaleTransition(&self) -> ::windows_core::Result<super::Vector3Transition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ScaleTransition)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetScaleTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Vector3Transition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetScaleTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnDisconnectVisualChildren)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: super::super::super::Foundation::Point,
        boundingrect: super::super::super::Foundation::Rect,
    ) -> ::windows_core::Result<
        super::super::super::Foundation::Collections::IIterable<
            super::super::super::Foundation::Collections::IIterable<
                super::super::super::Foundation::Point,
            >,
        >,
    > {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FindSubElementsForTouchTargeting)(
                    ::windows_core::Interface::as_raw(this),
                    point,
                    boundingrect,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> ::windows_core::Result<
        super::super::super::Foundation::Collections::IIterable<super::DependencyObject>,
    > {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides7,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetChildrenInTabFocusOrder)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn OnBringIntoViewRequested<P0>(&self, e: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::BringIntoViewRequestedEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides8,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnBringIntoViewRequested)(
                    ::windows_core::Interface::as_raw(this),
                    e.into_param().abi(),
                )
                .ok()
        }
    }
    #[doc(hidden)]
    pub fn IStackPanelStatics<
        R,
        F: FnOnce(&IStackPanelStatics) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            StackPanel,
            IStackPanelStatics,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn IStackPanelStatics2<
        R,
        F: FnOnce(&IStackPanelStatics2) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            StackPanel,
            IStackPanelStatics2,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn IStackPanelStatics4<
        R,
        F: FnOnce(&IStackPanelStatics4) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            StackPanel,
            IStackPanelStatics4,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn IStackPanelStatics5<
        R,
        F: FnOnce(&IStackPanelStatics5) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            StackPanel,
            IStackPanelStatics5,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn new() -> ::windows_core::Result<StackPanel> {
        Self::IStackPanelFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CreateInstance)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::ptr::null_mut(),
                    &mut ::core::option::Option::<::windows::core::IInspectable>::None
                        as *mut _ as _,
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IStackPanelFactory<
        R,
        F: FnOnce(&IStackPanelFactory) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            StackPanel,
            IStackPanelFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::cmp::PartialEq for StackPanel {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for StackPanel {}
impl ::core::fmt::Debug for StackPanel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("StackPanel").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for StackPanel {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.StackPanel;{b8ae8fe2-d641-4fd7-80b4-7439207d2798})",
    );
}
impl ::core::clone::Clone for StackPanel {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for StackPanel {
    type Vtable = IStackPanel_Vtbl;
}
unsafe impl ::windows_core::ComInterface for StackPanel {
    const IID: ::windows_core::GUID = <IStackPanel as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for StackPanel {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.StackPanel";
}
::windows_core::imp::interface_hierarchy!(
    StackPanel, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IInsertionPanel> for StackPanel {}
impl ::windows_core::CanTryInto<Primitives::IScrollSnapPointsInfo> for StackPanel {}
impl ::windows_core::CanTryInto<Panel> for StackPanel {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for StackPanel {}
impl ::windows_core::CanTryInto<super::UIElement> for StackPanel {}
impl ::windows_core::CanTryInto<super::DependencyObject> for StackPanel {}
unsafe impl ::core::marker::Send for StackPanel {}
unsafe impl ::core::marker::Sync for StackPanel {}
#[repr(transparent)]
pub struct StyleSelector(::windows_core::IUnknown);
impl StyleSelector {}
impl ::core::cmp::PartialEq for StyleSelector {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for StyleSelector {}
impl ::core::fmt::Debug for StyleSelector {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("StyleSelector").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for StyleSelector {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.StyleSelector;{d1113f67-d8c1-4ae4-98f0-d8504502f08b})",
    );
}
impl ::core::clone::Clone for StyleSelector {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for StyleSelector {
    type Vtable = IStyleSelector_Vtbl;
}
unsafe impl ::windows_core::ComInterface for StyleSelector {
    const IID: ::windows_core::GUID = <IStyleSelector as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for StyleSelector {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.StyleSelector";
}
::windows_core::imp::interface_hierarchy!(
    StyleSelector, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for StyleSelector {}
unsafe impl ::core::marker::Sync for StyleSelector {}
#[repr(transparent)]
pub struct SwapChainBackgroundPanel(::windows_core::IUnknown);
impl SwapChainBackgroundPanel {}
impl ::core::cmp::PartialEq for SwapChainBackgroundPanel {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SwapChainBackgroundPanel {}
impl ::core::fmt::Debug for SwapChainBackgroundPanel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SwapChainBackgroundPanel").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SwapChainBackgroundPanel {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SwapChainBackgroundPanel;{1c59db48-8233-4c0c-bcf5-02a5fb35ae00})",
    );
}
impl ::core::clone::Clone for SwapChainBackgroundPanel {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SwapChainBackgroundPanel {
    type Vtable = ISwapChainBackgroundPanel_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SwapChainBackgroundPanel {
    const IID: ::windows_core::GUID = <ISwapChainBackgroundPanel as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SwapChainBackgroundPanel {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SwapChainBackgroundPanel";
}
::windows_core::imp::interface_hierarchy!(
    SwapChainBackgroundPanel, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Grid> for SwapChainBackgroundPanel {}
impl ::windows_core::CanTryInto<Panel> for SwapChainBackgroundPanel {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for SwapChainBackgroundPanel {}
impl ::windows_core::CanTryInto<super::UIElement> for SwapChainBackgroundPanel {}
impl ::windows_core::CanTryInto<super::DependencyObject> for SwapChainBackgroundPanel {}
unsafe impl ::core::marker::Send for SwapChainBackgroundPanel {}
unsafe impl ::core::marker::Sync for SwapChainBackgroundPanel {}
#[repr(transparent)]
pub struct SwapChainPanel(::windows_core::IUnknown);
impl SwapChainPanel {}
impl ::core::cmp::PartialEq for SwapChainPanel {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SwapChainPanel {}
impl ::core::fmt::Debug for SwapChainPanel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SwapChainPanel").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SwapChainPanel {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SwapChainPanel;{c589644f-eba8-427a-b75a-9f1f93a11ae9})",
    );
}
impl ::core::clone::Clone for SwapChainPanel {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SwapChainPanel {
    type Vtable = ISwapChainPanel_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SwapChainPanel {
    const IID: ::windows_core::GUID = <ISwapChainPanel as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SwapChainPanel {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SwapChainPanel";
}
::windows_core::imp::interface_hierarchy!(
    SwapChainPanel, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Grid> for SwapChainPanel {}
impl ::windows_core::CanTryInto<Panel> for SwapChainPanel {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for SwapChainPanel {}
impl ::windows_core::CanTryInto<super::UIElement> for SwapChainPanel {}
impl ::windows_core::CanTryInto<super::DependencyObject> for SwapChainPanel {}
unsafe impl ::core::marker::Send for SwapChainPanel {}
unsafe impl ::core::marker::Sync for SwapChainPanel {}
#[repr(transparent)]
pub struct SwipeControl(::windows_core::IUnknown);
impl SwipeControl {}
impl ::core::cmp::PartialEq for SwipeControl {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SwipeControl {}
impl ::core::fmt::Debug for SwipeControl {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SwipeControl").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SwipeControl {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SwipeControl;{9ee3d96f-6704-4823-aa15-1c143bc53cf7})",
    );
}
impl ::core::clone::Clone for SwipeControl {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SwipeControl {
    type Vtable = ISwipeControl_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SwipeControl {
    const IID: ::windows_core::GUID = <ISwipeControl as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SwipeControl {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SwipeControl";
}
::windows_core::imp::interface_hierarchy!(
    SwipeControl, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ContentControl> for SwipeControl {}
impl ::windows_core::CanTryInto<Control> for SwipeControl {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for SwipeControl {}
impl ::windows_core::CanTryInto<super::UIElement> for SwipeControl {}
impl ::windows_core::CanTryInto<super::DependencyObject> for SwipeControl {}
unsafe impl ::core::marker::Send for SwipeControl {}
unsafe impl ::core::marker::Sync for SwipeControl {}
#[repr(transparent)]
pub struct SwipeItem(::windows_core::IUnknown);
impl SwipeItem {}
impl ::core::cmp::PartialEq for SwipeItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SwipeItem {}
impl ::core::fmt::Debug for SwipeItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SwipeItem").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SwipeItem {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SwipeItem;{836edadc-45c8-4a00-90a0-7107fa894a1b})",
    );
}
impl ::core::clone::Clone for SwipeItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SwipeItem {
    type Vtable = ISwipeItem_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SwipeItem {
    const IID: ::windows_core::GUID = <ISwipeItem as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SwipeItem {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SwipeItem";
}
::windows_core::imp::interface_hierarchy!(
    SwipeItem, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::DependencyObject> for SwipeItem {}
unsafe impl ::core::marker::Send for SwipeItem {}
unsafe impl ::core::marker::Sync for SwipeItem {}
#[repr(transparent)]
pub struct SwipeItemInvokedEventArgs(::windows_core::IUnknown);
impl SwipeItemInvokedEventArgs {}
impl ::core::cmp::PartialEq for SwipeItemInvokedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SwipeItemInvokedEventArgs {}
impl ::core::fmt::Debug for SwipeItemInvokedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SwipeItemInvokedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SwipeItemInvokedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SwipeItemInvokedEventArgs;{c5b025f5-cb32-4733-8011-5d0d37f4550a})",
    );
}
impl ::core::clone::Clone for SwipeItemInvokedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SwipeItemInvokedEventArgs {
    type Vtable = ISwipeItemInvokedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SwipeItemInvokedEventArgs {
    const IID: ::windows_core::GUID = <ISwipeItemInvokedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SwipeItemInvokedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SwipeItemInvokedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    SwipeItemInvokedEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for SwipeItemInvokedEventArgs {}
unsafe impl ::core::marker::Sync for SwipeItemInvokedEventArgs {}
#[repr(transparent)]
pub struct SwipeItems(::windows_core::IUnknown);
impl SwipeItems {}
impl ::core::cmp::PartialEq for SwipeItems {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SwipeItems {}
impl ::core::fmt::Debug for SwipeItems {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SwipeItems").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SwipeItems {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SwipeItems;{b01726ff-969a-40d0-9f04-76084ce6d7b7})",
    );
}
impl ::core::clone::Clone for SwipeItems {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SwipeItems {
    type Vtable = ISwipeItems_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SwipeItems {
    const IID: ::windows_core::GUID = <ISwipeItems as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SwipeItems {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SwipeItems";
}
impl ::core::iter::IntoIterator for SwipeItems {
    type Item = SwipeItem;
    type IntoIter = super::super::super::Foundation::Collections::VectorIterator<
        Self::Item,
    >;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
impl ::core::iter::IntoIterator for &SwipeItems {
    type Item = SwipeItem;
    type IntoIter = super::super::super::Foundation::Collections::VectorIterator<
        Self::Item,
    >;
    fn into_iter(self) -> Self::IntoIter {
        super::super::super::Foundation::Collections::VectorIterator::new(
            ::windows_core::ComInterface::cast(self).ok(),
        )
    }
}
::windows_core::imp::interface_hierarchy!(
    SwipeItems, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<
    super::super::super::Foundation::Collections::IIterable<SwipeItem>,
> for SwipeItems {}
impl ::windows_core::CanTryInto<
    super::super::super::Foundation::Collections::IVector<SwipeItem>,
> for SwipeItems {}
impl ::windows_core::CanTryInto<super::DependencyObject> for SwipeItems {}
unsafe impl ::core::marker::Send for SwipeItems {}
unsafe impl ::core::marker::Sync for SwipeItems {}
#[repr(transparent)]
pub struct SymbolIcon(::windows_core::IUnknown);
impl SymbolIcon {}
impl ::core::cmp::PartialEq for SymbolIcon {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SymbolIcon {}
impl ::core::fmt::Debug for SymbolIcon {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SymbolIcon").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SymbolIcon {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SymbolIcon;{7a4774c9-a6a3-4b30-8ff1-9081d70e9a5c})",
    );
}
impl ::core::clone::Clone for SymbolIcon {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SymbolIcon {
    type Vtable = ISymbolIcon_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SymbolIcon {
    const IID: ::windows_core::GUID = <ISymbolIcon as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SymbolIcon {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SymbolIcon";
}
::windows_core::imp::interface_hierarchy!(
    SymbolIcon, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IconElement> for SymbolIcon {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for SymbolIcon {}
impl ::windows_core::CanTryInto<super::UIElement> for SymbolIcon {}
impl ::windows_core::CanTryInto<super::DependencyObject> for SymbolIcon {}
unsafe impl ::core::marker::Send for SymbolIcon {}
unsafe impl ::core::marker::Sync for SymbolIcon {}
#[repr(transparent)]
pub struct SymbolIconSource(::windows_core::IUnknown);
impl SymbolIconSource {}
impl ::core::cmp::PartialEq for SymbolIconSource {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SymbolIconSource {}
impl ::core::fmt::Debug for SymbolIconSource {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SymbolIconSource").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SymbolIconSource {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.SymbolIconSource;{625d95a2-b6b1-408a-b289-eab2ecba62d8})",
    );
}
impl ::core::clone::Clone for SymbolIconSource {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for SymbolIconSource {
    type Vtable = ISymbolIconSource_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SymbolIconSource {
    const IID: ::windows_core::GUID = <ISymbolIconSource as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SymbolIconSource {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.SymbolIconSource";
}
::windows_core::imp::interface_hierarchy!(
    SymbolIconSource, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IconSource> for SymbolIconSource {}
impl ::windows_core::CanTryInto<super::DependencyObject> for SymbolIconSource {}
unsafe impl ::core::marker::Send for SymbolIconSource {}
unsafe impl ::core::marker::Sync for SymbolIconSource {}
#[repr(transparent)]
pub struct TextBlock(::windows_core::IUnknown);
impl TextBlock {
    pub fn new() -> ::windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows_core::imp::IGenericFactory) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            TextBlock,
            ::windows_core::imp::IGenericFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .ClearValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn ReadLocalValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ReadLocalValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetAnimationBaseValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
        P1: ::windows_core::IntoParam<super::DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RegisterPropertyChangedCallback)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    callback.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject2,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .UnregisterPropertyChangedCallback)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    token,
                )
                .ok()
        }
    }
    pub fn Triggers(&self) -> ::windows_core::Result<super::TriggerCollection> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Triggers)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Resources(&self) -> ::windows_core::Result<super::ResourceDictionary> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Resources)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::ResourceDictionary>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetResources)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn Tag(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Tag)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTag)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn Language(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Language)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetLanguage(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetLanguage)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn ActualWidth(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualWidth)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn ActualHeight(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualHeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Width(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Width)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetWidth)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Height(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Height)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MinWidth(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MinWidth)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMinWidth)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MaxWidth(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MaxWidth)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMaxWidth)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MinHeight(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MinHeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMinHeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MaxHeight(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MaxHeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMaxHeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn HorizontalAlignment(
        &self,
    ) -> ::windows_core::Result<super::HorizontalAlignment> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HorizontalAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHorizontalAlignment)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> ::windows_core::Result<super::VerticalAlignment> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .VerticalAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetVerticalAlignment)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Margin(&self) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Margin)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMargin(&self, value: super::Thickness) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMargin)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Name(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Name)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetName(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetName)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn BaseUri(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Uri> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BaseUri)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn DataContext(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DataContext)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetDataContext)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn Style(&self) -> ::windows_core::Result<super::Style> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Style)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetStyle<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::Style>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetStyle)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn Parent(&self) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Parent)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn FlowDirection(&self) -> ::windows_core::Result<super::FlowDirection> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FlowDirection)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFlowDirection(
        &self,
        value: super::FlowDirection,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFlowDirection)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Loaded<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Loaded)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLoaded(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLoaded)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn Unloaded<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Unloaded)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveUnloaded(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveUnloaded)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn SizeChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::SizeChangedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SizeChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveSizeChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveSizeChanged)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn LayoutUpdated<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::EventHandler<::windows_core::IInspectable>,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .LayoutUpdated)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLayoutUpdated(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLayoutUpdated)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FindName)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(name),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RequestedTheme(&self) -> ::windows_core::Result<super::ElementTheme> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RequestedTheme)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetRequestedTheme(
        &self,
        value: super::ElementTheme,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRequestedTheme)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn DataContextChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::DataContextChangedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DataContextChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDataContextChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDataContextChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn Loading<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows_core::IInspectable,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement3,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Loading)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLoading(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement3,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLoading)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AllowFocusOnInteraction)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAllowFocusOnInteraction)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn FocusVisualMargin(&self) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualMargin)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualMargin(
        &self,
        value: super::Thickness,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualMargin)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn FocusVisualSecondaryThickness(
        &self,
    ) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualSecondaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualSecondaryThickness(
        &self,
        value: super::Thickness,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualSecondaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn FocusVisualPrimaryThickness(
        &self,
    ) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualPrimaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualPrimaryThickness(
        &self,
        value: super::Thickness,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualPrimaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn FocusVisualSecondaryBrush(
        &self,
    ) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualSecondaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualSecondaryBrush<P0>(
        &self,
        value: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualSecondaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn FocusVisualPrimaryBrush(
        &self,
    ) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualPrimaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualPrimaryBrush<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualPrimaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AllowFocusWhenDisabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAllowFocusWhenDisabled)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn ActualTheme(&self) -> ::windows_core::Result<super::ElementTheme> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement6,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualTheme)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn ActualThemeChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows_core::IInspectable,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement6,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualThemeChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveActualThemeChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement6,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveActualThemeChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn IsLoaded(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement7,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsLoaded)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn EffectiveViewportChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::EffectiveViewportChangedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement7,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .EffectiveViewportChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveEffectiveViewportChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement7,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveEffectiveViewportChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: super::super::super::Foundation::Size,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MeasureOverride)(
                    ::windows_core::Interface::as_raw(this),
                    availablesize,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: super::super::super::Foundation::Size,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ArrangeOverride)(
                    ::windows_core::Interface::as_raw(this),
                    finalsize,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnApplyTemplate)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &::windows_core::HSTRING,
        usetransitions: bool,
    ) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GoToElementStateCore)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(statename),
                    usetransitions,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn InvalidateViewport(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementProtected7,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .InvalidateViewport)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn FontSize(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontSize)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFontSize)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn FontFamily(&self) -> ::windows_core::Result<super::Media::FontFamily> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontFamily)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFontFamily<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::FontFamily>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFontFamily)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn FontWeight(&self) -> ::windows_core::Result<super::super::Text::FontWeight> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontWeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFontWeight(
        &self,
        value: super::super::Text::FontWeight,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFontWeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn FontStyle(&self) -> ::windows_core::Result<super::super::Text::FontStyle> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontStyle)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFontStyle(
        &self,
        value: super::super::Text::FontStyle,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFontStyle)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn FontStretch(
        &self,
    ) -> ::windows_core::Result<super::super::Text::FontStretch> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontStretch)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: super::super::Text::FontStretch,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFontStretch)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> ::windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CharacterSpacing)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCharacterSpacing)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Foreground(&self) -> ::windows_core::Result<super::Media::Brush> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Foreground)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetForeground<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetForeground)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn TextWrapping(&self) -> ::windows_core::Result<super::TextWrapping> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextWrapping)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetTextWrapping(
        &self,
        value: super::TextWrapping,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTextWrapping)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn TextTrimming(&self) -> ::windows_core::Result<super::TextTrimming> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextTrimming)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetTextTrimming(
        &self,
        value: super::TextTrimming,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTextTrimming)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn TextAlignment(&self) -> ::windows_core::Result<super::TextAlignment> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextAlignment)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetTextAlignment(
        &self,
        value: super::TextAlignment,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTextAlignment)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Text(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Text)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetText(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetText)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn Padding(&self) -> ::windows_core::Result<super::Thickness> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Padding)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetPadding(&self, value: super::Thickness) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetPadding)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn LineHeight(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .LineHeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetLineHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetLineHeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn LineStackingStrategy(
        &self,
    ) -> ::windows_core::Result<super::LineStackingStrategy> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .LineStackingStrategy)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetLineStackingStrategy(
        &self,
        value: super::LineStackingStrategy,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetLineStackingStrategy)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsTextSelectionEnabled(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsTextSelectionEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsTextSelectionEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsTextSelectionEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn SelectedText(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SelectedText)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn BaselineOffset(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BaselineOffset)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SelectionChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SelectionChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveSelectionChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveSelectionChanged)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn ContextMenuOpening<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<ContextMenuOpeningEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ContextMenuOpening)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveContextMenuOpening(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveContextMenuOpening)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn SelectAll(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SelectAll)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Focus(&self, value: super::FocusState) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Focus)(::windows_core::Interface::as_raw(this), value, &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SelectionHighlightColor(
        &self,
    ) -> ::windows_core::Result<super::Media::SolidColorBrush> {
        let this = &::windows_core::ComInterface::cast::<ITextBlock2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SelectionHighlightColor)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetSelectionHighlightColor<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::Media::SolidColorBrush>,
    {
        let this = &::windows_core::ComInterface::cast::<ITextBlock2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetSelectionHighlightColor)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn MaxLines(&self) -> ::windows_core::Result<i32> {
        let this = &::windows_core::ComInterface::cast::<ITextBlock2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MaxLines)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMaxLines(&self, value: i32) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBlock2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMaxLines)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn TextLineBounds(&self) -> ::windows_core::Result<super::TextLineBounds> {
        let this = &::windows_core::ComInterface::cast::<ITextBlock2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextLineBounds)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetTextLineBounds(
        &self,
        value: super::TextLineBounds,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBlock2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTextLineBounds)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn OpticalMarginAlignment(
        &self,
    ) -> ::windows_core::Result<super::OpticalMarginAlignment> {
        let this = &::windows_core::ComInterface::cast::<ITextBlock2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .OpticalMarginAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetOpticalMarginAlignment(
        &self,
        value: super::OpticalMarginAlignment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBlock2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetOpticalMarginAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn IsColorFontEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<ITextBlock2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsColorFontEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsColorFontEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBlock2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsColorFontEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn TextReadingOrder(&self) -> ::windows_core::Result<super::TextReadingOrder> {
        let this = &::windows_core::ComInterface::cast::<ITextBlock2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextReadingOrder)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetTextReadingOrder(
        &self,
        value: super::TextReadingOrder,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBlock2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTextReadingOrder)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<ITextBlock3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsTextScaleFactorEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(
        &self,
        value: bool,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBlock3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsTextScaleFactorEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn TextDecorations(
        &self,
    ) -> ::windows_core::Result<super::super::Text::TextDecorations> {
        let this = &::windows_core::ComInterface::cast::<ITextBlock5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextDecorations)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetTextDecorations(
        &self,
        value: super::super::Text::TextDecorations,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBlock5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTextDecorations)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsTextTrimmed(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<ITextBlock6>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsTextTrimmed)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn HorizontalTextAlignment(
        &self,
    ) -> ::windows_core::Result<super::TextAlignment> {
        let this = &::windows_core::ComInterface::cast::<ITextBlock6>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HorizontalTextAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetHorizontalTextAlignment(
        &self,
        value: super::TextAlignment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBlock6>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHorizontalTextAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn IsTextTrimmedChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                TextBlock,
                IsTextTrimmedChangedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<ITextBlock6>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsTextTrimmedChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveIsTextTrimmedChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBlock6>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveIsTextTrimmedChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn SelectionFlyout(&self) -> ::windows_core::Result<Primitives::FlyoutBase> {
        let this = &::windows_core::ComInterface::cast::<ITextBlock7>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SelectionFlyout)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetSelectionFlyout<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Primitives::FlyoutBase>,
    {
        let this = &::windows_core::ComInterface::cast::<ITextBlock7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetSelectionFlyout)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn CopySelectionToClipboard(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBlock7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .CopySelectionToClipboard)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn FontSizeProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBlockStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontSizeProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn FontFamilyProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBlockStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontFamilyProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn FontWeightProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBlockStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontWeightProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn FontStyleProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBlockStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontStyleProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn FontStretchProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBlockStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontStretchProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn CharacterSpacingProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBlockStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CharacterSpacingProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn ForegroundProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBlockStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ForegroundProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn TextWrappingProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBlockStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextWrappingProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn TextTrimmingProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBlockStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextTrimmingProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn TextAlignmentProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBlockStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextAlignmentProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn TextProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBlockStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextProperty)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        })
    }
    pub fn PaddingProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBlockStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .PaddingProperty)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        })
    }
    pub fn LineHeightProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBlockStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .LineHeightProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn LineStackingStrategyProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBlockStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .LineStackingStrategyProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn IsTextSelectionEnabledProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBlockStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsTextSelectionEnabledProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn SelectedTextProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBlockStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SelectedTextProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn SelectionHighlightColorProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBlockStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SelectionHighlightColorProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn MaxLinesProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBlockStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MaxLinesProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn TextLineBoundsProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBlockStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextLineBoundsProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn OpticalMarginAlignmentProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBlockStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .OpticalMarginAlignmentProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn IsColorFontEnabledProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBlockStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsColorFontEnabledProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn TextReadingOrderProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBlockStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextReadingOrderProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn IsTextScaleFactorEnabledProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBlockStatics3(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsTextScaleFactorEnabledProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn TextDecorationsProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBlockStatics5(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextDecorationsProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn IsTextTrimmedProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBlockStatics6(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsTextTrimmedProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn HorizontalTextAlignmentProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBlockStatics6(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HorizontalTextAlignmentProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn SelectionFlyoutProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBlockStatics7(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SelectionFlyoutProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn DesiredSize(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DesiredSize)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn AllowDrop(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AllowDrop)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAllowDrop)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Opacity(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Opacity)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetOpacity)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Clip(&self) -> ::windows_core::Result<super::Media::RectangleGeometry> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Clip)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetClip<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::Media::RectangleGeometry>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetClip)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn RenderTransform(&self) -> ::windows_core::Result<super::Media::Transform> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RenderTransform)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetRenderTransform<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Transform>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRenderTransform)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn Projection(&self) -> ::windows_core::Result<super::Media::Projection> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Projection)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetProjection<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Projection>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetProjection)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn RenderTransformOrigin(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Point> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RenderTransformOrigin)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: super::super::super::Foundation::Point,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRenderTransformOrigin)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsHitTestVisible)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsHitTestVisible)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Visibility(&self) -> ::windows_core::Result<super::Visibility> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Visibility)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetVisibility)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn RenderSize(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RenderSize)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .UseLayoutRounding)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetUseLayoutRounding)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn CacheMode(&self) -> ::windows_core::Result<super::Media::CacheMode> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CacheMode)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCacheMode<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::CacheMode>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCacheMode)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsTapEnabled)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsTapEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsDoubleTapEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsDoubleTapEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsRightTapEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsRightTapEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsHoldingEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsHoldingEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn RemoveKeyUp(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveKeyUp)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveKeyDown(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveKeyDown)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn GotFocus<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GotFocus)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveGotFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveGotFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn LostFocus<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .LostFocus)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLostFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLostFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DragEnter<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragEnter)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragEnter(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragEnter)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DragLeave<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragLeave)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragLeave(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragLeave)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DragOver<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragOver)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragOver(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragOver)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn Drop<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Drop)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDrop(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDrop)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerPressed(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerPressed)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerMoved(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerMoved)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerReleased(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerReleased)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerEntered(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerEntered)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerExited(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerExited)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerCaptureLost(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerCaptureLost)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemovePointerCanceled(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerCanceled)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerWheelChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerWheelChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveTapped(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveTapped)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveDoubleTapped(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDoubleTapped)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveHolding(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveHolding)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveRightTapped(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveRightTapped)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveManipulationStarting(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationStarting)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationInertiaStarting)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveManipulationStarted(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationStarted)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveManipulationDelta(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationDelta)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveManipulationCompleted(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationCompleted)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn Measure(
        &self,
        availablesize: super::super::super::Foundation::Size,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .Measure)(::windows_core::Interface::as_raw(this), availablesize)
                .ok()
        }
    }
    pub fn Arrange(
        &self,
        finalrect: super::super::super::Foundation::Rect,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .Arrange)(::windows_core::Interface::as_raw(this), finalrect)
                .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .ReleasePointerCaptures)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn AddHandler<P0, P1>(
        &self,
        routedevent: P0,
        handler: P1,
        handledeventstoo: bool,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::RoutedEvent>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .AddHandler)(
                    ::windows_core::Interface::as_raw(this),
                    routedevent.into_param().abi(),
                    handler.into_param().abi(),
                    handledeventstoo,
                )
                .ok()
        }
    }
    pub fn RemoveHandler<P0, P1>(
        &self,
        routedevent: P0,
        handler: P1,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::RoutedEvent>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveHandler)(
                    ::windows_core::Interface::as_raw(this),
                    routedevent.into_param().abi(),
                    handler.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn TransformToVisual<P0>(
        &self,
        visual: P0,
    ) -> ::windows_core::Result<super::Media::GeneralTransform>
    where
        P0: ::windows_core::TryIntoParam<super::UIElement>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TransformToVisual)(
                    ::windows_core::Interface::as_raw(this),
                    visual.try_into_param()?.abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn InvalidateMeasure(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .InvalidateMeasure)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .InvalidateArrange)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn UpdateLayout(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .UpdateLayout)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn XamlRoot(&self) -> ::windows_core::Result<super::XamlRoot> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .XamlRoot)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetXamlRoot<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::XamlRoot>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetXamlRoot)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn UIContext(&self) -> ::windows_core::Result<super::super::UIContext> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .UIContext)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Shadow(&self) -> ::windows_core::Result<super::Media::Shadow> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Shadow)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetShadow<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Shadow>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetShadow)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn CompositeMode(
        &self,
    ) -> ::windows_core::Result<super::Media::ElementCompositeMode> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CompositeMode)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCompositeMode(
        &self,
        value: super::Media::ElementCompositeMode,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCompositeMode)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CancelDirectManipulations)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn CanDrag(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CanDrag)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCanDrag)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn DragStarting<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::DragStartingEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragStarting)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragStarting(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragStarting)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DropCompleted<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::DropCompletedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DropCompleted)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDropCompleted(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDropCompleted)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn ContextFlyout(&self) -> ::windows_core::Result<Primitives::FlyoutBase> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ContextFlyout)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetContextFlyout<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Primitives::FlyoutBase>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetContextFlyout)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ExitDisplayModeOnAccessKeyInvoked)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(
        &self,
        value: bool,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetExitDisplayModeOnAccessKeyInvoked)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsAccessKeyScope)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsAccessKeyScope)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn AccessKeyScopeOwner(
        &self,
    ) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AccessKeyScopeOwner)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAccessKeyScopeOwner)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn AccessKey(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AccessKey)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetAccessKey(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAccessKey)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn RemoveContextRequested(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveContextRequested)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn ContextCanceled<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::RoutedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ContextCanceled)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveContextCanceled(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveContextCanceled)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveAccessKeyDisplayRequested)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveAccessKeyDisplayDismissed)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveAccessKeyInvoked)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn Lights(
        &self,
    ) -> ::windows_core::Result<
        super::super::super::Foundation::Collections::IVector<super::Media::XamlLight>,
    > {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Lights)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyTipHorizontalOffset)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyTipHorizontalOffset)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyTipVerticalOffset)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyTipVerticalOffset)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn HighContrastAdjustment(
        &self,
    ) -> ::windows_core::Result<super::ElementHighContrastAdjustment> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HighContrastAdjustment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetHighContrastAdjustment(
        &self,
        value: super::ElementHighContrastAdjustment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHighContrastAdjustment)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn RemoveGettingFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveGettingFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveLosingFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLosingFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveNoFocusCandidateFound)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn StartBringIntoView(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .StartBringIntoView)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn StartBringIntoViewWithOptions<P0>(
        &self,
        options: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::BringIntoViewOptions>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .StartBringIntoViewWithOptions)(
                    ::windows_core::Interface::as_raw(this),
                    options.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn RemoveCharacterReceived(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveCharacterReceived)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveProcessKeyboardAccelerators)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemovePreviewKeyDown(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePreviewKeyDown)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePreviewKeyUp(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePreviewKeyUp)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyTipTarget)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyTipTarget)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyboardAcceleratorPlacementTarget)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(
        &self,
        value: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyboardAcceleratorPlacementTarget)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn BringIntoViewRequested<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::BringIntoViewRequestedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BringIntoViewRequested)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveBringIntoViewRequested(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveBringIntoViewRequested)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn CanBeScrollAnchor(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CanBeScrollAnchor)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCanBeScrollAnchor)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn OpacityTransition(&self) -> ::windows_core::Result<super::ScalarTransition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .OpacityTransition)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetOpacityTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::ScalarTransition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetOpacityTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn TranslationTransition(
        &self,
    ) -> ::windows_core::Result<super::Vector3Transition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TranslationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetTranslationTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Vector3Transition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTranslationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn Rotation(&self) -> ::windows_core::Result<f32> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Rotation)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRotation)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn RotationTransition(&self) -> ::windows_core::Result<super::ScalarTransition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RotationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetRotationTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::ScalarTransition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRotationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn ScaleTransition(&self) -> ::windows_core::Result<super::Vector3Transition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ScaleTransition)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetScaleTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Vector3Transition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetScaleTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnDisconnectVisualChildren)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: super::super::super::Foundation::Point,
        boundingrect: super::super::super::Foundation::Rect,
    ) -> ::windows_core::Result<
        super::super::super::Foundation::Collections::IIterable<
            super::super::super::Foundation::Collections::IIterable<
                super::super::super::Foundation::Point,
            >,
        >,
    > {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FindSubElementsForTouchTargeting)(
                    ::windows_core::Interface::as_raw(this),
                    point,
                    boundingrect,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> ::windows_core::Result<
        super::super::super::Foundation::Collections::IIterable<super::DependencyObject>,
    > {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides7,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetChildrenInTabFocusOrder)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn OnBringIntoViewRequested<P0>(&self, e: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::BringIntoViewRequestedEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides8,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnBringIntoViewRequested)(
                    ::windows_core::Interface::as_raw(this),
                    e.into_param().abi(),
                )
                .ok()
        }
    }
    #[doc(hidden)]
    pub fn ITextBlockStatics<
        R,
        F: FnOnce(&ITextBlockStatics) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<TextBlock, ITextBlockStatics> = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn ITextBlockStatics2<
        R,
        F: FnOnce(&ITextBlockStatics2) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            TextBlock,
            ITextBlockStatics2,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn ITextBlockStatics3<
        R,
        F: FnOnce(&ITextBlockStatics3) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            TextBlock,
            ITextBlockStatics3,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn ITextBlockStatics5<
        R,
        F: FnOnce(&ITextBlockStatics5) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            TextBlock,
            ITextBlockStatics5,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn ITextBlockStatics6<
        R,
        F: FnOnce(&ITextBlockStatics6) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            TextBlock,
            ITextBlockStatics6,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn ITextBlockStatics7<
        R,
        F: FnOnce(&ITextBlockStatics7) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            TextBlock,
            ITextBlockStatics7,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::cmp::PartialEq for TextBlock {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TextBlock {}
impl ::core::fmt::Debug for TextBlock {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TextBlock").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TextBlock {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TextBlock;{ae2d9271-3b4a-45fc-8468-f7949548f4d5})",
    );
}
impl ::core::clone::Clone for TextBlock {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TextBlock {
    type Vtable = ITextBlock_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TextBlock {
    const IID: ::windows_core::GUID = <ITextBlock as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TextBlock {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TextBlock";
}
::windows_core::imp::interface_hierarchy!(
    TextBlock, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::FrameworkElement> for TextBlock {}
impl ::windows_core::CanTryInto<super::UIElement> for TextBlock {}
impl ::windows_core::CanTryInto<super::DependencyObject> for TextBlock {}
unsafe impl ::core::marker::Send for TextBlock {}
unsafe impl ::core::marker::Sync for TextBlock {}
#[repr(transparent)]
pub struct TextBox(::windows_core::IUnknown);
impl TextBox {
    pub fn FontSize(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontSize)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFontSize)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn FontFamily(&self) -> ::windows_core::Result<super::Media::FontFamily> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontFamily)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFontFamily<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::FontFamily>,
    {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFontFamily)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn FontWeight(&self) -> ::windows_core::Result<super::super::Text::FontWeight> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontWeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFontWeight(
        &self,
        value: super::super::Text::FontWeight,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFontWeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn FontStyle(&self) -> ::windows_core::Result<super::super::Text::FontStyle> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontStyle)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFontStyle(
        &self,
        value: super::super::Text::FontStyle,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFontStyle)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn FontStretch(
        &self,
    ) -> ::windows_core::Result<super::super::Text::FontStretch> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FontStretch)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: super::super::Text::FontStretch,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFontStretch)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> ::windows_core::Result<i32> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CharacterSpacing)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCharacterSpacing)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Foreground(&self) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Foreground)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetForeground<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetForeground)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn IsTabStop(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsTabStop)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsTabStop)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsEnabled)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn TabIndex(&self) -> ::windows_core::Result<i32> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TabIndex)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTabIndex)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Template(&self) -> ::windows_core::Result<ControlTemplate> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Template)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetTemplate<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ControlTemplate>,
    {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTemplate)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn Padding(&self) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Padding)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetPadding(&self, value: super::Thickness) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetPadding)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn HorizontalContentAlignment(
        &self,
    ) -> ::windows_core::Result<super::HorizontalAlignment> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HorizontalContentAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetHorizontalContentAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHorizontalContentAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn VerticalContentAlignment(
        &self,
    ) -> ::windows_core::Result<super::VerticalAlignment> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .VerticalContentAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetVerticalContentAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetVerticalContentAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn Background(&self) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Background)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetBackground<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetBackground)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn BorderThickness(&self) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BorderThickness)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetBorderThickness(
        &self,
        value: super::Thickness,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetBorderThickness)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn BorderBrush(&self) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BorderBrush)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetBorderBrush<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetBorderBrush)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn FocusState(&self) -> ::windows_core::Result<super::FocusState> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusState)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn IsEnabledChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DependencyPropertyChangedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsEnabledChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveIsEnabledChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveIsEnabledChanged)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn ApplyTemplate(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ApplyTemplate)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Focus(&self, value: super::FocusState) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Focus)(::windows_core::Interface::as_raw(this), value, &mut result__)
                .from_abi(result__)
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IControl2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsTextScaleFactorEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(
        &self,
        value: bool,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsTextScaleFactorEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IControl3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .UseSystemFocusVisuals)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetUseSystemFocusVisuals)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn IsFocusEngagementEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsFocusEngagementEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsFocusEngagementEnabled(
        &self,
        value: bool,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsFocusEngagementEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn IsFocusEngaged(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsFocusEngaged)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetIsFocusEngaged(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsFocusEngaged)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn RequiresPointer(&self) -> ::windows_core::Result<RequiresPointer> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RequiresPointer)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetRequiresPointer(
        &self,
        value: RequiresPointer,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRequiresPointer)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .XYFocusLeft)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetXYFocusLeft)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn XYFocusRight(&self) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .XYFocusRight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetXYFocusRight)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn XYFocusUp(&self) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .XYFocusUp)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetXYFocusUp)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn XYFocusDown(&self) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .XYFocusDown)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetXYFocusDown)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn ElementSoundMode(&self) -> ::windows_core::Result<super::ElementSoundMode> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ElementSoundMode)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetElementSoundMode(
        &self,
        value: super::ElementSoundMode,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetElementSoundMode)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn FocusEngaged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                Control,
                FocusEngagedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusEngaged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveFocusEngaged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveFocusEngaged)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn FocusDisengaged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                Control,
                FocusDisengagedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusDisengaged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveFocusDisengaged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveFocusDisengaged)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveFocusEngagement(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveFocusEngagement)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn DefaultStyleResourceUri(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Uri> {
        let this = &::windows_core::ComInterface::cast::<IControl5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DefaultStyleResourceUri)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetDefaultStyleResourceUri<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::super::Foundation::Uri>,
    {
        let this = &::windows_core::ComInterface::cast::<IControl5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetDefaultStyleResourceUri)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn BackgroundSizing(&self) -> ::windows_core::Result<BackgroundSizing> {
        let this = &::windows_core::ComInterface::cast::<IControl7>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BackgroundSizing)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetBackgroundSizing(
        &self,
        value: BackgroundSizing,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetBackgroundSizing)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn CornerRadius(&self) -> ::windows_core::Result<super::CornerRadius> {
        let this = &::windows_core::ComInterface::cast::<IControl7>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CornerRadius)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCornerRadius(
        &self,
        value: super::CornerRadius,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IControl7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCornerRadius)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn OnGotFocus<P0>(&self, e: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::RoutedEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<IControlOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnGotFocus)(
                    ::windows_core::Interface::as_raw(this),
                    e.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn OnLostFocus<P0>(&self, e: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::RoutedEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<IControlOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnLostFocus)(
                    ::windows_core::Interface::as_raw(this),
                    e.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn OnDragEnter<P0>(&self, e: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DragEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<IControlOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnDragEnter)(
                    ::windows_core::Interface::as_raw(this),
                    e.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn OnDragLeave<P0>(&self, e: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DragEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<IControlOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnDragLeave)(
                    ::windows_core::Interface::as_raw(this),
                    e.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn OnDragOver<P0>(&self, e: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DragEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<IControlOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnDragOver)(
                    ::windows_core::Interface::as_raw(this),
                    e.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn OnDrop<P0>(&self, e: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DragEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<IControlOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnDrop)(::windows_core::Interface::as_raw(this), e.into_param().abi())
                .ok()
        }
    }
    pub fn DefaultStyleKey(
        &self,
    ) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DefaultStyleKey)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetDefaultStyleKey<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IControlProtected>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetDefaultStyleKey)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn GetTemplateChild(
        &self,
        childname: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetTemplateChild)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(childname),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn GetValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .ClearValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn ReadLocalValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ReadLocalValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetAnimationBaseValue)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
        P1: ::windows_core::IntoParam<super::DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RegisterPropertyChangedCallback)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    callback.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IDependencyObject2,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .UnregisterPropertyChangedCallback)(
                    ::windows_core::Interface::as_raw(this),
                    dp.into_param().abi(),
                    token,
                )
                .ok()
        }
    }
    pub fn Triggers(&self) -> ::windows_core::Result<super::TriggerCollection> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Triggers)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Resources(&self) -> ::windows_core::Result<super::ResourceDictionary> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Resources)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::ResourceDictionary>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetResources)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn Tag(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Tag)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTag)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn Language(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Language)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetLanguage(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetLanguage)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn ActualWidth(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualWidth)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn ActualHeight(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualHeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Width(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Width)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetWidth)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Height(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Height)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MinWidth(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MinWidth)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMinWidth)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MaxWidth(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MaxWidth)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMaxWidth)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MinHeight(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MinHeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMinHeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MaxHeight(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MaxHeight)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMaxHeight)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn HorizontalAlignment(
        &self,
    ) -> ::windows_core::Result<super::HorizontalAlignment> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HorizontalAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHorizontalAlignment)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> ::windows_core::Result<super::VerticalAlignment> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .VerticalAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetVerticalAlignment)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Margin(&self) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Margin)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMargin(&self, value: super::Thickness) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMargin)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Name(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Name)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetName(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetName)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn BaseUri(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Uri> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BaseUri)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn DataContext(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DataContext)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetDataContext)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn Style(&self) -> ::windows_core::Result<super::Style> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Style)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetStyle<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::Style>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetStyle)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn Parent(&self) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Parent)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn FlowDirection(&self) -> ::windows_core::Result<super::FlowDirection> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FlowDirection)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetFlowDirection(
        &self,
        value: super::FlowDirection,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFlowDirection)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Loaded<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Loaded)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLoaded(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLoaded)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn Unloaded<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Unloaded)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveUnloaded(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveUnloaded)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn SizeChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::SizeChangedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SizeChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveSizeChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveSizeChanged)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn LayoutUpdated<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::EventHandler<::windows_core::IInspectable>,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .LayoutUpdated)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLayoutUpdated(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLayoutUpdated)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FindName)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(name),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RequestedTheme(&self) -> ::windows_core::Result<super::ElementTheme> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RequestedTheme)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetRequestedTheme(
        &self,
        value: super::ElementTheme,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRequestedTheme)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn DataContextChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::DataContextChangedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DataContextChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDataContextChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement2,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDataContextChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn Loading<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows_core::IInspectable,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement3,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Loading)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLoading(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement3,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLoading)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AllowFocusOnInteraction)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAllowFocusOnInteraction)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn FocusVisualMargin(&self) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualMargin)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualMargin(
        &self,
        value: super::Thickness,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualMargin)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn FocusVisualSecondaryThickness(
        &self,
    ) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualSecondaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualSecondaryThickness(
        &self,
        value: super::Thickness,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualSecondaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn FocusVisualPrimaryThickness(
        &self,
    ) -> ::windows_core::Result<super::Thickness> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualPrimaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualPrimaryThickness(
        &self,
        value: super::Thickness,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualPrimaryThickness)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn FocusVisualSecondaryBrush(
        &self,
    ) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualSecondaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualSecondaryBrush<P0>(
        &self,
        value: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualSecondaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn FocusVisualPrimaryBrush(
        &self,
    ) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FocusVisualPrimaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetFocusVisualPrimaryBrush<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetFocusVisualPrimaryBrush)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AllowFocusWhenDisabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement4,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAllowFocusWhenDisabled)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn ActualTheme(&self) -> ::windows_core::Result<super::ElementTheme> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement6,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualTheme)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn ActualThemeChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows_core::IInspectable,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement6,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ActualThemeChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveActualThemeChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement6,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveActualThemeChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn IsLoaded(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement7,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsLoaded)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn EffectiveViewportChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::EffectiveViewportChangedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement7,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .EffectiveViewportChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveEffectiveViewportChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElement7,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveEffectiveViewportChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: super::super::super::Foundation::Size,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MeasureOverride)(
                    ::windows_core::Interface::as_raw(this),
                    availablesize,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: super::super::super::Foundation::Size,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ArrangeOverride)(
                    ::windows_core::Interface::as_raw(this),
                    finalsize,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnApplyTemplate)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &::windows_core::HSTRING,
        usetransitions: bool,
    ) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementOverrides2,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GoToElementStateCore)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(statename),
                    usetransitions,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn InvalidateViewport(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IFrameworkElementProtected7,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .InvalidateViewport)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Text(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Text)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetText(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetText)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn SelectedText(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SelectedText)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetSelectedText(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetSelectedText)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn SelectionLength(&self) -> ::windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SelectionLength)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetSelectionLength(&self, value: i32) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetSelectionLength)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn SelectionStart(&self) -> ::windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SelectionStart)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetSelectionStart(&self, value: i32) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetSelectionStart)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn MaxLength(&self) -> ::windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MaxLength)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetMaxLength(&self, value: i32) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetMaxLength)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsReadOnly(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsReadOnly)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetIsReadOnly(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsReadOnly)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn AcceptsReturn(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AcceptsReturn)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetAcceptsReturn(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAcceptsReturn)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn TextAlignment(&self) -> ::windows_core::Result<super::TextAlignment> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextAlignment)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetTextAlignment(
        &self,
        value: super::TextAlignment,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTextAlignment)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn TextWrapping(&self) -> ::windows_core::Result<super::TextWrapping> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextWrapping)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetTextWrapping(
        &self,
        value: super::TextWrapping,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTextWrapping)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsSpellCheckEnabled(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsSpellCheckEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsSpellCheckEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsSpellCheckEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsTextPredictionEnabled(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsTextPredictionEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsTextPredictionEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsTextPredictionEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn TextChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<TextChangedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveTextChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveTextChanged)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn SelectionChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SelectionChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveSelectionChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveSelectionChanged)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn ContextMenuOpening<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<ContextMenuOpeningEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ContextMenuOpening)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveContextMenuOpening(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveContextMenuOpening)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn Select(&self, start: i32, length: i32) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .Select)(::windows_core::Interface::as_raw(this), start, length)
                .ok()
        }
    }
    pub fn SelectAll(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SelectAll)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetRectFromCharacterIndex(
        &self,
        charindex: i32,
        trailingedge: bool,
    ) -> ::windows_core::Result<super::super::super::Foundation::Rect> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetRectFromCharacterIndex)(
                    ::windows_core::Interface::as_raw(this),
                    charindex,
                    trailingedge,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn Header(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<ITextBox2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Header)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetHeader<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<ITextBox2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHeader)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn HeaderTemplate(&self) -> ::windows_core::Result<super::DataTemplate> {
        let this = &::windows_core::ComInterface::cast::<ITextBox2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HeaderTemplate)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetHeaderTemplate<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DataTemplate>,
    {
        let this = &::windows_core::ComInterface::cast::<ITextBox2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHeaderTemplate)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn PlaceholderText(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = &::windows_core::ComInterface::cast::<ITextBox2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .PlaceholderText)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetPlaceholderText(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetPlaceholderText)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn SelectionHighlightColor(
        &self,
    ) -> ::windows_core::Result<super::Media::SolidColorBrush> {
        let this = &::windows_core::ComInterface::cast::<ITextBox2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SelectionHighlightColor)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetSelectionHighlightColor<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::Media::SolidColorBrush>,
    {
        let this = &::windows_core::ComInterface::cast::<ITextBox2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetSelectionHighlightColor)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn PreventKeyboardDisplayOnProgrammaticFocus(
        &self,
    ) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<ITextBox2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .PreventKeyboardDisplayOnProgrammaticFocus)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetPreventKeyboardDisplayOnProgrammaticFocus(
        &self,
        value: bool,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetPreventKeyboardDisplayOnProgrammaticFocus)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn IsColorFontEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<ITextBox2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsColorFontEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsColorFontEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsColorFontEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Paste<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<TextControlPasteEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<ITextBox2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Paste)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemovePaste(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePaste)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn TextCompositionStarted<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                TextBox,
                TextCompositionStartedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<ITextBox3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextCompositionStarted)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveTextCompositionStarted(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveTextCompositionStarted)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn TextCompositionChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                TextBox,
                TextCompositionChangedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<ITextBox3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextCompositionChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveTextCompositionChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveTextCompositionChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn TextCompositionEnded<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                TextBox,
                TextCompositionEndedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<ITextBox3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextCompositionEnded)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveTextCompositionEnded(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveTextCompositionEnded)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn TextReadingOrder(&self) -> ::windows_core::Result<super::TextReadingOrder> {
        let this = &::windows_core::ComInterface::cast::<ITextBox3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextReadingOrder)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetTextReadingOrder(
        &self,
        value: super::TextReadingOrder,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTextReadingOrder)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn DesiredCandidateWindowAlignment(
        &self,
    ) -> ::windows_core::Result<CandidateWindowAlignment> {
        let this = &::windows_core::ComInterface::cast::<ITextBox3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DesiredCandidateWindowAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetDesiredCandidateWindowAlignment(
        &self,
        value: CandidateWindowAlignment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetDesiredCandidateWindowAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn CandidateWindowBoundsChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                TextBox,
                CandidateWindowBoundsChangedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<ITextBox3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CandidateWindowBoundsChanged)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveCandidateWindowBoundsChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveCandidateWindowBoundsChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn TextChanging<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                TextBox,
                TextBoxTextChangingEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<ITextBox3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextChanging)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveTextChanging(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveTextChanging)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn GetLinguisticAlternativesAsync(
        &self,
    ) -> ::windows_core::Result<
        super::super::super::Foundation::IAsyncOperation<
            super::super::super::Foundation::Collections::IVectorView<
                ::windows_core::HSTRING,
            >,
        >,
    > {
        let this = &::windows_core::ComInterface::cast::<ITextBox4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetLinguisticAlternativesAsync)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SelectionHighlightColorWhenNotFocused(
        &self,
    ) -> ::windows_core::Result<super::Media::SolidColorBrush> {
        let this = &::windows_core::ComInterface::cast::<ITextBox5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SelectionHighlightColorWhenNotFocused)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetSelectionHighlightColorWhenNotFocused<P0>(
        &self,
        value: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::Media::SolidColorBrush>,
    {
        let this = &::windows_core::ComInterface::cast::<ITextBox5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetSelectionHighlightColorWhenNotFocused)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn HorizontalTextAlignment(
        &self,
    ) -> ::windows_core::Result<super::TextAlignment> {
        let this = &::windows_core::ComInterface::cast::<ITextBox6>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HorizontalTextAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetHorizontalTextAlignment(
        &self,
        value: super::TextAlignment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox6>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHorizontalTextAlignment)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn CharacterCasing(&self) -> ::windows_core::Result<CharacterCasing> {
        let this = &::windows_core::ComInterface::cast::<ITextBox6>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CharacterCasing)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCharacterCasing(
        &self,
        value: CharacterCasing,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox6>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCharacterCasing)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn PlaceholderForeground(&self) -> ::windows_core::Result<super::Media::Brush> {
        let this = &::windows_core::ComInterface::cast::<ITextBox6>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .PlaceholderForeground)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetPlaceholderForeground<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Brush>,
    {
        let this = &::windows_core::ComInterface::cast::<ITextBox6>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetPlaceholderForeground)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn CopyingToClipboard<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                TextBox,
                TextControlCopyingToClipboardEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<ITextBox6>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CopyingToClipboard)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveCopyingToClipboard(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox6>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveCopyingToClipboard)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn CuttingToClipboard<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                TextBox,
                TextControlCuttingToClipboardEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<ITextBox6>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CuttingToClipboard)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveCuttingToClipboard(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox6>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveCuttingToClipboard)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn BeforeTextChanging<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                TextBox,
                TextBoxBeforeTextChangingEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<ITextBox6>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BeforeTextChanging)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveBeforeTextChanging(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox6>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveBeforeTextChanging)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn HandwritingView(&self) -> ::windows_core::Result<HandwritingView> {
        let this = &::windows_core::ComInterface::cast::<ITextBox7>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HandwritingView)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetHandwritingView<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<HandwritingView>,
    {
        let this = &::windows_core::ComInterface::cast::<ITextBox7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHandwritingView)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn IsHandwritingViewEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<ITextBox7>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsHandwritingViewEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsHandwritingViewEnabled(
        &self,
        value: bool,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsHandwritingViewEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn CanPasteClipboardContent(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<ITextBox8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CanPasteClipboardContent)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn CanUndo(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<ITextBox8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CanUndo)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn CanRedo(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<ITextBox8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CanRedo)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SelectionFlyout(&self) -> ::windows_core::Result<Primitives::FlyoutBase> {
        let this = &::windows_core::ComInterface::cast::<ITextBox8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SelectionFlyout)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetSelectionFlyout<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Primitives::FlyoutBase>,
    {
        let this = &::windows_core::ComInterface::cast::<ITextBox8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetSelectionFlyout)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn ProofingMenuFlyout(&self) -> ::windows_core::Result<Primitives::FlyoutBase> {
        let this = &::windows_core::ComInterface::cast::<ITextBox8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ProofingMenuFlyout)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn Description(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<ITextBox8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Description)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetDescription<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<ITextBox8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetDescription)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn SelectionChanging<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                TextBox,
                TextBoxSelectionChangingEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<ITextBox8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SelectionChanging)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveSelectionChanging(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveSelectionChanging)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn Undo(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .Undo)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Redo(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .Redo)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn PasteFromClipboard(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .PasteFromClipboard)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn CopySelectionToClipboard(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .CopySelectionToClipboard)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn CutSelectionToClipboard(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .CutSelectionToClipboard)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn ClearUndoRedoHistory(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<ITextBox8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .ClearUndoRedoHistory)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn TextProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBoxStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextProperty)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        })
    }
    pub fn MaxLengthProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBoxStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .MaxLengthProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn IsReadOnlyProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBoxStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsReadOnlyProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn AcceptsReturnProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBoxStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AcceptsReturnProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn TextAlignmentProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBoxStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextAlignmentProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn TextWrappingProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBoxStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextWrappingProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn IsSpellCheckEnabledProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBoxStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsSpellCheckEnabledProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn IsTextPredictionEnabledProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBoxStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsTextPredictionEnabledProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn InputScopeProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBoxStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .InputScopeProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn HeaderProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBoxStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HeaderProperty)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        })
    }
    pub fn HeaderTemplateProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBoxStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HeaderTemplateProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn PlaceholderTextProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBoxStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .PlaceholderTextProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn SelectionHighlightColorProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBoxStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SelectionHighlightColorProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn PreventKeyboardDisplayOnProgrammaticFocusProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBoxStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .PreventKeyboardDisplayOnProgrammaticFocusProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn IsColorFontEnabledProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBoxStatics2(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsColorFontEnabledProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn DesiredCandidateWindowAlignmentProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBoxStatics3(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DesiredCandidateWindowAlignmentProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn TextReadingOrderProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBoxStatics3(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TextReadingOrderProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn SelectionHighlightColorWhenNotFocusedProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBoxStatics5(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SelectionHighlightColorWhenNotFocusedProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn HorizontalTextAlignmentProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBoxStatics6(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HorizontalTextAlignmentProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn CharacterCasingProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBoxStatics6(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CharacterCasingProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn PlaceholderForegroundProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBoxStatics6(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .PlaceholderForegroundProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn HandwritingViewProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBoxStatics7(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HandwritingViewProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn IsHandwritingViewEnabledProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBoxStatics7(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsHandwritingViewEnabledProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn CanPasteClipboardContentProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBoxStatics8(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CanPasteClipboardContentProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn CanUndoProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBoxStatics8(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CanUndoProperty)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        })
    }
    pub fn CanRedoProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBoxStatics8(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CanRedoProperty)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        })
    }
    pub fn SelectionFlyoutProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBoxStatics8(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .SelectionFlyoutProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn ProofingMenuFlyoutProperty() -> ::windows_core::Result<
        super::DependencyProperty,
    > {
        Self::ITextBoxStatics8(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ProofingMenuFlyoutProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn DescriptionProperty() -> ::windows_core::Result<super::DependencyProperty> {
        Self::ITextBoxStatics8(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DescriptionProperty)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    pub fn DesiredSize(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DesiredSize)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn AllowDrop(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AllowDrop)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAllowDrop)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Opacity(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Opacity)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetOpacity)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Clip(&self) -> ::windows_core::Result<super::Media::RectangleGeometry> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Clip)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetClip<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::Media::RectangleGeometry>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetClip)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn RenderTransform(&self) -> ::windows_core::Result<super::Media::Transform> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RenderTransform)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetRenderTransform<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Transform>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRenderTransform)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn Projection(&self) -> ::windows_core::Result<super::Media::Projection> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Projection)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetProjection<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Projection>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetProjection)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn RenderTransformOrigin(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Point> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RenderTransformOrigin)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: super::super::super::Foundation::Point,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRenderTransformOrigin)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsHitTestVisible)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsHitTestVisible)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn Visibility(&self) -> ::windows_core::Result<super::Visibility> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Visibility)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetVisibility)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn RenderSize(
        &self,
    ) -> ::windows_core::Result<super::super::super::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RenderSize)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .UseLayoutRounding)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetUseLayoutRounding)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn CacheMode(&self) -> ::windows_core::Result<super::Media::CacheMode> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CacheMode)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCacheMode<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::CacheMode>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCacheMode)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsTapEnabled)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsTapEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsDoubleTapEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsDoubleTapEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsRightTapEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsRightTapEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsHoldingEnabled)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsHoldingEnabled)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn RemoveKeyUp(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveKeyUp)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveKeyDown(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveKeyDown)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn GotFocus<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GotFocus)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveGotFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveGotFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn LostFocus<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .LostFocus)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveLostFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLostFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DragEnter<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragEnter)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragEnter(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragEnter)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DragLeave<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragLeave)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragLeave(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragLeave)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DragOver<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragOver)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragOver(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragOver)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn Drop<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<super::DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Drop)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDrop(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDrop)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerPressed(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerPressed)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerMoved(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerMoved)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerReleased(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerReleased)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerEntered(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerEntered)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerExited(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerExited)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerCaptureLost(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerCaptureLost)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemovePointerCanceled(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerCanceled)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePointerWheelChanged(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePointerWheelChanged)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveTapped(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveTapped)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveDoubleTapped(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDoubleTapped)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveHolding(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveHolding)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveRightTapped(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveRightTapped)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveManipulationStarting(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationStarting)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationInertiaStarting)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveManipulationStarted(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationStarted)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveManipulationDelta(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationDelta)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveManipulationCompleted(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveManipulationCompleted)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn Measure(
        &self,
        availablesize: super::super::super::Foundation::Size,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .Measure)(::windows_core::Interface::as_raw(this), availablesize)
                .ok()
        }
    }
    pub fn Arrange(
        &self,
        finalrect: super::super::super::Foundation::Rect,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .Arrange)(::windows_core::Interface::as_raw(this), finalrect)
                .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .ReleasePointerCaptures)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn AddHandler<P0, P1>(
        &self,
        routedevent: P0,
        handler: P1,
        handledeventstoo: bool,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::RoutedEvent>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .AddHandler)(
                    ::windows_core::Interface::as_raw(this),
                    routedevent.into_param().abi(),
                    handler.into_param().abi(),
                    handledeventstoo,
                )
                .ok()
        }
    }
    pub fn RemoveHandler<P0, P1>(
        &self,
        routedevent: P0,
        handler: P1,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::RoutedEvent>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveHandler)(
                    ::windows_core::Interface::as_raw(this),
                    routedevent.into_param().abi(),
                    handler.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn TransformToVisual<P0>(
        &self,
        visual: P0,
    ) -> ::windows_core::Result<super::Media::GeneralTransform>
    where
        P0: ::windows_core::TryIntoParam<super::UIElement>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TransformToVisual)(
                    ::windows_core::Interface::as_raw(this),
                    visual.try_into_param()?.abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn InvalidateMeasure(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .InvalidateMeasure)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .InvalidateArrange)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn UpdateLayout(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .UpdateLayout)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn XamlRoot(&self) -> ::windows_core::Result<super::XamlRoot> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .XamlRoot)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetXamlRoot<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::XamlRoot>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetXamlRoot)(
                    ::windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn UIContext(&self) -> ::windows_core::Result<super::super::UIContext> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .UIContext)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Shadow(&self) -> ::windows_core::Result<super::Media::Shadow> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Shadow)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetShadow<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Media::Shadow>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement10>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetShadow)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn CompositeMode(
        &self,
    ) -> ::windows_core::Result<super::Media::ElementCompositeMode> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CompositeMode)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCompositeMode(
        &self,
        value: super::Media::ElementCompositeMode,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCompositeMode)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CancelDirectManipulations)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn CanDrag(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CanDrag)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCanDrag)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn DragStarting<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::DragStartingEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DragStarting)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDragStarting(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDragStarting)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn DropCompleted<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::DropCompletedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .DropCompleted)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveDropCompleted(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement3>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveDropCompleted)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn ContextFlyout(&self) -> ::windows_core::Result<Primitives::FlyoutBase> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ContextFlyout)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetContextFlyout<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Primitives::FlyoutBase>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetContextFlyout)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ExitDisplayModeOnAccessKeyInvoked)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(
        &self,
        value: bool,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetExitDisplayModeOnAccessKeyInvoked)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .IsAccessKeyScope)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetIsAccessKeyScope)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn AccessKeyScopeOwner(
        &self,
    ) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AccessKeyScopeOwner)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAccessKeyScopeOwner)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn AccessKey(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .AccessKey)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetAccessKey(
        &self,
        value: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetAccessKey)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn RemoveContextRequested(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveContextRequested)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn ContextCanceled<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::RoutedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ContextCanceled)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveContextCanceled(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveContextCanceled)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveAccessKeyDisplayRequested)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveAccessKeyDisplayDismissed)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement4>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveAccessKeyInvoked)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn Lights(
        &self,
    ) -> ::windows_core::Result<
        super::super::super::Foundation::Collections::IVector<super::Media::XamlLight>,
    > {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Lights)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyTipHorizontalOffset)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyTipHorizontalOffset)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyTipVerticalOffset)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyTipVerticalOffset)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn HighContrastAdjustment(
        &self,
    ) -> ::windows_core::Result<super::ElementHighContrastAdjustment> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .HighContrastAdjustment)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetHighContrastAdjustment(
        &self,
        value: super::ElementHighContrastAdjustment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetHighContrastAdjustment)(
                    ::windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    pub fn RemoveGettingFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveGettingFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveLosingFocus(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveLosingFocus)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveNoFocusCandidateFound)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn StartBringIntoView(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .StartBringIntoView)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn StartBringIntoViewWithOptions<P0>(
        &self,
        options: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::BringIntoViewOptions>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement5>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .StartBringIntoViewWithOptions)(
                    ::windows_core::Interface::as_raw(this),
                    options.into_param().abi(),
                )
                .ok()
        }
    }
    pub fn RemoveCharacterReceived(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveCharacterReceived)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveProcessKeyboardAccelerators)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn RemovePreviewKeyDown(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePreviewKeyDown)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn RemovePreviewKeyUp(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement7>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemovePreviewKeyUp)(::windows_core::Interface::as_raw(this), token)
                .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyTipTarget)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyTipTarget)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> ::windows_core::Result<super::DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .KeyboardAcceleratorPlacementTarget)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(
        &self,
        value: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetKeyboardAcceleratorPlacementTarget)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn BringIntoViewRequested<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<super::super::super::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            super::super::super::Foundation::TypedEventHandler<
                super::UIElement,
                super::BringIntoViewRequestedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .BringIntoViewRequested)(
                    ::windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn RemoveBringIntoViewRequested(
        &self,
        token: super::super::super::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement8>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .RemoveBringIntoViewRequested)(
                    ::windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
        }
    }
    pub fn CanBeScrollAnchor(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CanBeScrollAnchor)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetCanBeScrollAnchor)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn OpacityTransition(&self) -> ::windows_core::Result<super::ScalarTransition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .OpacityTransition)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetOpacityTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::ScalarTransition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetOpacityTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn TranslationTransition(
        &self,
    ) -> ::windows_core::Result<super::Vector3Transition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .TranslationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetTranslationTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Vector3Transition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetTranslationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn Rotation(&self) -> ::windows_core::Result<f32> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .Rotation)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRotation)(::windows_core::Interface::as_raw(this), value)
                .ok()
        }
    }
    pub fn RotationTransition(&self) -> ::windows_core::Result<super::ScalarTransition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .RotationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn SetRotationTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::ScalarTransition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetRotationTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn ScaleTransition(&self) -> ::windows_core::Result<super::Vector3Transition> {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .ScaleTransition)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn SetScaleTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Vector3Transition>,
    {
        let this = &::windows_core::ComInterface::cast::<super::IUIElement9>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .SetScaleTransition)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnDisconnectVisualChildren)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: super::super::super::Foundation::Point,
        boundingrect: super::super::super::Foundation::Rect,
    ) -> ::windows_core::Result<
        super::super::super::Foundation::Collections::IIterable<
            super::super::super::Foundation::Collections::IIterable<
                super::super::super::Foundation::Point,
            >,
        >,
    > {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .FindSubElementsForTouchTargeting)(
                    ::windows_core::Interface::as_raw(this),
                    point,
                    boundingrect,
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> ::windows_core::Result<
        super::super::super::Foundation::Collections::IIterable<super::DependencyObject>,
    > {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides7,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .GetChildrenInTabFocusOrder)(
                    ::windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .from_abi(result__)
        }
    }
    pub fn OnBringIntoViewRequested<P0>(&self, e: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::BringIntoViewRequestedEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<
            super::IUIElementOverrides8,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .OnBringIntoViewRequested)(
                    ::windows_core::Interface::as_raw(this),
                    e.into_param().abi(),
                )
                .ok()
        }
    }
    #[doc(hidden)]
    pub fn ITextBoxStatics<R, F: FnOnce(&ITextBoxStatics) -> ::windows_core::Result<R>>(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<TextBox, ITextBoxStatics> = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn ITextBoxStatics2<
        R,
        F: FnOnce(&ITextBoxStatics2) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<TextBox, ITextBoxStatics2> = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn ITextBoxStatics3<
        R,
        F: FnOnce(&ITextBoxStatics3) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<TextBox, ITextBoxStatics3> = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn ITextBoxStatics5<
        R,
        F: FnOnce(&ITextBoxStatics5) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<TextBox, ITextBoxStatics5> = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn ITextBoxStatics6<
        R,
        F: FnOnce(&ITextBoxStatics6) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<TextBox, ITextBoxStatics6> = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn ITextBoxStatics7<
        R,
        F: FnOnce(&ITextBoxStatics7) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<TextBox, ITextBoxStatics7> = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn ITextBoxStatics8<
        R,
        F: FnOnce(&ITextBoxStatics8) -> ::windows_core::Result<R>,
    >(callback: F) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<TextBox, ITextBoxStatics8> = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn new() -> ::windows_core::Result<TextBox> {
        Self::ITextBoxFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .CreateInstance)(
                    ::windows_core::Interface::as_raw(this),
                    ::core::ptr::null_mut(),
                    &mut ::core::option::Option::<::windows::core::IInspectable>::None
                        as *mut _ as _,
                    &mut result__,
                )
                .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn ITextBoxFactory<R, F: FnOnce(&ITextBoxFactory) -> ::windows_core::Result<R>>(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<TextBox, ITextBoxFactory> = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::cmp::PartialEq for TextBox {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TextBox {}
impl ::core::fmt::Debug for TextBox {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TextBox").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TextBox {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TextBox;{e48f5a8b-1dff-4352-a1f4-e516514ec882})",
    );
}
impl ::core::clone::Clone for TextBox {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TextBox {
    type Vtable = ITextBox_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TextBox {
    const IID: ::windows_core::GUID = <ITextBox as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TextBox {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TextBox";
}
::windows_core::imp::interface_hierarchy!(
    TextBox, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for TextBox {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for TextBox {}
impl ::windows_core::CanTryInto<super::UIElement> for TextBox {}
impl ::windows_core::CanTryInto<super::DependencyObject> for TextBox {}
unsafe impl ::core::marker::Send for TextBox {}
unsafe impl ::core::marker::Sync for TextBox {}
#[repr(transparent)]
pub struct TextBoxBeforeTextChangingEventArgs(::windows_core::IUnknown);
impl TextBoxBeforeTextChangingEventArgs {}
impl ::core::cmp::PartialEq for TextBoxBeforeTextChangingEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TextBoxBeforeTextChangingEventArgs {}
impl ::core::fmt::Debug for TextBoxBeforeTextChangingEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TextBoxBeforeTextChangingEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TextBoxBeforeTextChangingEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TextBoxBeforeTextChangingEventArgs;{a5541db3-7784-4258-aa83-e4bedd727467})",
    );
}
impl ::core::clone::Clone for TextBoxBeforeTextChangingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TextBoxBeforeTextChangingEventArgs {
    type Vtable = ITextBoxBeforeTextChangingEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TextBoxBeforeTextChangingEventArgs {
    const IID: ::windows_core::GUID = <ITextBoxBeforeTextChangingEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TextBoxBeforeTextChangingEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TextBoxBeforeTextChangingEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    TextBoxBeforeTextChangingEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for TextBoxBeforeTextChangingEventArgs {}
unsafe impl ::core::marker::Sync for TextBoxBeforeTextChangingEventArgs {}
#[repr(transparent)]
pub struct TextBoxSelectionChangingEventArgs(::windows_core::IUnknown);
impl TextBoxSelectionChangingEventArgs {}
impl ::core::cmp::PartialEq for TextBoxSelectionChangingEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TextBoxSelectionChangingEventArgs {}
impl ::core::fmt::Debug for TextBoxSelectionChangingEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TextBoxSelectionChangingEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TextBoxSelectionChangingEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TextBoxSelectionChangingEventArgs;{847a24dd-9abe-52df-a80a-0cce4b496632})",
    );
}
impl ::core::clone::Clone for TextBoxSelectionChangingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TextBoxSelectionChangingEventArgs {
    type Vtable = ITextBoxSelectionChangingEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TextBoxSelectionChangingEventArgs {
    const IID: ::windows_core::GUID = <ITextBoxSelectionChangingEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TextBoxSelectionChangingEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TextBoxSelectionChangingEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    TextBoxSelectionChangingEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for TextBoxSelectionChangingEventArgs {}
unsafe impl ::core::marker::Sync for TextBoxSelectionChangingEventArgs {}
#[repr(transparent)]
pub struct TextBoxTextChangingEventArgs(::windows_core::IUnknown);
impl TextBoxTextChangingEventArgs {}
impl ::core::cmp::PartialEq for TextBoxTextChangingEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TextBoxTextChangingEventArgs {}
impl ::core::fmt::Debug for TextBoxTextChangingEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TextBoxTextChangingEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TextBoxTextChangingEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TextBoxTextChangingEventArgs;{4e6a4b75-43dd-4e33-acbe-2d8796a17927})",
    );
}
impl ::core::clone::Clone for TextBoxTextChangingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TextBoxTextChangingEventArgs {
    type Vtable = ITextBoxTextChangingEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TextBoxTextChangingEventArgs {
    const IID: ::windows_core::GUID = <ITextBoxTextChangingEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TextBoxTextChangingEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TextBoxTextChangingEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    TextBoxTextChangingEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for TextBoxTextChangingEventArgs {}
unsafe impl ::core::marker::Sync for TextBoxTextChangingEventArgs {}
#[repr(transparent)]
pub struct TextChangedEventArgs(::windows_core::IUnknown);
impl TextChangedEventArgs {}
impl ::core::cmp::PartialEq for TextChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TextChangedEventArgs {}
impl ::core::fmt::Debug for TextChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TextChangedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TextChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TextChangedEventArgs;{4dd04f7d-7a11-4b2e-9933-577df39252b6})",
    );
}
impl ::core::clone::Clone for TextChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TextChangedEventArgs {
    type Vtable = ITextChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TextChangedEventArgs {
    const IID: ::windows_core::GUID = <ITextChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TextChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TextChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    TextChangedEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::RoutedEventArgs> for TextChangedEventArgs {}
unsafe impl ::core::marker::Send for TextChangedEventArgs {}
unsafe impl ::core::marker::Sync for TextChangedEventArgs {}
#[repr(transparent)]
pub struct TextCommandBarFlyout(::windows_core::IUnknown);
impl TextCommandBarFlyout {}
impl ::core::cmp::PartialEq for TextCommandBarFlyout {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TextCommandBarFlyout {}
impl ::core::fmt::Debug for TextCommandBarFlyout {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TextCommandBarFlyout").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TextCommandBarFlyout {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TextCommandBarFlyout;{90384f66-cd3d-5325-8f40-59b076463c40})",
    );
}
impl ::core::clone::Clone for TextCommandBarFlyout {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TextCommandBarFlyout {
    type Vtable = ITextCommandBarFlyout_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TextCommandBarFlyout {
    const IID: ::windows_core::GUID = <ITextCommandBarFlyout as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TextCommandBarFlyout {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TextCommandBarFlyout";
}
::windows_core::imp::interface_hierarchy!(
    TextCommandBarFlyout, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<CommandBarFlyout> for TextCommandBarFlyout {}
impl ::windows_core::CanTryInto<Primitives::FlyoutBase> for TextCommandBarFlyout {}
impl ::windows_core::CanTryInto<super::DependencyObject> for TextCommandBarFlyout {}
unsafe impl ::core::marker::Send for TextCommandBarFlyout {}
unsafe impl ::core::marker::Sync for TextCommandBarFlyout {}
#[repr(transparent)]
pub struct TextCompositionChangedEventArgs(::windows_core::IUnknown);
impl TextCompositionChangedEventArgs {}
impl ::core::cmp::PartialEq for TextCompositionChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TextCompositionChangedEventArgs {}
impl ::core::fmt::Debug for TextCompositionChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TextCompositionChangedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TextCompositionChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TextCompositionChangedEventArgs;{b9c7e0f2-50b7-441d-990c-68553e2e056b})",
    );
}
impl ::core::clone::Clone for TextCompositionChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TextCompositionChangedEventArgs {
    type Vtable = ITextCompositionChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TextCompositionChangedEventArgs {
    const IID: ::windows_core::GUID = <ITextCompositionChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TextCompositionChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TextCompositionChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    TextCompositionChangedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for TextCompositionChangedEventArgs {}
unsafe impl ::core::marker::Sync for TextCompositionChangedEventArgs {}
#[repr(transparent)]
pub struct TextCompositionEndedEventArgs(::windows_core::IUnknown);
impl TextCompositionEndedEventArgs {}
impl ::core::cmp::PartialEq for TextCompositionEndedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TextCompositionEndedEventArgs {}
impl ::core::fmt::Debug for TextCompositionEndedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TextCompositionEndedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TextCompositionEndedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TextCompositionEndedEventArgs;{46e34db2-77c0-4015-8eb4-92eefdfc5914})",
    );
}
impl ::core::clone::Clone for TextCompositionEndedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TextCompositionEndedEventArgs {
    type Vtable = ITextCompositionEndedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TextCompositionEndedEventArgs {
    const IID: ::windows_core::GUID = <ITextCompositionEndedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TextCompositionEndedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TextCompositionEndedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    TextCompositionEndedEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for TextCompositionEndedEventArgs {}
unsafe impl ::core::marker::Sync for TextCompositionEndedEventArgs {}
#[repr(transparent)]
pub struct TextCompositionStartedEventArgs(::windows_core::IUnknown);
impl TextCompositionStartedEventArgs {}
impl ::core::cmp::PartialEq for TextCompositionStartedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TextCompositionStartedEventArgs {}
impl ::core::fmt::Debug for TextCompositionStartedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TextCompositionStartedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TextCompositionStartedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TextCompositionStartedEventArgs;{df22abb2-10cf-491e-91e8-d3cd72d8a0d3})",
    );
}
impl ::core::clone::Clone for TextCompositionStartedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TextCompositionStartedEventArgs {
    type Vtable = ITextCompositionStartedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TextCompositionStartedEventArgs {
    const IID: ::windows_core::GUID = <ITextCompositionStartedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TextCompositionStartedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TextCompositionStartedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    TextCompositionStartedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for TextCompositionStartedEventArgs {}
unsafe impl ::core::marker::Sync for TextCompositionStartedEventArgs {}
#[repr(transparent)]
pub struct TextControlCopyingToClipboardEventArgs(::windows_core::IUnknown);
impl TextControlCopyingToClipboardEventArgs {}
impl ::core::cmp::PartialEq for TextControlCopyingToClipboardEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TextControlCopyingToClipboardEventArgs {}
impl ::core::fmt::Debug for TextControlCopyingToClipboardEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TextControlCopyingToClipboardEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TextControlCopyingToClipboardEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs;{e405ef19-d0df-43da-ace6-16f9113868c3})",
    );
}
impl ::core::clone::Clone for TextControlCopyingToClipboardEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TextControlCopyingToClipboardEventArgs {
    type Vtable = ITextControlCopyingToClipboardEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TextControlCopyingToClipboardEventArgs {
    const IID: ::windows_core::GUID = <ITextControlCopyingToClipboardEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TextControlCopyingToClipboardEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    TextControlCopyingToClipboardEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for TextControlCopyingToClipboardEventArgs {}
unsafe impl ::core::marker::Sync for TextControlCopyingToClipboardEventArgs {}
#[repr(transparent)]
pub struct TextControlCuttingToClipboardEventArgs(::windows_core::IUnknown);
impl TextControlCuttingToClipboardEventArgs {}
impl ::core::cmp::PartialEq for TextControlCuttingToClipboardEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TextControlCuttingToClipboardEventArgs {}
impl ::core::fmt::Debug for TextControlCuttingToClipboardEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TextControlCuttingToClipboardEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TextControlCuttingToClipboardEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs;{5f894995-a58d-4cf3-b589-b5e500e06475})",
    );
}
impl ::core::clone::Clone for TextControlCuttingToClipboardEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TextControlCuttingToClipboardEventArgs {
    type Vtable = ITextControlCuttingToClipboardEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TextControlCuttingToClipboardEventArgs {
    const IID: ::windows_core::GUID = <ITextControlCuttingToClipboardEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TextControlCuttingToClipboardEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    TextControlCuttingToClipboardEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for TextControlCuttingToClipboardEventArgs {}
unsafe impl ::core::marker::Sync for TextControlCuttingToClipboardEventArgs {}
#[repr(transparent)]
pub struct TextControlPasteEventArgs(::windows_core::IUnknown);
impl TextControlPasteEventArgs {}
impl ::core::cmp::PartialEq for TextControlPasteEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TextControlPasteEventArgs {}
impl ::core::fmt::Debug for TextControlPasteEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TextControlPasteEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TextControlPasteEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TextControlPasteEventArgs;{4bd1d625-221a-477e-bb2c-ad0c1ed125e7})",
    );
}
impl ::core::clone::Clone for TextControlPasteEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TextControlPasteEventArgs {
    type Vtable = ITextControlPasteEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TextControlPasteEventArgs {
    const IID: ::windows_core::GUID = <ITextControlPasteEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TextControlPasteEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TextControlPasteEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    TextControlPasteEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for TextControlPasteEventArgs {}
unsafe impl ::core::marker::Sync for TextControlPasteEventArgs {}
#[repr(transparent)]
pub struct TimePickedEventArgs(::windows_core::IUnknown);
impl TimePickedEventArgs {}
impl ::core::cmp::PartialEq for TimePickedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TimePickedEventArgs {}
impl ::core::fmt::Debug for TimePickedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TimePickedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TimePickedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TimePickedEventArgs;{8ad3ff21-5f66-4785-b999-24fef39fb6db})",
    );
}
impl ::core::clone::Clone for TimePickedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TimePickedEventArgs {
    type Vtable = ITimePickedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TimePickedEventArgs {
    const IID: ::windows_core::GUID = <ITimePickedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TimePickedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TimePickedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    TimePickedEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::DependencyObject> for TimePickedEventArgs {}
unsafe impl ::core::marker::Send for TimePickedEventArgs {}
unsafe impl ::core::marker::Sync for TimePickedEventArgs {}
#[repr(transparent)]
pub struct TimePicker(::windows_core::IUnknown);
impl TimePicker {}
impl ::core::cmp::PartialEq for TimePicker {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TimePicker {}
impl ::core::fmt::Debug for TimePicker {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TimePicker").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TimePicker {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TimePicker;{e39099f2-3aff-4792-909e-2d9941ec0357})",
    );
}
impl ::core::clone::Clone for TimePicker {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TimePicker {
    type Vtable = ITimePicker_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TimePicker {
    const IID: ::windows_core::GUID = <ITimePicker as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TimePicker {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TimePicker";
}
::windows_core::imp::interface_hierarchy!(
    TimePicker, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for TimePicker {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for TimePicker {}
impl ::windows_core::CanTryInto<super::UIElement> for TimePicker {}
impl ::windows_core::CanTryInto<super::DependencyObject> for TimePicker {}
unsafe impl ::core::marker::Send for TimePicker {}
unsafe impl ::core::marker::Sync for TimePicker {}
#[repr(transparent)]
pub struct TimePickerFlyout(::windows_core::IUnknown);
impl TimePickerFlyout {}
impl ::core::cmp::PartialEq for TimePickerFlyout {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TimePickerFlyout {}
impl ::core::fmt::Debug for TimePickerFlyout {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TimePickerFlyout").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TimePickerFlyout {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TimePickerFlyout;{bb739d75-e836-439e-86d5-506d2d18e404})",
    );
}
impl ::core::clone::Clone for TimePickerFlyout {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TimePickerFlyout {
    type Vtable = ITimePickerFlyout_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TimePickerFlyout {
    const IID: ::windows_core::GUID = <ITimePickerFlyout as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TimePickerFlyout {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TimePickerFlyout";
}
::windows_core::imp::interface_hierarchy!(
    TimePickerFlyout, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Primitives::PickerFlyoutBase> for TimePickerFlyout {}
impl ::windows_core::CanTryInto<Primitives::FlyoutBase> for TimePickerFlyout {}
impl ::windows_core::CanTryInto<super::DependencyObject> for TimePickerFlyout {}
unsafe impl ::core::marker::Send for TimePickerFlyout {}
unsafe impl ::core::marker::Sync for TimePickerFlyout {}
#[repr(transparent)]
pub struct TimePickerFlyoutPresenter(::windows_core::IUnknown);
impl TimePickerFlyoutPresenter {}
impl ::core::cmp::PartialEq for TimePickerFlyoutPresenter {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TimePickerFlyoutPresenter {}
impl ::core::fmt::Debug for TimePickerFlyoutPresenter {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TimePickerFlyoutPresenter").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TimePickerFlyoutPresenter {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TimePickerFlyoutPresenter;{c5320638-7a18-40ed-9fd0-4c852c09b24e})",
    );
}
impl ::core::clone::Clone for TimePickerFlyoutPresenter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TimePickerFlyoutPresenter {
    type Vtable = ITimePickerFlyoutPresenter_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TimePickerFlyoutPresenter {
    const IID: ::windows_core::GUID = <ITimePickerFlyoutPresenter as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TimePickerFlyoutPresenter {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TimePickerFlyoutPresenter";
}
::windows_core::imp::interface_hierarchy!(
    TimePickerFlyoutPresenter, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for TimePickerFlyoutPresenter {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for TimePickerFlyoutPresenter {}
impl ::windows_core::CanTryInto<super::UIElement> for TimePickerFlyoutPresenter {}
impl ::windows_core::CanTryInto<super::DependencyObject> for TimePickerFlyoutPresenter {}
unsafe impl ::core::marker::Send for TimePickerFlyoutPresenter {}
unsafe impl ::core::marker::Sync for TimePickerFlyoutPresenter {}
#[repr(transparent)]
pub struct TimePickerSelectedValueChangedEventArgs(::windows_core::IUnknown);
impl TimePickerSelectedValueChangedEventArgs {}
impl ::core::cmp::PartialEq for TimePickerSelectedValueChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TimePickerSelectedValueChangedEventArgs {}
impl ::core::fmt::Debug for TimePickerSelectedValueChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TimePickerSelectedValueChangedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TimePickerSelectedValueChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TimePickerSelectedValueChangedEventArgs;{6e20fb35-3b9b-5bb6-9888-266524db181e})",
    );
}
impl ::core::clone::Clone for TimePickerSelectedValueChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TimePickerSelectedValueChangedEventArgs {
    type Vtable = ITimePickerSelectedValueChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TimePickerSelectedValueChangedEventArgs {
    const IID: ::windows_core::GUID = <ITimePickerSelectedValueChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TimePickerSelectedValueChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TimePickerSelectedValueChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    TimePickerSelectedValueChangedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for TimePickerSelectedValueChangedEventArgs {}
unsafe impl ::core::marker::Sync for TimePickerSelectedValueChangedEventArgs {}
#[repr(transparent)]
pub struct TimePickerValueChangedEventArgs(::windows_core::IUnknown);
impl TimePickerValueChangedEventArgs {}
impl ::core::cmp::PartialEq for TimePickerValueChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TimePickerValueChangedEventArgs {}
impl ::core::fmt::Debug for TimePickerValueChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TimePickerValueChangedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TimePickerValueChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TimePickerValueChangedEventArgs;{2f4edb8d-b995-4e31-8ba9-c4dcdeb21ca3})",
    );
}
impl ::core::clone::Clone for TimePickerValueChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TimePickerValueChangedEventArgs {
    type Vtable = ITimePickerValueChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TimePickerValueChangedEventArgs {
    const IID: ::windows_core::GUID = <ITimePickerValueChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TimePickerValueChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TimePickerValueChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    TimePickerValueChangedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for TimePickerValueChangedEventArgs {}
unsafe impl ::core::marker::Sync for TimePickerValueChangedEventArgs {}
#[repr(transparent)]
pub struct ToggleMenuFlyoutItem(::windows_core::IUnknown);
impl ToggleMenuFlyoutItem {}
impl ::core::cmp::PartialEq for ToggleMenuFlyoutItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ToggleMenuFlyoutItem {}
impl ::core::fmt::Debug for ToggleMenuFlyoutItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ToggleMenuFlyoutItem").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ToggleMenuFlyoutItem {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ToggleMenuFlyoutItem;{49841edd-88e9-4663-a701-cd4fd25e398f})",
    );
}
impl ::core::clone::Clone for ToggleMenuFlyoutItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ToggleMenuFlyoutItem {
    type Vtable = IToggleMenuFlyoutItem_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ToggleMenuFlyoutItem {
    const IID: ::windows_core::GUID = <IToggleMenuFlyoutItem as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ToggleMenuFlyoutItem {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ToggleMenuFlyoutItem";
}
::windows_core::imp::interface_hierarchy!(
    ToggleMenuFlyoutItem, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<MenuFlyoutItem> for ToggleMenuFlyoutItem {}
impl ::windows_core::CanTryInto<MenuFlyoutItemBase> for ToggleMenuFlyoutItem {}
impl ::windows_core::CanTryInto<Control> for ToggleMenuFlyoutItem {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ToggleMenuFlyoutItem {}
impl ::windows_core::CanTryInto<super::UIElement> for ToggleMenuFlyoutItem {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ToggleMenuFlyoutItem {}
unsafe impl ::core::marker::Send for ToggleMenuFlyoutItem {}
unsafe impl ::core::marker::Sync for ToggleMenuFlyoutItem {}
#[repr(transparent)]
pub struct ToggleSplitButton(::windows_core::IUnknown);
impl ToggleSplitButton {}
impl ::core::cmp::PartialEq for ToggleSplitButton {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ToggleSplitButton {}
impl ::core::fmt::Debug for ToggleSplitButton {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ToggleSplitButton").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ToggleSplitButton {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ToggleSplitButton;{28981b31-8e78-570c-bebb-685814485ae9})",
    );
}
impl ::core::clone::Clone for ToggleSplitButton {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ToggleSplitButton {
    type Vtable = IToggleSplitButton_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ToggleSplitButton {
    const IID: ::windows_core::GUID = <IToggleSplitButton as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ToggleSplitButton {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ToggleSplitButton";
}
::windows_core::imp::interface_hierarchy!(
    ToggleSplitButton, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<SplitButton> for ToggleSplitButton {}
impl ::windows_core::CanTryInto<ContentControl> for ToggleSplitButton {}
impl ::windows_core::CanTryInto<Control> for ToggleSplitButton {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ToggleSplitButton {}
impl ::windows_core::CanTryInto<super::UIElement> for ToggleSplitButton {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ToggleSplitButton {}
unsafe impl ::core::marker::Send for ToggleSplitButton {}
unsafe impl ::core::marker::Sync for ToggleSplitButton {}
#[repr(transparent)]
pub struct ToggleSplitButtonAutomationPeer(::windows_core::IUnknown);
impl ToggleSplitButtonAutomationPeer {}
impl ::core::cmp::PartialEq for ToggleSplitButtonAutomationPeer {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ToggleSplitButtonAutomationPeer {}
impl ::core::fmt::Debug for ToggleSplitButtonAutomationPeer {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ToggleSplitButtonAutomationPeer").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ToggleSplitButtonAutomationPeer {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ToggleSplitButtonAutomationPeer;{538e61de-7d46-5da7-94ab-acede6a12b9e})",
    );
}
impl ::core::clone::Clone for ToggleSplitButtonAutomationPeer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ToggleSplitButtonAutomationPeer {
    type Vtable = IToggleSplitButtonAutomationPeer_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ToggleSplitButtonAutomationPeer {
    const IID: ::windows_core::GUID = <IToggleSplitButtonAutomationPeer as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ToggleSplitButtonAutomationPeer {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ToggleSplitButtonAutomationPeer";
}
::windows_core::imp::interface_hierarchy!(
    ToggleSplitButtonAutomationPeer, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::DependencyObject>
for ToggleSplitButtonAutomationPeer {}
unsafe impl ::core::marker::Send for ToggleSplitButtonAutomationPeer {}
unsafe impl ::core::marker::Sync for ToggleSplitButtonAutomationPeer {}
#[repr(transparent)]
pub struct ToggleSplitButtonIsCheckedChangedEventArgs(::windows_core::IUnknown);
impl ToggleSplitButtonIsCheckedChangedEventArgs {}
impl ::core::cmp::PartialEq for ToggleSplitButtonIsCheckedChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ToggleSplitButtonIsCheckedChangedEventArgs {}
impl ::core::fmt::Debug for ToggleSplitButtonIsCheckedChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ToggleSplitButtonIsCheckedChangedEventArgs")
            .field(&self.0)
            .finish()
    }
}
impl ::windows_core::RuntimeType for ToggleSplitButtonIsCheckedChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ToggleSplitButtonIsCheckedChangedEventArgs;{2138f0cf-5fcd-5dbb-99ae-359483070f6b})",
    );
}
impl ::core::clone::Clone for ToggleSplitButtonIsCheckedChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ToggleSplitButtonIsCheckedChangedEventArgs {
    type Vtable = IToggleSplitButtonIsCheckedChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ToggleSplitButtonIsCheckedChangedEventArgs {
    const IID: ::windows_core::GUID = <IToggleSplitButtonIsCheckedChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ToggleSplitButtonIsCheckedChangedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ToggleSplitButtonIsCheckedChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    ToggleSplitButtonIsCheckedChangedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ToggleSplitButtonIsCheckedChangedEventArgs {}
unsafe impl ::core::marker::Sync for ToggleSplitButtonIsCheckedChangedEventArgs {}
#[repr(transparent)]
pub struct ToggleSwitch(::windows_core::IUnknown);
impl ToggleSwitch {}
impl ::core::cmp::PartialEq for ToggleSwitch {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ToggleSwitch {}
impl ::core::fmt::Debug for ToggleSwitch {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ToggleSwitch").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ToggleSwitch {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ToggleSwitch;{331d8f00-c5f9-46a5-b6c8-ede539304567})",
    );
}
impl ::core::clone::Clone for ToggleSwitch {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ToggleSwitch {
    type Vtable = IToggleSwitch_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ToggleSwitch {
    const IID: ::windows_core::GUID = <IToggleSwitch as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ToggleSwitch {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ToggleSwitch";
}
::windows_core::imp::interface_hierarchy!(
    ToggleSwitch, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for ToggleSwitch {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ToggleSwitch {}
impl ::windows_core::CanTryInto<super::UIElement> for ToggleSwitch {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ToggleSwitch {}
unsafe impl ::core::marker::Send for ToggleSwitch {}
unsafe impl ::core::marker::Sync for ToggleSwitch {}
#[repr(transparent)]
pub struct ToolTip(::windows_core::IUnknown);
impl ToolTip {}
impl ::core::cmp::PartialEq for ToolTip {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ToolTip {}
impl ::core::fmt::Debug for ToolTip {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ToolTip").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ToolTip {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ToolTip;{7de5d75f-4415-429f-b523-699bdb8c30db})",
    );
}
impl ::core::clone::Clone for ToolTip {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ToolTip {
    type Vtable = IToolTip_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ToolTip {
    const IID: ::windows_core::GUID = <IToolTip as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ToolTip {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ToolTip";
}
::windows_core::imp::interface_hierarchy!(
    ToolTip, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ContentControl> for ToolTip {}
impl ::windows_core::CanTryInto<Control> for ToolTip {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for ToolTip {}
impl ::windows_core::CanTryInto<super::UIElement> for ToolTip {}
impl ::windows_core::CanTryInto<super::DependencyObject> for ToolTip {}
unsafe impl ::core::marker::Send for ToolTip {}
unsafe impl ::core::marker::Sync for ToolTip {}
#[repr(transparent)]
pub struct ToolTipService(::windows_core::IUnknown);
impl ToolTipService {}
impl ::core::cmp::PartialEq for ToolTipService {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ToolTipService {}
impl ::core::fmt::Debug for ToolTipService {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ToolTipService").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ToolTipService {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.ToolTipService;{03a55f87-bfcc-4a1e-8fea-98f610832cea})",
    );
}
impl ::core::clone::Clone for ToolTipService {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for ToolTipService {
    type Vtable = IToolTipService_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ToolTipService {
    const IID: ::windows_core::GUID = <IToolTipService as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ToolTipService {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.ToolTipService";
}
::windows_core::imp::interface_hierarchy!(
    ToolTipService, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ToolTipService {}
unsafe impl ::core::marker::Sync for ToolTipService {}
#[repr(transparent)]
pub struct TreeView(::windows_core::IUnknown);
impl TreeView {}
impl ::core::cmp::PartialEq for TreeView {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TreeView {}
impl ::core::fmt::Debug for TreeView {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TreeView").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TreeView {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TreeView;{9353cc5c-dd6e-453c-aedd-0c3ac993978b})",
    );
}
impl ::core::clone::Clone for TreeView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TreeView {
    type Vtable = ITreeView_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TreeView {
    const IID: ::windows_core::GUID = <ITreeView as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TreeView {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TreeView";
}
::windows_core::imp::interface_hierarchy!(
    TreeView, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for TreeView {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for TreeView {}
impl ::windows_core::CanTryInto<super::UIElement> for TreeView {}
impl ::windows_core::CanTryInto<super::DependencyObject> for TreeView {}
unsafe impl ::core::marker::Send for TreeView {}
unsafe impl ::core::marker::Sync for TreeView {}
#[repr(transparent)]
pub struct TreeViewCollapsedEventArgs(::windows_core::IUnknown);
impl TreeViewCollapsedEventArgs {}
impl ::core::cmp::PartialEq for TreeViewCollapsedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TreeViewCollapsedEventArgs {}
impl ::core::fmt::Debug for TreeViewCollapsedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TreeViewCollapsedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TreeViewCollapsedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TreeViewCollapsedEventArgs;{391db3b0-1e58-4539-9e93-387978f46cce})",
    );
}
impl ::core::clone::Clone for TreeViewCollapsedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TreeViewCollapsedEventArgs {
    type Vtable = ITreeViewCollapsedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TreeViewCollapsedEventArgs {
    const IID: ::windows_core::GUID = <ITreeViewCollapsedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TreeViewCollapsedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TreeViewCollapsedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    TreeViewCollapsedEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for TreeViewCollapsedEventArgs {}
unsafe impl ::core::marker::Sync for TreeViewCollapsedEventArgs {}
#[repr(transparent)]
pub struct TreeViewDragItemsCompletedEventArgs(::windows_core::IUnknown);
impl TreeViewDragItemsCompletedEventArgs {}
impl ::core::cmp::PartialEq for TreeViewDragItemsCompletedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TreeViewDragItemsCompletedEventArgs {}
impl ::core::fmt::Debug for TreeViewDragItemsCompletedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TreeViewDragItemsCompletedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TreeViewDragItemsCompletedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TreeViewDragItemsCompletedEventArgs;{3ca8632c-4311-574e-8ab4-3b7aa5de7a88})",
    );
}
impl ::core::clone::Clone for TreeViewDragItemsCompletedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TreeViewDragItemsCompletedEventArgs {
    type Vtable = ITreeViewDragItemsCompletedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TreeViewDragItemsCompletedEventArgs {
    const IID: ::windows_core::GUID = <ITreeViewDragItemsCompletedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TreeViewDragItemsCompletedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TreeViewDragItemsCompletedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    TreeViewDragItemsCompletedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for TreeViewDragItemsCompletedEventArgs {}
unsafe impl ::core::marker::Sync for TreeViewDragItemsCompletedEventArgs {}
#[repr(transparent)]
pub struct TreeViewDragItemsStartingEventArgs(::windows_core::IUnknown);
impl TreeViewDragItemsStartingEventArgs {}
impl ::core::cmp::PartialEq for TreeViewDragItemsStartingEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TreeViewDragItemsStartingEventArgs {}
impl ::core::fmt::Debug for TreeViewDragItemsStartingEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TreeViewDragItemsStartingEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TreeViewDragItemsStartingEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TreeViewDragItemsStartingEventArgs;{7bdb7ec4-e125-5773-9a3f-6695233d6250})",
    );
}
impl ::core::clone::Clone for TreeViewDragItemsStartingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TreeViewDragItemsStartingEventArgs {
    type Vtable = ITreeViewDragItemsStartingEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TreeViewDragItemsStartingEventArgs {
    const IID: ::windows_core::GUID = <ITreeViewDragItemsStartingEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TreeViewDragItemsStartingEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TreeViewDragItemsStartingEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    TreeViewDragItemsStartingEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for TreeViewDragItemsStartingEventArgs {}
unsafe impl ::core::marker::Sync for TreeViewDragItemsStartingEventArgs {}
#[repr(transparent)]
pub struct TreeViewExpandingEventArgs(::windows_core::IUnknown);
impl TreeViewExpandingEventArgs {}
impl ::core::cmp::PartialEq for TreeViewExpandingEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TreeViewExpandingEventArgs {}
impl ::core::fmt::Debug for TreeViewExpandingEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TreeViewExpandingEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TreeViewExpandingEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TreeViewExpandingEventArgs;{c5e1fa63-4154-49d2-a21f-c34176605e3a})",
    );
}
impl ::core::clone::Clone for TreeViewExpandingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TreeViewExpandingEventArgs {
    type Vtable = ITreeViewExpandingEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TreeViewExpandingEventArgs {
    const IID: ::windows_core::GUID = <ITreeViewExpandingEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TreeViewExpandingEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TreeViewExpandingEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    TreeViewExpandingEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for TreeViewExpandingEventArgs {}
unsafe impl ::core::marker::Sync for TreeViewExpandingEventArgs {}
#[repr(transparent)]
pub struct TreeViewItem(::windows_core::IUnknown);
impl TreeViewItem {}
impl ::core::cmp::PartialEq for TreeViewItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TreeViewItem {}
impl ::core::fmt::Debug for TreeViewItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TreeViewItem").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TreeViewItem {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TreeViewItem;{4e05d3e6-6167-44e7-9c74-291ddd6df6eb})",
    );
}
impl ::core::clone::Clone for TreeViewItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TreeViewItem {
    type Vtable = ITreeViewItem_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TreeViewItem {
    const IID: ::windows_core::GUID = <ITreeViewItem as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TreeViewItem {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TreeViewItem";
}
::windows_core::imp::interface_hierarchy!(
    TreeViewItem, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ListViewItem> for TreeViewItem {}
impl ::windows_core::CanTryInto<Primitives::SelectorItem> for TreeViewItem {}
impl ::windows_core::CanTryInto<ContentControl> for TreeViewItem {}
impl ::windows_core::CanTryInto<Control> for TreeViewItem {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for TreeViewItem {}
impl ::windows_core::CanTryInto<super::UIElement> for TreeViewItem {}
impl ::windows_core::CanTryInto<super::DependencyObject> for TreeViewItem {}
unsafe impl ::core::marker::Send for TreeViewItem {}
unsafe impl ::core::marker::Sync for TreeViewItem {}
#[repr(transparent)]
pub struct TreeViewItemInvokedEventArgs(::windows_core::IUnknown);
impl TreeViewItemInvokedEventArgs {}
impl ::core::cmp::PartialEq for TreeViewItemInvokedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TreeViewItemInvokedEventArgs {}
impl ::core::fmt::Debug for TreeViewItemInvokedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TreeViewItemInvokedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TreeViewItemInvokedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TreeViewItemInvokedEventArgs;{472ab521-0242-4290-9363-ab4fe704527f})",
    );
}
impl ::core::clone::Clone for TreeViewItemInvokedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TreeViewItemInvokedEventArgs {
    type Vtable = ITreeViewItemInvokedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TreeViewItemInvokedEventArgs {
    const IID: ::windows_core::GUID = <ITreeViewItemInvokedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TreeViewItemInvokedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TreeViewItemInvokedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    TreeViewItemInvokedEventArgs, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for TreeViewItemInvokedEventArgs {}
unsafe impl ::core::marker::Sync for TreeViewItemInvokedEventArgs {}
#[repr(transparent)]
pub struct TreeViewItemTemplateSettings(::windows_core::IUnknown);
impl TreeViewItemTemplateSettings {}
impl ::core::cmp::PartialEq for TreeViewItemTemplateSettings {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TreeViewItemTemplateSettings {}
impl ::core::fmt::Debug for TreeViewItemTemplateSettings {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TreeViewItemTemplateSettings").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TreeViewItemTemplateSettings {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TreeViewItemTemplateSettings;{ec323744-de31-4936-bfc2-1cb37ba1dc08})",
    );
}
impl ::core::clone::Clone for TreeViewItemTemplateSettings {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TreeViewItemTemplateSettings {
    type Vtable = ITreeViewItemTemplateSettings_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TreeViewItemTemplateSettings {
    const IID: ::windows_core::GUID = <ITreeViewItemTemplateSettings as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TreeViewItemTemplateSettings {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TreeViewItemTemplateSettings";
}
::windows_core::imp::interface_hierarchy!(
    TreeViewItemTemplateSettings, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::DependencyObject>
for TreeViewItemTemplateSettings {}
unsafe impl ::core::marker::Send for TreeViewItemTemplateSettings {}
unsafe impl ::core::marker::Sync for TreeViewItemTemplateSettings {}
#[repr(transparent)]
pub struct TreeViewList(::windows_core::IUnknown);
impl TreeViewList {}
impl ::core::cmp::PartialEq for TreeViewList {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TreeViewList {}
impl ::core::fmt::Debug for TreeViewList {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TreeViewList").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TreeViewList {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TreeViewList;{0f00a54e-099a-47a5-a942-94692b01f452})",
    );
}
impl ::core::clone::Clone for TreeViewList {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TreeViewList {
    type Vtable = ITreeViewList_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TreeViewList {
    const IID: ::windows_core::GUID = <ITreeViewList as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TreeViewList {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TreeViewList";
}
::windows_core::imp::interface_hierarchy!(
    TreeViewList, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IItemContainerMapping> for TreeViewList {}
impl ::windows_core::CanTryInto<ISemanticZoomInformation> for TreeViewList {}
impl ::windows_core::CanTryInto<ListView> for TreeViewList {}
impl ::windows_core::CanTryInto<ListViewBase> for TreeViewList {}
impl ::windows_core::CanTryInto<Primitives::Selector> for TreeViewList {}
impl ::windows_core::CanTryInto<ItemsControl> for TreeViewList {}
impl ::windows_core::CanTryInto<Control> for TreeViewList {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for TreeViewList {}
impl ::windows_core::CanTryInto<super::UIElement> for TreeViewList {}
impl ::windows_core::CanTryInto<super::DependencyObject> for TreeViewList {}
unsafe impl ::core::marker::Send for TreeViewList {}
unsafe impl ::core::marker::Sync for TreeViewList {}
#[repr(transparent)]
pub struct TreeViewNode(::windows_core::IUnknown);
impl TreeViewNode {}
impl ::core::cmp::PartialEq for TreeViewNode {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TreeViewNode {}
impl ::core::fmt::Debug for TreeViewNode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TreeViewNode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TreeViewNode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TreeViewNode;{c04c8ed3-9af2-4e75-a329-7497a110e7a8})",
    );
}
impl ::core::clone::Clone for TreeViewNode {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TreeViewNode {
    type Vtable = ITreeViewNode_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TreeViewNode {
    const IID: ::windows_core::GUID = <ITreeViewNode as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TreeViewNode {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TreeViewNode";
}
::windows_core::imp::interface_hierarchy!(
    TreeViewNode, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::DependencyObject> for TreeViewNode {}
unsafe impl ::core::marker::Send for TreeViewNode {}
unsafe impl ::core::marker::Sync for TreeViewNode {}
#[repr(transparent)]
pub struct TwoPaneView(::windows_core::IUnknown);
impl TwoPaneView {}
impl ::core::cmp::PartialEq for TwoPaneView {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TwoPaneView {}
impl ::core::fmt::Debug for TwoPaneView {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TwoPaneView").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TwoPaneView {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.TwoPaneView;{1b4d0db5-14ad-5926-bb8a-5b0a5c0085f0})",
    );
}
impl ::core::clone::Clone for TwoPaneView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for TwoPaneView {
    type Vtable = ITwoPaneView_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TwoPaneView {
    const IID: ::windows_core::GUID = <ITwoPaneView as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TwoPaneView {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.TwoPaneView";
}
::windows_core::imp::interface_hierarchy!(
    TwoPaneView, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for TwoPaneView {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for TwoPaneView {}
impl ::windows_core::CanTryInto<super::UIElement> for TwoPaneView {}
impl ::windows_core::CanTryInto<super::DependencyObject> for TwoPaneView {}
unsafe impl ::core::marker::Send for TwoPaneView {}
unsafe impl ::core::marker::Sync for TwoPaneView {}
#[repr(transparent)]
pub struct UIElementCollection(::windows_core::IUnknown);
impl UIElementCollection {
    pub fn First(
        &self,
    ) -> ::windows_core::Result<
        super::super::super::Foundation::Collections::IIterator<super::UIElement>,
    > {
        let this = &::windows_core::ComInterface::cast::<
            super::super::super::Foundation::Collections::IIterable<super::UIElement>,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this)
                .First)(::windows_core::Interface::as_raw(this), &mut result__)
                .from_abi(result__)
        }
    }
    pub fn Append<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::UIElement>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this)
                .Append)(
                    ::windows_core::Interface::as_raw(this),
                    value.try_into_param()?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::cmp::PartialEq for UIElementCollection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for UIElementCollection {}
impl ::core::fmt::Debug for UIElementCollection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("UIElementCollection").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for UIElementCollection {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.UIElementCollection;pinterface({913337e9-11a1-4345-a3a2-4e7f956e222d};rc(Windows.UI.Xaml.UIElement;{676d0be9-b65c-41c6-ba40-58cf87f201c1})))",
    );
}
impl ::core::clone::Clone for UIElementCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for UIElementCollection {
    type Vtable = super::super::super::Foundation::Collections::IVector_Vtbl<
        super::UIElement,
    >;
}
unsafe impl ::windows_core::ComInterface for UIElementCollection {
    const IID: ::windows_core::GUID = <super::super::super::Foundation::Collections::IVector<
        super::UIElement,
    > as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for UIElementCollection {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.UIElementCollection";
}
impl ::core::iter::IntoIterator for UIElementCollection {
    type Item = super::UIElement;
    type IntoIter = super::super::super::Foundation::Collections::VectorIterator<
        Self::Item,
    >;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
impl ::core::iter::IntoIterator for &UIElementCollection {
    type Item = super::UIElement;
    type IntoIter = super::super::super::Foundation::Collections::VectorIterator<
        Self::Item,
    >;
    fn into_iter(self) -> Self::IntoIter {
        super::super::super::Foundation::Collections::VectorIterator::new(
            ::windows_core::ComInterface::cast(self).ok(),
        )
    }
}
::windows_core::imp::interface_hierarchy!(
    UIElementCollection, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<
    super::super::super::Foundation::Collections::IIterable<super::UIElement>,
> for UIElementCollection {}
impl ::windows_core::CanTryInto<
    super::super::super::Foundation::Collections::IVector<super::UIElement>,
> for UIElementCollection {}
unsafe impl ::core::marker::Send for UIElementCollection {}
unsafe impl ::core::marker::Sync for UIElementCollection {}
#[repr(transparent)]
pub struct UserControl(::windows_core::IUnknown);
impl UserControl {}
impl ::core::cmp::PartialEq for UserControl {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for UserControl {}
impl ::core::fmt::Debug for UserControl {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("UserControl").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for UserControl {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.UserControl;{a7a69ec9-ea35-4679-bf29-f4f09286d314})",
    );
}
impl ::core::clone::Clone for UserControl {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for UserControl {
    type Vtable = IUserControl_Vtbl;
}
unsafe impl ::windows_core::ComInterface for UserControl {
    const IID: ::windows_core::GUID = <IUserControl as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for UserControl {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.UserControl";
}
::windows_core::imp::interface_hierarchy!(
    UserControl, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Control> for UserControl {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for UserControl {}
impl ::windows_core::CanTryInto<super::UIElement> for UserControl {}
impl ::windows_core::CanTryInto<super::DependencyObject> for UserControl {}
unsafe impl ::core::marker::Send for UserControl {}
unsafe impl ::core::marker::Sync for UserControl {}
#[repr(transparent)]
pub struct VariableSizedWrapGrid(::windows_core::IUnknown);
impl VariableSizedWrapGrid {}
impl ::core::cmp::PartialEq for VariableSizedWrapGrid {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for VariableSizedWrapGrid {}
impl ::core::fmt::Debug for VariableSizedWrapGrid {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("VariableSizedWrapGrid").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for VariableSizedWrapGrid {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.VariableSizedWrapGrid;{9ca507c7-23c9-4f01-b80f-be5c21eef474})",
    );
}
impl ::core::clone::Clone for VariableSizedWrapGrid {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for VariableSizedWrapGrid {
    type Vtable = IVariableSizedWrapGrid_Vtbl;
}
unsafe impl ::windows_core::ComInterface for VariableSizedWrapGrid {
    const IID: ::windows_core::GUID = <IVariableSizedWrapGrid as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for VariableSizedWrapGrid {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.VariableSizedWrapGrid";
}
::windows_core::imp::interface_hierarchy!(
    VariableSizedWrapGrid, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Panel> for VariableSizedWrapGrid {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for VariableSizedWrapGrid {}
impl ::windows_core::CanTryInto<super::UIElement> for VariableSizedWrapGrid {}
impl ::windows_core::CanTryInto<super::DependencyObject> for VariableSizedWrapGrid {}
unsafe impl ::core::marker::Send for VariableSizedWrapGrid {}
unsafe impl ::core::marker::Sync for VariableSizedWrapGrid {}
#[repr(transparent)]
pub struct Viewbox(::windows_core::IUnknown);
impl Viewbox {}
impl ::core::cmp::PartialEq for Viewbox {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Viewbox {}
impl ::core::fmt::Debug for Viewbox {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Viewbox").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for Viewbox {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.Viewbox;{05252c58-ba9d-4809-9ec3-fa0d16710ba1})",
    );
}
impl ::core::clone::Clone for Viewbox {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for Viewbox {
    type Vtable = IViewbox_Vtbl;
}
unsafe impl ::windows_core::ComInterface for Viewbox {
    const IID: ::windows_core::GUID = <IViewbox as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for Viewbox {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.Viewbox";
}
::windows_core::imp::interface_hierarchy!(
    Viewbox, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::FrameworkElement> for Viewbox {}
impl ::windows_core::CanTryInto<super::UIElement> for Viewbox {}
impl ::windows_core::CanTryInto<super::DependencyObject> for Viewbox {}
unsafe impl ::core::marker::Send for Viewbox {}
unsafe impl ::core::marker::Sync for Viewbox {}
#[repr(transparent)]
pub struct VirtualizingPanel(::windows_core::IUnknown);
impl VirtualizingPanel {}
impl ::core::cmp::PartialEq for VirtualizingPanel {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for VirtualizingPanel {}
impl ::core::fmt::Debug for VirtualizingPanel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("VirtualizingPanel").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for VirtualizingPanel {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.VirtualizingPanel;{38aad50c-12cf-4d1e-a884-c9df85f07cd9})",
    );
}
impl ::core::clone::Clone for VirtualizingPanel {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for VirtualizingPanel {
    type Vtable = IVirtualizingPanel_Vtbl;
}
unsafe impl ::windows_core::ComInterface for VirtualizingPanel {
    const IID: ::windows_core::GUID = <IVirtualizingPanel as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for VirtualizingPanel {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.VirtualizingPanel";
}
::windows_core::imp::interface_hierarchy!(
    VirtualizingPanel, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<Panel> for VirtualizingPanel {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for VirtualizingPanel {}
impl ::windows_core::CanTryInto<super::UIElement> for VirtualizingPanel {}
impl ::windows_core::CanTryInto<super::DependencyObject> for VirtualizingPanel {}
unsafe impl ::core::marker::Send for VirtualizingPanel {}
unsafe impl ::core::marker::Sync for VirtualizingPanel {}
#[repr(transparent)]
pub struct VirtualizingStackPanel(::windows_core::IUnknown);
impl VirtualizingStackPanel {}
impl ::core::cmp::PartialEq for VirtualizingStackPanel {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for VirtualizingStackPanel {}
impl ::core::fmt::Debug for VirtualizingStackPanel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("VirtualizingStackPanel").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for VirtualizingStackPanel {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.VirtualizingStackPanel;{7567cd9a-a3b4-4dea-bb11-549e2c2f919d})",
    );
}
impl ::core::clone::Clone for VirtualizingStackPanel {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for VirtualizingStackPanel {
    type Vtable = IVirtualizingStackPanel_Vtbl;
}
unsafe impl ::windows_core::ComInterface for VirtualizingStackPanel {
    const IID: ::windows_core::GUID = <IVirtualizingStackPanel as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for VirtualizingStackPanel {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.VirtualizingStackPanel";
}
::windows_core::imp::interface_hierarchy!(
    VirtualizingStackPanel, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IInsertionPanel> for VirtualizingStackPanel {}
impl ::windows_core::CanTryInto<Primitives::IScrollSnapPointsInfo>
for VirtualizingStackPanel {}
impl ::windows_core::CanTryInto<Primitives::OrientedVirtualizingPanel>
for VirtualizingStackPanel {}
impl ::windows_core::CanTryInto<VirtualizingPanel> for VirtualizingStackPanel {}
impl ::windows_core::CanTryInto<Panel> for VirtualizingStackPanel {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for VirtualizingStackPanel {}
impl ::windows_core::CanTryInto<super::UIElement> for VirtualizingStackPanel {}
impl ::windows_core::CanTryInto<super::DependencyObject> for VirtualizingStackPanel {}
unsafe impl ::core::marker::Send for VirtualizingStackPanel {}
unsafe impl ::core::marker::Sync for VirtualizingStackPanel {}
#[repr(transparent)]
pub struct WebView(::windows_core::IUnknown);
impl WebView {}
impl ::core::cmp::PartialEq for WebView {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for WebView {}
impl ::core::fmt::Debug for WebView {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WebView").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for WebView {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.WebView;{5862cc46-1f7d-479b-92a6-de7858fe8d54})",
    );
}
impl ::core::clone::Clone for WebView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for WebView {
    type Vtable = IWebView_Vtbl;
}
unsafe impl ::windows_core::ComInterface for WebView {
    const IID: ::windows_core::GUID = <IWebView as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for WebView {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.WebView";
}
::windows_core::imp::interface_hierarchy!(
    WebView, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::FrameworkElement> for WebView {}
impl ::windows_core::CanTryInto<super::UIElement> for WebView {}
impl ::windows_core::CanTryInto<super::DependencyObject> for WebView {}
unsafe impl ::core::marker::Send for WebView {}
unsafe impl ::core::marker::Sync for WebView {}
#[repr(transparent)]
pub struct WebViewBrush(::windows_core::IUnknown);
impl WebViewBrush {}
impl ::core::cmp::PartialEq for WebViewBrush {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for WebViewBrush {}
impl ::core::fmt::Debug for WebViewBrush {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WebViewBrush").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for WebViewBrush {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.WebViewBrush;{40e86f75-0cf4-4b72-a4d6-cf5d15780116})",
    );
}
impl ::core::clone::Clone for WebViewBrush {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for WebViewBrush {
    type Vtable = IWebViewBrush_Vtbl;
}
unsafe impl ::windows_core::ComInterface for WebViewBrush {
    const IID: ::windows_core::GUID = <IWebViewBrush as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for WebViewBrush {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.WebViewBrush";
}
::windows_core::imp::interface_hierarchy!(
    WebViewBrush, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<super::Media::TileBrush> for WebViewBrush {}
impl ::windows_core::CanTryInto<super::Media::Brush> for WebViewBrush {}
impl ::windows_core::CanTryInto<super::DependencyObject> for WebViewBrush {}
unsafe impl ::core::marker::Send for WebViewBrush {}
unsafe impl ::core::marker::Sync for WebViewBrush {}
#[repr(transparent)]
pub struct WebViewContentLoadingEventArgs(::windows_core::IUnknown);
impl WebViewContentLoadingEventArgs {}
impl ::core::cmp::PartialEq for WebViewContentLoadingEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for WebViewContentLoadingEventArgs {}
impl ::core::fmt::Debug for WebViewContentLoadingEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WebViewContentLoadingEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for WebViewContentLoadingEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.WebViewContentLoadingEventArgs;{6e2980bb-98b8-413e-8129-971c6f7e4c8a})",
    );
}
impl ::core::clone::Clone for WebViewContentLoadingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for WebViewContentLoadingEventArgs {
    type Vtable = IWebViewContentLoadingEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for WebViewContentLoadingEventArgs {
    const IID: ::windows_core::GUID = <IWebViewContentLoadingEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for WebViewContentLoadingEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.WebViewContentLoadingEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    WebViewContentLoadingEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for WebViewContentLoadingEventArgs {}
unsafe impl ::core::marker::Sync for WebViewContentLoadingEventArgs {}
#[repr(transparent)]
pub struct WebViewDOMContentLoadedEventArgs(::windows_core::IUnknown);
impl WebViewDOMContentLoadedEventArgs {}
impl ::core::cmp::PartialEq for WebViewDOMContentLoadedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for WebViewDOMContentLoadedEventArgs {}
impl ::core::fmt::Debug for WebViewDOMContentLoadedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WebViewDOMContentLoadedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for WebViewDOMContentLoadedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.WebViewDOMContentLoadedEventArgs;{c47eba15-dc6b-4b36-9d80-82fb8817b988})",
    );
}
impl ::core::clone::Clone for WebViewDOMContentLoadedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for WebViewDOMContentLoadedEventArgs {
    type Vtable = IWebViewDOMContentLoadedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for WebViewDOMContentLoadedEventArgs {
    const IID: ::windows_core::GUID = <IWebViewDOMContentLoadedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for WebViewDOMContentLoadedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.WebViewDOMContentLoadedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    WebViewDOMContentLoadedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for WebViewDOMContentLoadedEventArgs {}
unsafe impl ::core::marker::Sync for WebViewDOMContentLoadedEventArgs {}
#[repr(transparent)]
pub struct WebViewDeferredPermissionRequest(::windows_core::IUnknown);
impl WebViewDeferredPermissionRequest {}
impl ::core::cmp::PartialEq for WebViewDeferredPermissionRequest {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for WebViewDeferredPermissionRequest {}
impl ::core::fmt::Debug for WebViewDeferredPermissionRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WebViewDeferredPermissionRequest").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for WebViewDeferredPermissionRequest {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.WebViewDeferredPermissionRequest;{a3dcc461-7350-4d3a-8fb9-40eeec2746c2})",
    );
}
impl ::core::clone::Clone for WebViewDeferredPermissionRequest {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for WebViewDeferredPermissionRequest {
    type Vtable = IWebViewDeferredPermissionRequest_Vtbl;
}
unsafe impl ::windows_core::ComInterface for WebViewDeferredPermissionRequest {
    const IID: ::windows_core::GUID = <IWebViewDeferredPermissionRequest as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for WebViewDeferredPermissionRequest {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.WebViewDeferredPermissionRequest";
}
::windows_core::imp::interface_hierarchy!(
    WebViewDeferredPermissionRequest, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for WebViewDeferredPermissionRequest {}
unsafe impl ::core::marker::Sync for WebViewDeferredPermissionRequest {}
#[repr(transparent)]
pub struct WebViewLongRunningScriptDetectedEventArgs(::windows_core::IUnknown);
impl WebViewLongRunningScriptDetectedEventArgs {}
impl ::core::cmp::PartialEq for WebViewLongRunningScriptDetectedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for WebViewLongRunningScriptDetectedEventArgs {}
impl ::core::fmt::Debug for WebViewLongRunningScriptDetectedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WebViewLongRunningScriptDetectedEventArgs")
            .field(&self.0)
            .finish()
    }
}
impl ::windows_core::RuntimeType for WebViewLongRunningScriptDetectedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.WebViewLongRunningScriptDetectedEventArgs;{f3f020ab-a46c-42b0-9efe-69764d5cffa6})",
    );
}
impl ::core::clone::Clone for WebViewLongRunningScriptDetectedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for WebViewLongRunningScriptDetectedEventArgs {
    type Vtable = IWebViewLongRunningScriptDetectedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for WebViewLongRunningScriptDetectedEventArgs {
    const IID: ::windows_core::GUID = <IWebViewLongRunningScriptDetectedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for WebViewLongRunningScriptDetectedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.WebViewLongRunningScriptDetectedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    WebViewLongRunningScriptDetectedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for WebViewLongRunningScriptDetectedEventArgs {}
unsafe impl ::core::marker::Sync for WebViewLongRunningScriptDetectedEventArgs {}
#[repr(transparent)]
pub struct WebViewNavigationCompletedEventArgs(::windows_core::IUnknown);
impl WebViewNavigationCompletedEventArgs {}
impl ::core::cmp::PartialEq for WebViewNavigationCompletedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for WebViewNavigationCompletedEventArgs {}
impl ::core::fmt::Debug for WebViewNavigationCompletedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WebViewNavigationCompletedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for WebViewNavigationCompletedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.WebViewNavigationCompletedEventArgs;{11e6f20b-eba7-44c0-889b-edeb6a064ddd})",
    );
}
impl ::core::clone::Clone for WebViewNavigationCompletedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for WebViewNavigationCompletedEventArgs {
    type Vtable = IWebViewNavigationCompletedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for WebViewNavigationCompletedEventArgs {
    const IID: ::windows_core::GUID = <IWebViewNavigationCompletedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for WebViewNavigationCompletedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.WebViewNavigationCompletedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    WebViewNavigationCompletedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for WebViewNavigationCompletedEventArgs {}
unsafe impl ::core::marker::Sync for WebViewNavigationCompletedEventArgs {}
#[repr(transparent)]
pub struct WebViewNavigationFailedEventArgs(::windows_core::IUnknown);
impl WebViewNavigationFailedEventArgs {}
impl ::core::cmp::PartialEq for WebViewNavigationFailedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for WebViewNavigationFailedEventArgs {}
impl ::core::fmt::Debug for WebViewNavigationFailedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WebViewNavigationFailedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for WebViewNavigationFailedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.WebViewNavigationFailedEventArgs;{af09609a-129c-4170-9e9c-e2cdf025dca4})",
    );
}
impl ::core::clone::Clone for WebViewNavigationFailedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for WebViewNavigationFailedEventArgs {
    type Vtable = IWebViewNavigationFailedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for WebViewNavigationFailedEventArgs {
    const IID: ::windows_core::GUID = <IWebViewNavigationFailedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for WebViewNavigationFailedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.WebViewNavigationFailedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    WebViewNavigationFailedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for WebViewNavigationFailedEventArgs {}
unsafe impl ::core::marker::Sync for WebViewNavigationFailedEventArgs {}
#[repr(transparent)]
pub struct WebViewNavigationStartingEventArgs(::windows_core::IUnknown);
impl WebViewNavigationStartingEventArgs {}
impl ::core::cmp::PartialEq for WebViewNavigationStartingEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for WebViewNavigationStartingEventArgs {}
impl ::core::fmt::Debug for WebViewNavigationStartingEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WebViewNavigationStartingEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for WebViewNavigationStartingEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.WebViewNavigationStartingEventArgs;{94cb8668-8367-43d5-91bb-96eba37ec784})",
    );
}
impl ::core::clone::Clone for WebViewNavigationStartingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for WebViewNavigationStartingEventArgs {
    type Vtable = IWebViewNavigationStartingEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for WebViewNavigationStartingEventArgs {
    const IID: ::windows_core::GUID = <IWebViewNavigationStartingEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for WebViewNavigationStartingEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.WebViewNavigationStartingEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    WebViewNavigationStartingEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for WebViewNavigationStartingEventArgs {}
unsafe impl ::core::marker::Sync for WebViewNavigationStartingEventArgs {}
#[repr(transparent)]
pub struct WebViewNewWindowRequestedEventArgs(::windows_core::IUnknown);
impl WebViewNewWindowRequestedEventArgs {}
impl ::core::cmp::PartialEq for WebViewNewWindowRequestedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for WebViewNewWindowRequestedEventArgs {}
impl ::core::fmt::Debug for WebViewNewWindowRequestedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WebViewNewWindowRequestedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for WebViewNewWindowRequestedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.WebViewNewWindowRequestedEventArgs;{470fa818-6862-44d9-b3d1-c0696373de35})",
    );
}
impl ::core::clone::Clone for WebViewNewWindowRequestedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for WebViewNewWindowRequestedEventArgs {
    type Vtable = IWebViewNewWindowRequestedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for WebViewNewWindowRequestedEventArgs {
    const IID: ::windows_core::GUID = <IWebViewNewWindowRequestedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for WebViewNewWindowRequestedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.WebViewNewWindowRequestedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    WebViewNewWindowRequestedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for WebViewNewWindowRequestedEventArgs {}
unsafe impl ::core::marker::Sync for WebViewNewWindowRequestedEventArgs {}
#[repr(transparent)]
pub struct WebViewPermissionRequest(::windows_core::IUnknown);
impl WebViewPermissionRequest {}
impl ::core::cmp::PartialEq for WebViewPermissionRequest {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for WebViewPermissionRequest {}
impl ::core::fmt::Debug for WebViewPermissionRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WebViewPermissionRequest").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for WebViewPermissionRequest {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.WebViewPermissionRequest;{17b76332-66c4-4131-999e-df7de20a8c9c})",
    );
}
impl ::core::clone::Clone for WebViewPermissionRequest {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for WebViewPermissionRequest {
    type Vtable = IWebViewPermissionRequest_Vtbl;
}
unsafe impl ::windows_core::ComInterface for WebViewPermissionRequest {
    const IID: ::windows_core::GUID = <IWebViewPermissionRequest as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for WebViewPermissionRequest {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.WebViewPermissionRequest";
}
::windows_core::imp::interface_hierarchy!(
    WebViewPermissionRequest, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for WebViewPermissionRequest {}
unsafe impl ::core::marker::Sync for WebViewPermissionRequest {}
#[repr(transparent)]
pub struct WebViewPermissionRequestedEventArgs(::windows_core::IUnknown);
impl WebViewPermissionRequestedEventArgs {}
impl ::core::cmp::PartialEq for WebViewPermissionRequestedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for WebViewPermissionRequestedEventArgs {}
impl ::core::fmt::Debug for WebViewPermissionRequestedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WebViewPermissionRequestedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for WebViewPermissionRequestedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.WebViewPermissionRequestedEventArgs;{dadecfd0-6e1e-473f-b0be-b02404d6a86d})",
    );
}
impl ::core::clone::Clone for WebViewPermissionRequestedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for WebViewPermissionRequestedEventArgs {
    type Vtable = IWebViewPermissionRequestedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for WebViewPermissionRequestedEventArgs {
    const IID: ::windows_core::GUID = <IWebViewPermissionRequestedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for WebViewPermissionRequestedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.WebViewPermissionRequestedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    WebViewPermissionRequestedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for WebViewPermissionRequestedEventArgs {}
unsafe impl ::core::marker::Sync for WebViewPermissionRequestedEventArgs {}
#[repr(transparent)]
pub struct WebViewSeparateProcessLostEventArgs(::windows_core::IUnknown);
impl WebViewSeparateProcessLostEventArgs {}
impl ::core::cmp::PartialEq for WebViewSeparateProcessLostEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for WebViewSeparateProcessLostEventArgs {}
impl ::core::fmt::Debug for WebViewSeparateProcessLostEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WebViewSeparateProcessLostEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for WebViewSeparateProcessLostEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.WebViewSeparateProcessLostEventArgs;{a405700a-c482-40b5-aaea-e10cfa9f5abe})",
    );
}
impl ::core::clone::Clone for WebViewSeparateProcessLostEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for WebViewSeparateProcessLostEventArgs {
    type Vtable = IWebViewSeparateProcessLostEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for WebViewSeparateProcessLostEventArgs {
    const IID: ::windows_core::GUID = <IWebViewSeparateProcessLostEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for WebViewSeparateProcessLostEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.WebViewSeparateProcessLostEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    WebViewSeparateProcessLostEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for WebViewSeparateProcessLostEventArgs {}
unsafe impl ::core::marker::Sync for WebViewSeparateProcessLostEventArgs {}
#[repr(transparent)]
pub struct WebViewSettings(::windows_core::IUnknown);
impl WebViewSettings {}
impl ::core::cmp::PartialEq for WebViewSettings {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for WebViewSettings {}
impl ::core::fmt::Debug for WebViewSettings {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WebViewSettings").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for WebViewSettings {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.WebViewSettings;{1d50ad4d-abf6-4785-8df3-fdebc1270301})",
    );
}
impl ::core::clone::Clone for WebViewSettings {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for WebViewSettings {
    type Vtable = IWebViewSettings_Vtbl;
}
unsafe impl ::windows_core::ComInterface for WebViewSettings {
    const IID: ::windows_core::GUID = <IWebViewSettings as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for WebViewSettings {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.WebViewSettings";
}
::windows_core::imp::interface_hierarchy!(
    WebViewSettings, ::windows_core::IUnknown, ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for WebViewSettings {}
unsafe impl ::core::marker::Sync for WebViewSettings {}
#[repr(transparent)]
pub struct WebViewUnsupportedUriSchemeIdentifiedEventArgs(::windows_core::IUnknown);
impl WebViewUnsupportedUriSchemeIdentifiedEventArgs {}
impl ::core::cmp::PartialEq for WebViewUnsupportedUriSchemeIdentifiedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for WebViewUnsupportedUriSchemeIdentifiedEventArgs {}
impl ::core::fmt::Debug for WebViewUnsupportedUriSchemeIdentifiedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WebViewUnsupportedUriSchemeIdentifiedEventArgs")
            .field(&self.0)
            .finish()
    }
}
impl ::windows_core::RuntimeType for WebViewUnsupportedUriSchemeIdentifiedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.WebViewUnsupportedUriSchemeIdentifiedEventArgs;{b9c9e1a7-620f-4895-935d-10fbac6fd29e})",
    );
}
impl ::core::clone::Clone for WebViewUnsupportedUriSchemeIdentifiedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface
for WebViewUnsupportedUriSchemeIdentifiedEventArgs {
    type Vtable = IWebViewUnsupportedUriSchemeIdentifiedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface
for WebViewUnsupportedUriSchemeIdentifiedEventArgs {
    const IID: ::windows_core::GUID = <IWebViewUnsupportedUriSchemeIdentifiedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for WebViewUnsupportedUriSchemeIdentifiedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.WebViewUnsupportedUriSchemeIdentifiedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    WebViewUnsupportedUriSchemeIdentifiedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for WebViewUnsupportedUriSchemeIdentifiedEventArgs {}
unsafe impl ::core::marker::Sync for WebViewUnsupportedUriSchemeIdentifiedEventArgs {}
#[repr(transparent)]
pub struct WebViewUnviewableContentIdentifiedEventArgs(::windows_core::IUnknown);
impl WebViewUnviewableContentIdentifiedEventArgs {}
impl ::core::cmp::PartialEq for WebViewUnviewableContentIdentifiedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for WebViewUnviewableContentIdentifiedEventArgs {}
impl ::core::fmt::Debug for WebViewUnviewableContentIdentifiedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WebViewUnviewableContentIdentifiedEventArgs")
            .field(&self.0)
            .finish()
    }
}
impl ::windows_core::RuntimeType for WebViewUnviewableContentIdentifiedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.WebViewUnviewableContentIdentifiedEventArgs;{37bc16e1-6062-4678-b20b-6c36ac9c59ac})",
    );
}
impl ::core::clone::Clone for WebViewUnviewableContentIdentifiedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for WebViewUnviewableContentIdentifiedEventArgs {
    type Vtable = IWebViewUnviewableContentIdentifiedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface
for WebViewUnviewableContentIdentifiedEventArgs {
    const IID: ::windows_core::GUID = <IWebViewUnviewableContentIdentifiedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for WebViewUnviewableContentIdentifiedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.WebViewUnviewableContentIdentifiedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    WebViewUnviewableContentIdentifiedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for WebViewUnviewableContentIdentifiedEventArgs {}
unsafe impl ::core::marker::Sync for WebViewUnviewableContentIdentifiedEventArgs {}
#[repr(transparent)]
pub struct WebViewWebResourceRequestedEventArgs(::windows_core::IUnknown);
impl WebViewWebResourceRequestedEventArgs {}
impl ::core::cmp::PartialEq for WebViewWebResourceRequestedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for WebViewWebResourceRequestedEventArgs {}
impl ::core::fmt::Debug for WebViewWebResourceRequestedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WebViewWebResourceRequestedEventArgs").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for WebViewWebResourceRequestedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.WebViewWebResourceRequestedEventArgs;{378d21f6-c77f-5d8b-8f30-93c99df79435})",
    );
}
impl ::core::clone::Clone for WebViewWebResourceRequestedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for WebViewWebResourceRequestedEventArgs {
    type Vtable = IWebViewWebResourceRequestedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for WebViewWebResourceRequestedEventArgs {
    const IID: ::windows_core::GUID = <IWebViewWebResourceRequestedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for WebViewWebResourceRequestedEventArgs {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.WebViewWebResourceRequestedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    WebViewWebResourceRequestedEventArgs, ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for WebViewWebResourceRequestedEventArgs {}
unsafe impl ::core::marker::Sync for WebViewWebResourceRequestedEventArgs {}
#[repr(transparent)]
pub struct WrapGrid(::windows_core::IUnknown);
impl WrapGrid {}
impl ::core::cmp::PartialEq for WrapGrid {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for WrapGrid {}
impl ::core::fmt::Debug for WrapGrid {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WrapGrid").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for WrapGrid {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"rc(Windows.UI.Xaml.Controls.WrapGrid;{0552178b-7567-47c2-bd5c-ad8394c828ba})",
    );
}
impl ::core::clone::Clone for WrapGrid {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::Interface for WrapGrid {
    type Vtable = IWrapGrid_Vtbl;
}
unsafe impl ::windows_core::ComInterface for WrapGrid {
    const IID: ::windows_core::GUID = <IWrapGrid as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for WrapGrid {
    const NAME: &'static str = "Windows.UI.Xaml.Controls.WrapGrid";
}
::windows_core::imp::interface_hierarchy!(
    WrapGrid, ::windows_core::IUnknown, ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IInsertionPanel> for WrapGrid {}
impl ::windows_core::CanTryInto<Primitives::IScrollSnapPointsInfo> for WrapGrid {}
impl ::windows_core::CanTryInto<Primitives::OrientedVirtualizingPanel> for WrapGrid {}
impl ::windows_core::CanTryInto<VirtualizingPanel> for WrapGrid {}
impl ::windows_core::CanTryInto<Panel> for WrapGrid {}
impl ::windows_core::CanTryInto<super::FrameworkElement> for WrapGrid {}
impl ::windows_core::CanTryInto<super::UIElement> for WrapGrid {}
impl ::windows_core::CanTryInto<super::DependencyObject> for WrapGrid {}
unsafe impl ::core::marker::Send for WrapGrid {}
unsafe impl ::core::marker::Sync for WrapGrid {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct AppBarClosedDisplayMode(pub i32);
impl AppBarClosedDisplayMode {
    pub const Compact: Self = Self(0i32);
    pub const Minimal: Self = Self(1i32);
    pub const Hidden: Self = Self(2i32);
}
impl ::core::marker::Copy for AppBarClosedDisplayMode {}
impl ::core::clone::Clone for AppBarClosedDisplayMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for AppBarClosedDisplayMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for AppBarClosedDisplayMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for AppBarClosedDisplayMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AppBarClosedDisplayMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for AppBarClosedDisplayMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.AppBarClosedDisplayMode;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct AutoSuggestionBoxTextChangeReason(pub i32);
impl AutoSuggestionBoxTextChangeReason {
    pub const UserInput: Self = Self(0i32);
    pub const ProgrammaticChange: Self = Self(1i32);
    pub const SuggestionChosen: Self = Self(2i32);
}
impl ::core::marker::Copy for AutoSuggestionBoxTextChangeReason {}
impl ::core::clone::Clone for AutoSuggestionBoxTextChangeReason {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for AutoSuggestionBoxTextChangeReason {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for AutoSuggestionBoxTextChangeReason {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for AutoSuggestionBoxTextChangeReason {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AutoSuggestionBoxTextChangeReason").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for AutoSuggestionBoxTextChangeReason {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.AutoSuggestionBoxTextChangeReason;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct BackgroundSizing(pub i32);
impl BackgroundSizing {
    pub const InnerBorderEdge: Self = Self(0i32);
    pub const OuterBorderEdge: Self = Self(1i32);
}
impl ::core::marker::Copy for BackgroundSizing {}
impl ::core::clone::Clone for BackgroundSizing {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for BackgroundSizing {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for BackgroundSizing {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for BackgroundSizing {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BackgroundSizing").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for BackgroundSizing {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.BackgroundSizing;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CalendarViewDisplayMode(pub i32);
impl CalendarViewDisplayMode {
    pub const Month: Self = Self(0i32);
    pub const Year: Self = Self(1i32);
    pub const Decade: Self = Self(2i32);
}
impl ::core::marker::Copy for CalendarViewDisplayMode {}
impl ::core::clone::Clone for CalendarViewDisplayMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CalendarViewDisplayMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for CalendarViewDisplayMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for CalendarViewDisplayMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CalendarViewDisplayMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for CalendarViewDisplayMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.CalendarViewDisplayMode;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CalendarViewSelectionMode(pub i32);
impl CalendarViewSelectionMode {
    pub const None: Self = Self(0i32);
    pub const Single: Self = Self(1i32);
    pub const Multiple: Self = Self(2i32);
}
impl ::core::marker::Copy for CalendarViewSelectionMode {}
impl ::core::clone::Clone for CalendarViewSelectionMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CalendarViewSelectionMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for CalendarViewSelectionMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for CalendarViewSelectionMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CalendarViewSelectionMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for CalendarViewSelectionMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.CalendarViewSelectionMode;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CandidateWindowAlignment(pub i32);
impl CandidateWindowAlignment {
    pub const Default: Self = Self(0i32);
    pub const BottomEdge: Self = Self(1i32);
}
impl ::core::marker::Copy for CandidateWindowAlignment {}
impl ::core::clone::Clone for CandidateWindowAlignment {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CandidateWindowAlignment {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for CandidateWindowAlignment {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for CandidateWindowAlignment {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CandidateWindowAlignment").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for CandidateWindowAlignment {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.CandidateWindowAlignment;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CharacterCasing(pub i32);
impl CharacterCasing {
    pub const Normal: Self = Self(0i32);
    pub const Lower: Self = Self(1i32);
    pub const Upper: Self = Self(2i32);
}
impl ::core::marker::Copy for CharacterCasing {}
impl ::core::clone::Clone for CharacterCasing {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CharacterCasing {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for CharacterCasing {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for CharacterCasing {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CharacterCasing").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for CharacterCasing {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.CharacterCasing;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ClickMode(pub i32);
impl ClickMode {
    pub const Release: Self = Self(0i32);
    pub const Press: Self = Self(1i32);
    pub const Hover: Self = Self(2i32);
}
impl ::core::marker::Copy for ClickMode {}
impl ::core::clone::Clone for ClickMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ClickMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ClickMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ClickMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ClickMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ClickMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.ClickMode;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ColorPickerHsvChannel(pub i32);
impl ColorPickerHsvChannel {
    pub const Hue: Self = Self(0i32);
    pub const Saturation: Self = Self(1i32);
    pub const Value: Self = Self(2i32);
    pub const Alpha: Self = Self(3i32);
}
impl ::core::marker::Copy for ColorPickerHsvChannel {}
impl ::core::clone::Clone for ColorPickerHsvChannel {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ColorPickerHsvChannel {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ColorPickerHsvChannel {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ColorPickerHsvChannel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ColorPickerHsvChannel").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ColorPickerHsvChannel {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.ColorPickerHsvChannel;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ColorSpectrumComponents(pub i32);
impl ColorSpectrumComponents {
    pub const HueValue: Self = Self(0i32);
    pub const ValueHue: Self = Self(1i32);
    pub const HueSaturation: Self = Self(2i32);
    pub const SaturationHue: Self = Self(3i32);
    pub const SaturationValue: Self = Self(4i32);
    pub const ValueSaturation: Self = Self(5i32);
}
impl ::core::marker::Copy for ColorSpectrumComponents {}
impl ::core::clone::Clone for ColorSpectrumComponents {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ColorSpectrumComponents {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ColorSpectrumComponents {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ColorSpectrumComponents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ColorSpectrumComponents").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ColorSpectrumComponents {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.ColorSpectrumComponents;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ColorSpectrumShape(pub i32);
impl ColorSpectrumShape {
    pub const Box: Self = Self(0i32);
    pub const Ring: Self = Self(1i32);
}
impl ::core::marker::Copy for ColorSpectrumShape {}
impl ::core::clone::Clone for ColorSpectrumShape {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ColorSpectrumShape {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ColorSpectrumShape {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ColorSpectrumShape {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ColorSpectrumShape").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ColorSpectrumShape {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.ColorSpectrumShape;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ComboBoxSelectionChangedTrigger(pub i32);
impl ComboBoxSelectionChangedTrigger {
    pub const Committed: Self = Self(0i32);
    pub const Always: Self = Self(1i32);
}
impl ::core::marker::Copy for ComboBoxSelectionChangedTrigger {}
impl ::core::clone::Clone for ComboBoxSelectionChangedTrigger {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ComboBoxSelectionChangedTrigger {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ComboBoxSelectionChangedTrigger {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ComboBoxSelectionChangedTrigger {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ComboBoxSelectionChangedTrigger").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ComboBoxSelectionChangedTrigger {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.ComboBoxSelectionChangedTrigger;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CommandBarDefaultLabelPosition(pub i32);
impl CommandBarDefaultLabelPosition {
    pub const Bottom: Self = Self(0i32);
    pub const Right: Self = Self(1i32);
    pub const Collapsed: Self = Self(2i32);
}
impl ::core::marker::Copy for CommandBarDefaultLabelPosition {}
impl ::core::clone::Clone for CommandBarDefaultLabelPosition {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CommandBarDefaultLabelPosition {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for CommandBarDefaultLabelPosition {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for CommandBarDefaultLabelPosition {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CommandBarDefaultLabelPosition").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for CommandBarDefaultLabelPosition {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.CommandBarDefaultLabelPosition;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CommandBarDynamicOverflowAction(pub i32);
impl CommandBarDynamicOverflowAction {
    pub const AddingToOverflow: Self = Self(0i32);
    pub const RemovingFromOverflow: Self = Self(1i32);
}
impl ::core::marker::Copy for CommandBarDynamicOverflowAction {}
impl ::core::clone::Clone for CommandBarDynamicOverflowAction {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CommandBarDynamicOverflowAction {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for CommandBarDynamicOverflowAction {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for CommandBarDynamicOverflowAction {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CommandBarDynamicOverflowAction").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for CommandBarDynamicOverflowAction {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.CommandBarDynamicOverflowAction;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CommandBarLabelPosition(pub i32);
impl CommandBarLabelPosition {
    pub const Default: Self = Self(0i32);
    pub const Collapsed: Self = Self(1i32);
}
impl ::core::marker::Copy for CommandBarLabelPosition {}
impl ::core::clone::Clone for CommandBarLabelPosition {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CommandBarLabelPosition {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for CommandBarLabelPosition {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for CommandBarLabelPosition {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CommandBarLabelPosition").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for CommandBarLabelPosition {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.CommandBarLabelPosition;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CommandBarOverflowButtonVisibility(pub i32);
impl CommandBarOverflowButtonVisibility {
    pub const Auto: Self = Self(0i32);
    pub const Visible: Self = Self(1i32);
    pub const Collapsed: Self = Self(2i32);
}
impl ::core::marker::Copy for CommandBarOverflowButtonVisibility {}
impl ::core::clone::Clone for CommandBarOverflowButtonVisibility {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CommandBarOverflowButtonVisibility {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for CommandBarOverflowButtonVisibility {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for CommandBarOverflowButtonVisibility {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CommandBarOverflowButtonVisibility").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for CommandBarOverflowButtonVisibility {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.CommandBarOverflowButtonVisibility;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ContentDialogButton(pub i32);
impl ContentDialogButton {
    pub const None: Self = Self(0i32);
    pub const Primary: Self = Self(1i32);
    pub const Secondary: Self = Self(2i32);
    pub const Close: Self = Self(3i32);
}
impl ::core::marker::Copy for ContentDialogButton {}
impl ::core::clone::Clone for ContentDialogButton {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ContentDialogButton {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ContentDialogButton {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ContentDialogButton {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ContentDialogButton").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ContentDialogButton {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.ContentDialogButton;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ContentDialogPlacement(pub i32);
impl ContentDialogPlacement {
    pub const Popup: Self = Self(0i32);
    pub const InPlace: Self = Self(1i32);
}
impl ::core::marker::Copy for ContentDialogPlacement {}
impl ::core::clone::Clone for ContentDialogPlacement {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ContentDialogPlacement {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ContentDialogPlacement {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ContentDialogPlacement {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ContentDialogPlacement").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ContentDialogPlacement {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.ContentDialogPlacement;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ContentDialogResult(pub i32);
impl ContentDialogResult {
    pub const None: Self = Self(0i32);
    pub const Primary: Self = Self(1i32);
    pub const Secondary: Self = Self(2i32);
}
impl ::core::marker::Copy for ContentDialogResult {}
impl ::core::clone::Clone for ContentDialogResult {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ContentDialogResult {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ContentDialogResult {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ContentDialogResult {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ContentDialogResult").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ContentDialogResult {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.ContentDialogResult;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ContentLinkChangeKind(pub i32);
impl ContentLinkChangeKind {
    pub const Inserted: Self = Self(0i32);
    pub const Removed: Self = Self(1i32);
    pub const Edited: Self = Self(2i32);
}
impl ::core::marker::Copy for ContentLinkChangeKind {}
impl ::core::clone::Clone for ContentLinkChangeKind {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ContentLinkChangeKind {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ContentLinkChangeKind {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ContentLinkChangeKind {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ContentLinkChangeKind").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ContentLinkChangeKind {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.ContentLinkChangeKind;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct DisabledFormattingAccelerators(pub u32);
impl DisabledFormattingAccelerators {
    pub const None: Self = Self(0u32);
    pub const Bold: Self = Self(1u32);
    pub const Italic: Self = Self(2u32);
    pub const Underline: Self = Self(4u32);
    pub const All: Self = Self(4294967295u32);
}
impl ::core::marker::Copy for DisabledFormattingAccelerators {}
impl ::core::clone::Clone for DisabledFormattingAccelerators {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for DisabledFormattingAccelerators {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for DisabledFormattingAccelerators {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for DisabledFormattingAccelerators {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DisabledFormattingAccelerators").field(&self.0).finish()
    }
}
impl DisabledFormattingAccelerators {}
impl ::core::ops::BitOr for DisabledFormattingAccelerators {
    type Output = Self;
    fn bitor(self, other: Self) -> Self {
        Self(self.0 | other.0)
    }
}
impl ::core::ops::BitAnd for DisabledFormattingAccelerators {
    type Output = Self;
    fn bitand(self, other: Self) -> Self {
        Self(self.0 & other.0)
    }
}
impl ::core::ops::BitOrAssign for DisabledFormattingAccelerators {
    fn bitor_assign(&mut self, other: Self) {
        self.0.bitor_assign(other.0)
    }
}
impl ::core::ops::BitAndAssign for DisabledFormattingAccelerators {
    fn bitand_assign(&mut self, other: Self) {
        self.0.bitand_assign(other.0)
    }
}
impl ::core::ops::Not for DisabledFormattingAccelerators {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
impl ::windows_core::RuntimeType for DisabledFormattingAccelerators {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.DisabledFormattingAccelerators;u4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct HandwritingPanelPlacementAlignment(pub i32);
impl HandwritingPanelPlacementAlignment {
    pub const Auto: Self = Self(0i32);
    pub const TopLeft: Self = Self(1i32);
    pub const TopRight: Self = Self(2i32);
    pub const BottomLeft: Self = Self(3i32);
    pub const BottomRight: Self = Self(4i32);
}
impl ::core::marker::Copy for HandwritingPanelPlacementAlignment {}
impl ::core::clone::Clone for HandwritingPanelPlacementAlignment {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for HandwritingPanelPlacementAlignment {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for HandwritingPanelPlacementAlignment {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for HandwritingPanelPlacementAlignment {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("HandwritingPanelPlacementAlignment").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for HandwritingPanelPlacementAlignment {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.HandwritingPanelPlacementAlignment;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct IncrementalLoadingTrigger(pub i32);
impl IncrementalLoadingTrigger {
    pub const None: Self = Self(0i32);
    pub const Edge: Self = Self(1i32);
}
impl ::core::marker::Copy for IncrementalLoadingTrigger {}
impl ::core::clone::Clone for IncrementalLoadingTrigger {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for IncrementalLoadingTrigger {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for IncrementalLoadingTrigger {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for IncrementalLoadingTrigger {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IncrementalLoadingTrigger").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for IncrementalLoadingTrigger {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.IncrementalLoadingTrigger;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct InkToolbarButtonFlyoutPlacement(pub i32);
impl InkToolbarButtonFlyoutPlacement {
    pub const Auto: Self = Self(0i32);
    pub const Top: Self = Self(1i32);
    pub const Bottom: Self = Self(2i32);
    pub const Left: Self = Self(3i32);
    pub const Right: Self = Self(4i32);
}
impl ::core::marker::Copy for InkToolbarButtonFlyoutPlacement {}
impl ::core::clone::Clone for InkToolbarButtonFlyoutPlacement {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for InkToolbarButtonFlyoutPlacement {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for InkToolbarButtonFlyoutPlacement {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for InkToolbarButtonFlyoutPlacement {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarButtonFlyoutPlacement").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarButtonFlyoutPlacement {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.InkToolbarButtonFlyoutPlacement;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct InkToolbarFlyoutItemKind(pub i32);
impl InkToolbarFlyoutItemKind {
    pub const Simple: Self = Self(0i32);
    pub const Radio: Self = Self(1i32);
    pub const Check: Self = Self(2i32);
    pub const RadioCheck: Self = Self(3i32);
}
impl ::core::marker::Copy for InkToolbarFlyoutItemKind {}
impl ::core::clone::Clone for InkToolbarFlyoutItemKind {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for InkToolbarFlyoutItemKind {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for InkToolbarFlyoutItemKind {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for InkToolbarFlyoutItemKind {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarFlyoutItemKind").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarFlyoutItemKind {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.InkToolbarFlyoutItemKind;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct InkToolbarInitialControls(pub i32);
impl InkToolbarInitialControls {
    pub const All: Self = Self(0i32);
    pub const None: Self = Self(1i32);
    pub const PensOnly: Self = Self(2i32);
    pub const AllExceptPens: Self = Self(3i32);
}
impl ::core::marker::Copy for InkToolbarInitialControls {}
impl ::core::clone::Clone for InkToolbarInitialControls {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for InkToolbarInitialControls {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for InkToolbarInitialControls {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for InkToolbarInitialControls {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarInitialControls").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarInitialControls {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.InkToolbarInitialControls;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct InkToolbarMenuKind(pub i32);
impl InkToolbarMenuKind {
    pub const Stencil: Self = Self(0i32);
}
impl ::core::marker::Copy for InkToolbarMenuKind {}
impl ::core::clone::Clone for InkToolbarMenuKind {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for InkToolbarMenuKind {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for InkToolbarMenuKind {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for InkToolbarMenuKind {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarMenuKind").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarMenuKind {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.InkToolbarMenuKind;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct InkToolbarStencilKind(pub i32);
impl InkToolbarStencilKind {
    pub const Ruler: Self = Self(0i32);
    pub const Protractor: Self = Self(1i32);
}
impl ::core::marker::Copy for InkToolbarStencilKind {}
impl ::core::clone::Clone for InkToolbarStencilKind {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for InkToolbarStencilKind {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for InkToolbarStencilKind {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for InkToolbarStencilKind {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarStencilKind").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarStencilKind {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.InkToolbarStencilKind;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct InkToolbarToggle(pub i32);
impl InkToolbarToggle {
    pub const Ruler: Self = Self(0i32);
    pub const Custom: Self = Self(1i32);
}
impl ::core::marker::Copy for InkToolbarToggle {}
impl ::core::clone::Clone for InkToolbarToggle {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for InkToolbarToggle {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for InkToolbarToggle {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for InkToolbarToggle {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarToggle").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarToggle {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.InkToolbarToggle;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct InkToolbarTool(pub i32);
impl InkToolbarTool {
    pub const BallpointPen: Self = Self(0i32);
    pub const Pencil: Self = Self(1i32);
    pub const Highlighter: Self = Self(2i32);
    pub const Eraser: Self = Self(3i32);
    pub const CustomPen: Self = Self(4i32);
    pub const CustomTool: Self = Self(5i32);
}
impl ::core::marker::Copy for InkToolbarTool {}
impl ::core::clone::Clone for InkToolbarTool {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for InkToolbarTool {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for InkToolbarTool {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for InkToolbarTool {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InkToolbarTool").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for InkToolbarTool {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.InkToolbarTool;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ItemsUpdatingScrollMode(pub i32);
impl ItemsUpdatingScrollMode {
    pub const KeepItemsInView: Self = Self(0i32);
    pub const KeepScrollOffset: Self = Self(1i32);
    pub const KeepLastItemInView: Self = Self(2i32);
}
impl ::core::marker::Copy for ItemsUpdatingScrollMode {}
impl ::core::clone::Clone for ItemsUpdatingScrollMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ItemsUpdatingScrollMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ItemsUpdatingScrollMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ItemsUpdatingScrollMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ItemsUpdatingScrollMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ItemsUpdatingScrollMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.ItemsUpdatingScrollMode;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct LightDismissOverlayMode(pub i32);
impl LightDismissOverlayMode {
    pub const Auto: Self = Self(0i32);
    pub const On: Self = Self(1i32);
    pub const Off: Self = Self(2i32);
}
impl ::core::marker::Copy for LightDismissOverlayMode {}
impl ::core::clone::Clone for LightDismissOverlayMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for LightDismissOverlayMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for LightDismissOverlayMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for LightDismissOverlayMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("LightDismissOverlayMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for LightDismissOverlayMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.LightDismissOverlayMode;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ListPickerFlyoutSelectionMode(pub i32);
impl ListPickerFlyoutSelectionMode {
    pub const Single: Self = Self(0i32);
    pub const Multiple: Self = Self(1i32);
}
impl ::core::marker::Copy for ListPickerFlyoutSelectionMode {}
impl ::core::clone::Clone for ListPickerFlyoutSelectionMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ListPickerFlyoutSelectionMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ListPickerFlyoutSelectionMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ListPickerFlyoutSelectionMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ListPickerFlyoutSelectionMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ListPickerFlyoutSelectionMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.ListPickerFlyoutSelectionMode;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ListViewReorderMode(pub i32);
impl ListViewReorderMode {
    pub const Disabled: Self = Self(0i32);
    pub const Enabled: Self = Self(1i32);
}
impl ::core::marker::Copy for ListViewReorderMode {}
impl ::core::clone::Clone for ListViewReorderMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ListViewReorderMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ListViewReorderMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ListViewReorderMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ListViewReorderMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ListViewReorderMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.ListViewReorderMode;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ListViewSelectionMode(pub i32);
impl ListViewSelectionMode {
    pub const None: Self = Self(0i32);
    pub const Single: Self = Self(1i32);
    pub const Multiple: Self = Self(2i32);
    pub const Extended: Self = Self(3i32);
}
impl ::core::marker::Copy for ListViewSelectionMode {}
impl ::core::clone::Clone for ListViewSelectionMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ListViewSelectionMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ListViewSelectionMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ListViewSelectionMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ListViewSelectionMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ListViewSelectionMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.ListViewSelectionMode;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct NavigationViewBackButtonVisible(pub i32);
impl NavigationViewBackButtonVisible {
    pub const Collapsed: Self = Self(0i32);
    pub const Visible: Self = Self(1i32);
    pub const Auto: Self = Self(2i32);
}
impl ::core::marker::Copy for NavigationViewBackButtonVisible {}
impl ::core::clone::Clone for NavigationViewBackButtonVisible {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for NavigationViewBackButtonVisible {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for NavigationViewBackButtonVisible {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for NavigationViewBackButtonVisible {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NavigationViewBackButtonVisible").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for NavigationViewBackButtonVisible {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.NavigationViewBackButtonVisible;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct NavigationViewDisplayMode(pub i32);
impl NavigationViewDisplayMode {
    pub const Minimal: Self = Self(0i32);
    pub const Compact: Self = Self(1i32);
    pub const Expanded: Self = Self(2i32);
}
impl ::core::marker::Copy for NavigationViewDisplayMode {}
impl ::core::clone::Clone for NavigationViewDisplayMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for NavigationViewDisplayMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for NavigationViewDisplayMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for NavigationViewDisplayMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NavigationViewDisplayMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for NavigationViewDisplayMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.NavigationViewDisplayMode;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct NavigationViewOverflowLabelMode(pub i32);
impl NavigationViewOverflowLabelMode {
    pub const MoreLabel: Self = Self(0i32);
    pub const NoLabel: Self = Self(1i32);
}
impl ::core::marker::Copy for NavigationViewOverflowLabelMode {}
impl ::core::clone::Clone for NavigationViewOverflowLabelMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for NavigationViewOverflowLabelMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for NavigationViewOverflowLabelMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for NavigationViewOverflowLabelMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NavigationViewOverflowLabelMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for NavigationViewOverflowLabelMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.NavigationViewOverflowLabelMode;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct NavigationViewPaneDisplayMode(pub i32);
impl NavigationViewPaneDisplayMode {
    pub const Auto: Self = Self(0i32);
    pub const Left: Self = Self(1i32);
    pub const Top: Self = Self(2i32);
    pub const LeftCompact: Self = Self(3i32);
    pub const LeftMinimal: Self = Self(4i32);
}
impl ::core::marker::Copy for NavigationViewPaneDisplayMode {}
impl ::core::clone::Clone for NavigationViewPaneDisplayMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for NavigationViewPaneDisplayMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for NavigationViewPaneDisplayMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for NavigationViewPaneDisplayMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NavigationViewPaneDisplayMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for NavigationViewPaneDisplayMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.NavigationViewPaneDisplayMode;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct NavigationViewSelectionFollowsFocus(pub i32);
impl NavigationViewSelectionFollowsFocus {
    pub const Disabled: Self = Self(0i32);
    pub const Enabled: Self = Self(1i32);
}
impl ::core::marker::Copy for NavigationViewSelectionFollowsFocus {}
impl ::core::clone::Clone for NavigationViewSelectionFollowsFocus {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for NavigationViewSelectionFollowsFocus {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for NavigationViewSelectionFollowsFocus {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for NavigationViewSelectionFollowsFocus {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NavigationViewSelectionFollowsFocus").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for NavigationViewSelectionFollowsFocus {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct NavigationViewShoulderNavigationEnabled(pub i32);
impl NavigationViewShoulderNavigationEnabled {
    pub const WhenSelectionFollowsFocus: Self = Self(0i32);
    pub const Always: Self = Self(1i32);
    pub const Never: Self = Self(2i32);
}
impl ::core::marker::Copy for NavigationViewShoulderNavigationEnabled {}
impl ::core::clone::Clone for NavigationViewShoulderNavigationEnabled {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for NavigationViewShoulderNavigationEnabled {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for NavigationViewShoulderNavigationEnabled {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for NavigationViewShoulderNavigationEnabled {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NavigationViewShoulderNavigationEnabled").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for NavigationViewShoulderNavigationEnabled {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct Orientation(pub i32);
impl Orientation {
    pub const Vertical: Self = Self(0i32);
    pub const Horizontal: Self = Self(1i32);
}
impl ::core::marker::Copy for Orientation {}
impl ::core::clone::Clone for Orientation {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Orientation {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for Orientation {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for Orientation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Orientation").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for Orientation {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.Orientation;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct PanelScrollingDirection(pub i32);
impl PanelScrollingDirection {
    pub const None: Self = Self(0i32);
    pub const Forward: Self = Self(1i32);
    pub const Backward: Self = Self(2i32);
}
impl ::core::marker::Copy for PanelScrollingDirection {}
impl ::core::clone::Clone for PanelScrollingDirection {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for PanelScrollingDirection {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for PanelScrollingDirection {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for PanelScrollingDirection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PanelScrollingDirection").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for PanelScrollingDirection {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.PanelScrollingDirection;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ParallaxSourceOffsetKind(pub i32);
impl ParallaxSourceOffsetKind {
    pub const Absolute: Self = Self(0i32);
    pub const Relative: Self = Self(1i32);
}
impl ::core::marker::Copy for ParallaxSourceOffsetKind {}
impl ::core::clone::Clone for ParallaxSourceOffsetKind {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ParallaxSourceOffsetKind {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ParallaxSourceOffsetKind {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ParallaxSourceOffsetKind {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ParallaxSourceOffsetKind").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ParallaxSourceOffsetKind {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.ParallaxSourceOffsetKind;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct PasswordRevealMode(pub i32);
impl PasswordRevealMode {
    pub const Peek: Self = Self(0i32);
    pub const Hidden: Self = Self(1i32);
    pub const Visible: Self = Self(2i32);
}
impl ::core::marker::Copy for PasswordRevealMode {}
impl ::core::clone::Clone for PasswordRevealMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for PasswordRevealMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for PasswordRevealMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for PasswordRevealMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PasswordRevealMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for PasswordRevealMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.PasswordRevealMode;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct PivotHeaderFocusVisualPlacement(pub i32);
impl PivotHeaderFocusVisualPlacement {
    pub const ItemHeaders: Self = Self(0i32);
    pub const SelectedItemHeader: Self = Self(1i32);
}
impl ::core::marker::Copy for PivotHeaderFocusVisualPlacement {}
impl ::core::clone::Clone for PivotHeaderFocusVisualPlacement {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for PivotHeaderFocusVisualPlacement {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for PivotHeaderFocusVisualPlacement {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for PivotHeaderFocusVisualPlacement {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PivotHeaderFocusVisualPlacement").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for PivotHeaderFocusVisualPlacement {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.PivotHeaderFocusVisualPlacement;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct PivotSlideInAnimationGroup(pub i32);
impl PivotSlideInAnimationGroup {
    pub const Default: Self = Self(0i32);
    pub const GroupOne: Self = Self(1i32);
    pub const GroupTwo: Self = Self(2i32);
    pub const GroupThree: Self = Self(3i32);
}
impl ::core::marker::Copy for PivotSlideInAnimationGroup {}
impl ::core::clone::Clone for PivotSlideInAnimationGroup {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for PivotSlideInAnimationGroup {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for PivotSlideInAnimationGroup {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for PivotSlideInAnimationGroup {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PivotSlideInAnimationGroup").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for PivotSlideInAnimationGroup {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.PivotSlideInAnimationGroup;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct RefreshPullDirection(pub i32);
impl RefreshPullDirection {
    pub const LeftToRight: Self = Self(0i32);
    pub const TopToBottom: Self = Self(1i32);
    pub const RightToLeft: Self = Self(2i32);
    pub const BottomToTop: Self = Self(3i32);
}
impl ::core::marker::Copy for RefreshPullDirection {}
impl ::core::clone::Clone for RefreshPullDirection {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for RefreshPullDirection {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for RefreshPullDirection {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for RefreshPullDirection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RefreshPullDirection").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RefreshPullDirection {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.RefreshPullDirection;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct RefreshVisualizerOrientation(pub i32);
impl RefreshVisualizerOrientation {
    pub const Auto: Self = Self(0i32);
    pub const Normal: Self = Self(1i32);
    pub const Rotate90DegreesCounterclockwise: Self = Self(2i32);
    pub const Rotate270DegreesCounterclockwise: Self = Self(3i32);
}
impl ::core::marker::Copy for RefreshVisualizerOrientation {}
impl ::core::clone::Clone for RefreshVisualizerOrientation {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for RefreshVisualizerOrientation {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for RefreshVisualizerOrientation {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for RefreshVisualizerOrientation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RefreshVisualizerOrientation").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RefreshVisualizerOrientation {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.RefreshVisualizerOrientation;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct RefreshVisualizerState(pub i32);
impl RefreshVisualizerState {
    pub const Idle: Self = Self(0i32);
    pub const Peeking: Self = Self(1i32);
    pub const Interacting: Self = Self(2i32);
    pub const Pending: Self = Self(3i32);
    pub const Refreshing: Self = Self(4i32);
}
impl ::core::marker::Copy for RefreshVisualizerState {}
impl ::core::clone::Clone for RefreshVisualizerState {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for RefreshVisualizerState {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for RefreshVisualizerState {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for RefreshVisualizerState {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RefreshVisualizerState").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RefreshVisualizerState {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.RefreshVisualizerState;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct RequiresPointer(pub i32);
impl RequiresPointer {
    pub const Never: Self = Self(0i32);
    pub const WhenEngaged: Self = Self(1i32);
    pub const WhenFocused: Self = Self(2i32);
}
impl ::core::marker::Copy for RequiresPointer {}
impl ::core::clone::Clone for RequiresPointer {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for RequiresPointer {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for RequiresPointer {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for RequiresPointer {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RequiresPointer").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RequiresPointer {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.RequiresPointer;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct RichEditClipboardFormat(pub i32);
impl RichEditClipboardFormat {
    pub const AllFormats: Self = Self(0i32);
    pub const PlainText: Self = Self(1i32);
}
impl ::core::marker::Copy for RichEditClipboardFormat {}
impl ::core::clone::Clone for RichEditClipboardFormat {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for RichEditClipboardFormat {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for RichEditClipboardFormat {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for RichEditClipboardFormat {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RichEditClipboardFormat").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for RichEditClipboardFormat {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.RichEditClipboardFormat;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ScrollBarVisibility(pub i32);
impl ScrollBarVisibility {
    pub const Disabled: Self = Self(0i32);
    pub const Auto: Self = Self(1i32);
    pub const Hidden: Self = Self(2i32);
    pub const Visible: Self = Self(3i32);
}
impl ::core::marker::Copy for ScrollBarVisibility {}
impl ::core::clone::Clone for ScrollBarVisibility {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ScrollBarVisibility {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ScrollBarVisibility {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ScrollBarVisibility {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ScrollBarVisibility").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ScrollBarVisibility {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.ScrollBarVisibility;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ScrollIntoViewAlignment(pub i32);
impl ScrollIntoViewAlignment {
    pub const Default: Self = Self(0i32);
    pub const Leading: Self = Self(1i32);
}
impl ::core::marker::Copy for ScrollIntoViewAlignment {}
impl ::core::clone::Clone for ScrollIntoViewAlignment {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ScrollIntoViewAlignment {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ScrollIntoViewAlignment {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ScrollIntoViewAlignment {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ScrollIntoViewAlignment").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ScrollIntoViewAlignment {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.ScrollIntoViewAlignment;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ScrollMode(pub i32);
impl ScrollMode {
    pub const Disabled: Self = Self(0i32);
    pub const Enabled: Self = Self(1i32);
    pub const Auto: Self = Self(2i32);
}
impl ::core::marker::Copy for ScrollMode {}
impl ::core::clone::Clone for ScrollMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ScrollMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ScrollMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ScrollMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ScrollMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ScrollMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.ScrollMode;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct SelectionMode(pub i32);
impl SelectionMode {
    pub const Single: Self = Self(0i32);
    pub const Multiple: Self = Self(1i32);
    pub const Extended: Self = Self(2i32);
}
impl ::core::marker::Copy for SelectionMode {}
impl ::core::clone::Clone for SelectionMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for SelectionMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for SelectionMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for SelectionMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SelectionMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SelectionMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.SelectionMode;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct SnapPointsType(pub i32);
impl SnapPointsType {
    pub const None: Self = Self(0i32);
    pub const Optional: Self = Self(1i32);
    pub const Mandatory: Self = Self(2i32);
    pub const OptionalSingle: Self = Self(3i32);
    pub const MandatorySingle: Self = Self(4i32);
}
impl ::core::marker::Copy for SnapPointsType {}
impl ::core::clone::Clone for SnapPointsType {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for SnapPointsType {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for SnapPointsType {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for SnapPointsType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SnapPointsType").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SnapPointsType {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.SnapPointsType;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct SplitViewDisplayMode(pub i32);
impl SplitViewDisplayMode {
    pub const Overlay: Self = Self(0i32);
    pub const Inline: Self = Self(1i32);
    pub const CompactOverlay: Self = Self(2i32);
    pub const CompactInline: Self = Self(3i32);
}
impl ::core::marker::Copy for SplitViewDisplayMode {}
impl ::core::clone::Clone for SplitViewDisplayMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for SplitViewDisplayMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for SplitViewDisplayMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for SplitViewDisplayMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SplitViewDisplayMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SplitViewDisplayMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.SplitViewDisplayMode;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct SplitViewPanePlacement(pub i32);
impl SplitViewPanePlacement {
    pub const Left: Self = Self(0i32);
    pub const Right: Self = Self(1i32);
}
impl ::core::marker::Copy for SplitViewPanePlacement {}
impl ::core::clone::Clone for SplitViewPanePlacement {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for SplitViewPanePlacement {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for SplitViewPanePlacement {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for SplitViewPanePlacement {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SplitViewPanePlacement").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SplitViewPanePlacement {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.SplitViewPanePlacement;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct StretchDirection(pub i32);
impl StretchDirection {
    pub const UpOnly: Self = Self(0i32);
    pub const DownOnly: Self = Self(1i32);
    pub const Both: Self = Self(2i32);
}
impl ::core::marker::Copy for StretchDirection {}
impl ::core::clone::Clone for StretchDirection {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for StretchDirection {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for StretchDirection {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for StretchDirection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("StretchDirection").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for StretchDirection {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.StretchDirection;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct SwipeBehaviorOnInvoked(pub i32);
impl SwipeBehaviorOnInvoked {
    pub const Auto: Self = Self(0i32);
    pub const Close: Self = Self(1i32);
    pub const RemainOpen: Self = Self(2i32);
}
impl ::core::marker::Copy for SwipeBehaviorOnInvoked {}
impl ::core::clone::Clone for SwipeBehaviorOnInvoked {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for SwipeBehaviorOnInvoked {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for SwipeBehaviorOnInvoked {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for SwipeBehaviorOnInvoked {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SwipeBehaviorOnInvoked").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SwipeBehaviorOnInvoked {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.SwipeBehaviorOnInvoked;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct SwipeMode(pub i32);
impl SwipeMode {
    pub const Reveal: Self = Self(0i32);
    pub const Execute: Self = Self(1i32);
}
impl ::core::marker::Copy for SwipeMode {}
impl ::core::clone::Clone for SwipeMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for SwipeMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for SwipeMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for SwipeMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SwipeMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for SwipeMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.SwipeMode;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct Symbol(pub i32);
impl Symbol {
    pub const Previous: Self = Self(57600i32);
    pub const Next: Self = Self(57601i32);
    pub const Play: Self = Self(57602i32);
    pub const Pause: Self = Self(57603i32);
    pub const Edit: Self = Self(57604i32);
    pub const Save: Self = Self(57605i32);
    pub const Clear: Self = Self(57606i32);
    pub const Delete: Self = Self(57607i32);
    pub const Remove: Self = Self(57608i32);
    pub const Add: Self = Self(57609i32);
    pub const Cancel: Self = Self(57610i32);
    pub const Accept: Self = Self(57611i32);
    pub const More: Self = Self(57612i32);
    pub const Redo: Self = Self(57613i32);
    pub const Undo: Self = Self(57614i32);
    pub const Home: Self = Self(57615i32);
    pub const Up: Self = Self(57616i32);
    pub const Forward: Self = Self(57617i32);
    pub const Back: Self = Self(57618i32);
    pub const Favorite: Self = Self(57619i32);
    pub const Camera: Self = Self(57620i32);
    pub const Setting: Self = Self(57621i32);
    pub const Video: Self = Self(57622i32);
    pub const Sync: Self = Self(57623i32);
    pub const Download: Self = Self(57624i32);
    pub const Mail: Self = Self(57625i32);
    pub const Find: Self = Self(57626i32);
    pub const Help: Self = Self(57627i32);
    pub const Upload: Self = Self(57628i32);
    pub const Emoji: Self = Self(57629i32);
    pub const TwoPage: Self = Self(57630i32);
    pub const LeaveChat: Self = Self(57631i32);
    pub const MailForward: Self = Self(57632i32);
    pub const Clock: Self = Self(57633i32);
    pub const Send: Self = Self(57634i32);
    pub const Crop: Self = Self(57635i32);
    pub const RotateCamera: Self = Self(57636i32);
    pub const People: Self = Self(57637i32);
    pub const OpenPane: Self = Self(57638i32);
    pub const ClosePane: Self = Self(57639i32);
    pub const World: Self = Self(57640i32);
    pub const Flag: Self = Self(57641i32);
    pub const PreviewLink: Self = Self(57642i32);
    pub const Globe: Self = Self(57643i32);
    pub const Trim: Self = Self(57644i32);
    pub const AttachCamera: Self = Self(57645i32);
    pub const ZoomIn: Self = Self(57646i32);
    pub const Bookmarks: Self = Self(57647i32);
    pub const Document: Self = Self(57648i32);
    pub const ProtectedDocument: Self = Self(57649i32);
    pub const Page: Self = Self(57650i32);
    pub const Bullets: Self = Self(57651i32);
    pub const Comment: Self = Self(57652i32);
    pub const MailFilled: Self = Self(57653i32);
    pub const ContactInfo: Self = Self(57654i32);
    pub const HangUp: Self = Self(57655i32);
    pub const ViewAll: Self = Self(57656i32);
    pub const MapPin: Self = Self(57657i32);
    pub const Phone: Self = Self(57658i32);
    pub const VideoChat: Self = Self(57659i32);
    pub const Switch: Self = Self(57660i32);
    pub const Contact: Self = Self(57661i32);
    pub const Rename: Self = Self(57662i32);
    pub const Pin: Self = Self(57665i32);
    pub const MusicInfo: Self = Self(57666i32);
    pub const Go: Self = Self(57667i32);
    pub const Keyboard: Self = Self(57668i32);
    pub const DockLeft: Self = Self(57669i32);
    pub const DockRight: Self = Self(57670i32);
    pub const DockBottom: Self = Self(57671i32);
    pub const Remote: Self = Self(57672i32);
    pub const Refresh: Self = Self(57673i32);
    pub const Rotate: Self = Self(57674i32);
    pub const Shuffle: Self = Self(57675i32);
    pub const List: Self = Self(57676i32);
    pub const Shop: Self = Self(57677i32);
    pub const SelectAll: Self = Self(57678i32);
    pub const Orientation: Self = Self(57679i32);
    pub const Import: Self = Self(57680i32);
    pub const ImportAll: Self = Self(57681i32);
    pub const BrowsePhotos: Self = Self(57685i32);
    pub const WebCam: Self = Self(57686i32);
    pub const Pictures: Self = Self(57688i32);
    pub const SaveLocal: Self = Self(57689i32);
    pub const Caption: Self = Self(57690i32);
    pub const Stop: Self = Self(57691i32);
    pub const ShowResults: Self = Self(57692i32);
    pub const Volume: Self = Self(57693i32);
    pub const Repair: Self = Self(57694i32);
    pub const Message: Self = Self(57695i32);
    pub const Page2: Self = Self(57696i32);
    pub const CalendarDay: Self = Self(57697i32);
    pub const CalendarWeek: Self = Self(57698i32);
    pub const Calendar: Self = Self(57699i32);
    pub const Character: Self = Self(57700i32);
    pub const MailReplyAll: Self = Self(57701i32);
    pub const Read: Self = Self(57702i32);
    pub const Link: Self = Self(57703i32);
    pub const Account: Self = Self(57704i32);
    pub const ShowBcc: Self = Self(57705i32);
    pub const HideBcc: Self = Self(57706i32);
    pub const Cut: Self = Self(57707i32);
    pub const Attach: Self = Self(57708i32);
    pub const Paste: Self = Self(57709i32);
    pub const Filter: Self = Self(57710i32);
    pub const Copy: Self = Self(57711i32);
    pub const Emoji2: Self = Self(57712i32);
    pub const Important: Self = Self(57713i32);
    pub const MailReply: Self = Self(57714i32);
    pub const SlideShow: Self = Self(57715i32);
    pub const Sort: Self = Self(57716i32);
    pub const Manage: Self = Self(57720i32);
    pub const AllApps: Self = Self(57721i32);
    pub const DisconnectDrive: Self = Self(57722i32);
    pub const MapDrive: Self = Self(57723i32);
    pub const NewWindow: Self = Self(57724i32);
    pub const OpenWith: Self = Self(57725i32);
    pub const ContactPresence: Self = Self(57729i32);
    pub const Priority: Self = Self(57730i32);
    pub const GoToToday: Self = Self(57732i32);
    pub const Font: Self = Self(57733i32);
    pub const FontColor: Self = Self(57734i32);
    pub const Contact2: Self = Self(57735i32);
    pub const Folder: Self = Self(57736i32);
    pub const Audio: Self = Self(57737i32);
    pub const Placeholder: Self = Self(57738i32);
    pub const View: Self = Self(57739i32);
    pub const SetLockScreen: Self = Self(57740i32);
    pub const SetTile: Self = Self(57741i32);
    pub const ClosedCaption: Self = Self(57744i32);
    pub const StopSlideShow: Self = Self(57745i32);
    pub const Permissions: Self = Self(57746i32);
    pub const Highlight: Self = Self(57747i32);
    pub const DisableUpdates: Self = Self(57748i32);
    pub const UnFavorite: Self = Self(57749i32);
    pub const UnPin: Self = Self(57750i32);
    pub const OpenLocal: Self = Self(57751i32);
    pub const Mute: Self = Self(57752i32);
    pub const Italic: Self = Self(57753i32);
    pub const Underline: Self = Self(57754i32);
    pub const Bold: Self = Self(57755i32);
    pub const MoveToFolder: Self = Self(57756i32);
    pub const LikeDislike: Self = Self(57757i32);
    pub const Dislike: Self = Self(57758i32);
    pub const Like: Self = Self(57759i32);
    pub const AlignRight: Self = Self(57760i32);
    pub const AlignCenter: Self = Self(57761i32);
    pub const AlignLeft: Self = Self(57762i32);
    pub const Zoom: Self = Self(57763i32);
    pub const ZoomOut: Self = Self(57764i32);
    pub const OpenFile: Self = Self(57765i32);
    pub const OtherUser: Self = Self(57766i32);
    pub const Admin: Self = Self(57767i32);
    pub const Street: Self = Self(57795i32);
    pub const Map: Self = Self(57796i32);
    pub const ClearSelection: Self = Self(57797i32);
    pub const FontDecrease: Self = Self(57798i32);
    pub const FontIncrease: Self = Self(57799i32);
    pub const FontSize: Self = Self(57800i32);
    pub const CellPhone: Self = Self(57801i32);
    pub const ReShare: Self = Self(57802i32);
    pub const Tag: Self = Self(57803i32);
    pub const RepeatOne: Self = Self(57804i32);
    pub const RepeatAll: Self = Self(57805i32);
    pub const OutlineStar: Self = Self(57806i32);
    pub const SolidStar: Self = Self(57807i32);
    pub const Calculator: Self = Self(57808i32);
    pub const Directions: Self = Self(57809i32);
    pub const Target: Self = Self(57810i32);
    pub const Library: Self = Self(57811i32);
    pub const PhoneBook: Self = Self(57812i32);
    pub const Memo: Self = Self(57813i32);
    pub const Microphone: Self = Self(57814i32);
    pub const PostUpdate: Self = Self(57815i32);
    pub const BackToWindow: Self = Self(57816i32);
    pub const FullScreen: Self = Self(57817i32);
    pub const NewFolder: Self = Self(57818i32);
    pub const CalendarReply: Self = Self(57819i32);
    pub const UnSyncFolder: Self = Self(57821i32);
    pub const ReportHacked: Self = Self(57822i32);
    pub const SyncFolder: Self = Self(57823i32);
    pub const BlockContact: Self = Self(57824i32);
    pub const SwitchApps: Self = Self(57825i32);
    pub const AddFriend: Self = Self(57826i32);
    pub const TouchPointer: Self = Self(57827i32);
    pub const GoToStart: Self = Self(57828i32);
    pub const ZeroBars: Self = Self(57829i32);
    pub const OneBar: Self = Self(57830i32);
    pub const TwoBars: Self = Self(57831i32);
    pub const ThreeBars: Self = Self(57832i32);
    pub const FourBars: Self = Self(57833i32);
    pub const Scan: Self = Self(58004i32);
    pub const Preview: Self = Self(58005i32);
    pub const GlobalNavigationButton: Self = Self(59136i32);
    pub const Share: Self = Self(59181i32);
    pub const Print: Self = Self(59209i32);
    pub const XboxOneConsole: Self = Self(59792i32);
}
impl ::core::marker::Copy for Symbol {}
impl ::core::clone::Clone for Symbol {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Symbol {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for Symbol {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for Symbol {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Symbol").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for Symbol {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.Symbol;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct TreeViewSelectionMode(pub i32);
impl TreeViewSelectionMode {
    pub const None: Self = Self(0i32);
    pub const Single: Self = Self(1i32);
    pub const Multiple: Self = Self(2i32);
}
impl ::core::marker::Copy for TreeViewSelectionMode {}
impl ::core::clone::Clone for TreeViewSelectionMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for TreeViewSelectionMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for TreeViewSelectionMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for TreeViewSelectionMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TreeViewSelectionMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TreeViewSelectionMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.TreeViewSelectionMode;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct TwoPaneViewMode(pub i32);
impl TwoPaneViewMode {
    pub const SinglePane: Self = Self(0i32);
    pub const Wide: Self = Self(1i32);
    pub const Tall: Self = Self(2i32);
}
impl ::core::marker::Copy for TwoPaneViewMode {}
impl ::core::clone::Clone for TwoPaneViewMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for TwoPaneViewMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for TwoPaneViewMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for TwoPaneViewMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TwoPaneViewMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TwoPaneViewMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.TwoPaneViewMode;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct TwoPaneViewPriority(pub i32);
impl TwoPaneViewPriority {
    pub const Pane1: Self = Self(0i32);
    pub const Pane2: Self = Self(1i32);
}
impl ::core::marker::Copy for TwoPaneViewPriority {}
impl ::core::clone::Clone for TwoPaneViewPriority {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for TwoPaneViewPriority {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for TwoPaneViewPriority {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for TwoPaneViewPriority {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TwoPaneViewPriority").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TwoPaneViewPriority {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.TwoPaneViewPriority;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct TwoPaneViewTallModeConfiguration(pub i32);
impl TwoPaneViewTallModeConfiguration {
    pub const SinglePane: Self = Self(0i32);
    pub const TopBottom: Self = Self(1i32);
    pub const BottomTop: Self = Self(2i32);
}
impl ::core::marker::Copy for TwoPaneViewTallModeConfiguration {}
impl ::core::clone::Clone for TwoPaneViewTallModeConfiguration {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for TwoPaneViewTallModeConfiguration {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for TwoPaneViewTallModeConfiguration {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for TwoPaneViewTallModeConfiguration {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TwoPaneViewTallModeConfiguration").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TwoPaneViewTallModeConfiguration {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.TwoPaneViewTallModeConfiguration;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct TwoPaneViewWideModeConfiguration(pub i32);
impl TwoPaneViewWideModeConfiguration {
    pub const SinglePane: Self = Self(0i32);
    pub const LeftRight: Self = Self(1i32);
    pub const RightLeft: Self = Self(2i32);
}
impl ::core::marker::Copy for TwoPaneViewWideModeConfiguration {}
impl ::core::clone::Clone for TwoPaneViewWideModeConfiguration {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for TwoPaneViewWideModeConfiguration {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for TwoPaneViewWideModeConfiguration {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for TwoPaneViewWideModeConfiguration {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TwoPaneViewWideModeConfiguration").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TwoPaneViewWideModeConfiguration {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.TwoPaneViewWideModeConfiguration;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct VirtualizationMode(pub i32);
impl VirtualizationMode {
    pub const Standard: Self = Self(0i32);
    pub const Recycling: Self = Self(1i32);
}
impl ::core::marker::Copy for VirtualizationMode {}
impl ::core::clone::Clone for VirtualizationMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for VirtualizationMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for VirtualizationMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for VirtualizationMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("VirtualizationMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for VirtualizationMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.VirtualizationMode;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct WebViewExecutionMode(pub i32);
impl WebViewExecutionMode {
    pub const SameThread: Self = Self(0i32);
    pub const SeparateThread: Self = Self(1i32);
    pub const SeparateProcess: Self = Self(2i32);
}
impl ::core::marker::Copy for WebViewExecutionMode {}
impl ::core::clone::Clone for WebViewExecutionMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for WebViewExecutionMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for WebViewExecutionMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for WebViewExecutionMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WebViewExecutionMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for WebViewExecutionMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.WebViewExecutionMode;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct WebViewPermissionState(pub i32);
impl WebViewPermissionState {
    pub const Unknown: Self = Self(0i32);
    pub const Defer: Self = Self(1i32);
    pub const Allow: Self = Self(2i32);
    pub const Deny: Self = Self(3i32);
}
impl ::core::marker::Copy for WebViewPermissionState {}
impl ::core::clone::Clone for WebViewPermissionState {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for WebViewPermissionState {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for WebViewPermissionState {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for WebViewPermissionState {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WebViewPermissionState").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for WebViewPermissionState {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.WebViewPermissionState;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct WebViewPermissionType(pub i32);
impl WebViewPermissionType {
    pub const Geolocation: Self = Self(0i32);
    pub const UnlimitedIndexedDBQuota: Self = Self(1i32);
    pub const Media: Self = Self(2i32);
    pub const PointerLock: Self = Self(3i32);
    pub const WebNotifications: Self = Self(4i32);
    pub const Screen: Self = Self(5i32);
    pub const ImmersiveView: Self = Self(6i32);
}
impl ::core::marker::Copy for WebViewPermissionType {}
impl ::core::clone::Clone for WebViewPermissionType {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for WebViewPermissionType {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for WebViewPermissionType {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for WebViewPermissionType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WebViewPermissionType").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for WebViewPermissionType {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.WebViewPermissionType;i4)",
    );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ZoomMode(pub i32);
impl ZoomMode {
    pub const Disabled: Self = Self(0i32);
    pub const Enabled: Self = Self(1i32);
}
impl ::core::marker::Copy for ZoomMode {}
impl ::core::clone::Clone for ZoomMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ZoomMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ZoomMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ZoomMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ZoomMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ZoomMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"enum(Windows.UI.Xaml.Controls.ZoomMode;i4)",
    );
}
#[repr(transparent)]
pub struct BackClickEventHandler(pub ::windows_core::IUnknown);
impl BackClickEventHandler {}
#[repr(C)]
struct BackClickEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&BackClickEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> {
    vtable: *const BackClickEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
#[allow(dead_code)]
impl<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&BackClickEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> BackClickEventHandlerBox<F> {
    const VTABLE: BackClickEventHandler_Vtbl = BackClickEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: &::windows_core::GUID,
        interface: *mut *const ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        *interface = if iid
            == &<BackClickEventHandler as ::windows_core::ComInterface>::IID
            || iid == &<::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || iid
                == &<::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this)
            .invoke)(
                ::windows_core::from_raw_borrowed(&sender),
                ::windows_core::from_raw_borrowed(&e),
            )
            .into()
    }
}
impl ::core::cmp::PartialEq for BackClickEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for BackClickEventHandler {}
impl ::core::fmt::Debug for BackClickEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BackClickEventHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for BackClickEventHandler {
    type Vtable = BackClickEventHandler_Vtbl;
}
impl ::core::clone::Clone for BackClickEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for BackClickEventHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xfa9bc21f_9892_482e_abf6_eb2d607d32de,
    );
}
impl ::windows_core::RuntimeType for BackClickEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{fa9bc21f-9892-482e-abf6-eb2d607d32de}",
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct BackClickEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct CalendarViewDayItemChangingEventHandler(pub ::windows_core::IUnknown);
impl CalendarViewDayItemChangingEventHandler {}
#[repr(C)]
struct CalendarViewDayItemChangingEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&CalendarView>,
            ::core::option::Option<&CalendarViewDayItemChangingEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> {
    vtable: *const CalendarViewDayItemChangingEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
#[allow(dead_code)]
impl<
    F: FnMut(
            ::core::option::Option<&CalendarView>,
            ::core::option::Option<&CalendarViewDayItemChangingEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> CalendarViewDayItemChangingEventHandlerBox<F> {
    const VTABLE: CalendarViewDayItemChangingEventHandler_Vtbl = CalendarViewDayItemChangingEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: &::windows_core::GUID,
        interface: *mut *const ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        *interface = if iid
            == &<CalendarViewDayItemChangingEventHandler as ::windows_core::ComInterface>::IID
            || iid == &<::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || iid
                == &<::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this)
            .invoke)(
                ::windows_core::from_raw_borrowed(&sender),
                ::windows_core::from_raw_borrowed(&e),
            )
            .into()
    }
}
impl ::core::cmp::PartialEq for CalendarViewDayItemChangingEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CalendarViewDayItemChangingEventHandler {}
impl ::core::fmt::Debug for CalendarViewDayItemChangingEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CalendarViewDayItemChangingEventHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for CalendarViewDayItemChangingEventHandler {
    type Vtable = CalendarViewDayItemChangingEventHandler_Vtbl;
}
impl ::core::clone::Clone for CalendarViewDayItemChangingEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for CalendarViewDayItemChangingEventHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8d745891_4de3_49cb_974b_083871a3afe6,
    );
}
impl ::windows_core::RuntimeType for CalendarViewDayItemChangingEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{8d745891-4de3-49cb-974b-083871a3afe6}",
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct CalendarViewDayItemChangingEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct CleanUpVirtualizedItemEventHandler(pub ::windows_core::IUnknown);
impl CleanUpVirtualizedItemEventHandler {}
#[repr(C)]
struct CleanUpVirtualizedItemEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&CleanUpVirtualizedItemEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> {
    vtable: *const CleanUpVirtualizedItemEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
#[allow(dead_code)]
impl<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&CleanUpVirtualizedItemEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> CleanUpVirtualizedItemEventHandlerBox<F> {
    const VTABLE: CleanUpVirtualizedItemEventHandler_Vtbl = CleanUpVirtualizedItemEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: &::windows_core::GUID,
        interface: *mut *const ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        *interface = if iid
            == &<CleanUpVirtualizedItemEventHandler as ::windows_core::ComInterface>::IID
            || iid == &<::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || iid
                == &<::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this)
            .invoke)(
                ::windows_core::from_raw_borrowed(&sender),
                ::windows_core::from_raw_borrowed(&e),
            )
            .into()
    }
}
impl ::core::cmp::PartialEq for CleanUpVirtualizedItemEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CleanUpVirtualizedItemEventHandler {}
impl ::core::fmt::Debug for CleanUpVirtualizedItemEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CleanUpVirtualizedItemEventHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for CleanUpVirtualizedItemEventHandler {
    type Vtable = CleanUpVirtualizedItemEventHandler_Vtbl;
}
impl ::core::clone::Clone for CleanUpVirtualizedItemEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for CleanUpVirtualizedItemEventHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xcacad0d6_0f0d_4870_884d_f2dedf674288,
    );
}
impl ::windows_core::RuntimeType for CleanUpVirtualizedItemEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{cacad0d6-0f0d-4870-884d-f2dedf674288}",
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct CleanUpVirtualizedItemEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct ContextMenuOpeningEventHandler(pub ::windows_core::IUnknown);
impl ContextMenuOpeningEventHandler {}
#[repr(C)]
struct ContextMenuOpeningEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&ContextMenuEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> {
    vtable: *const ContextMenuOpeningEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
#[allow(dead_code)]
impl<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&ContextMenuEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> ContextMenuOpeningEventHandlerBox<F> {
    const VTABLE: ContextMenuOpeningEventHandler_Vtbl = ContextMenuOpeningEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: &::windows_core::GUID,
        interface: *mut *const ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        *interface = if iid
            == &<ContextMenuOpeningEventHandler as ::windows_core::ComInterface>::IID
            || iid == &<::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || iid
                == &<::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this)
            .invoke)(
                ::windows_core::from_raw_borrowed(&sender),
                ::windows_core::from_raw_borrowed(&e),
            )
            .into()
    }
}
impl ::core::cmp::PartialEq for ContextMenuOpeningEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ContextMenuOpeningEventHandler {}
impl ::core::fmt::Debug for ContextMenuOpeningEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ContextMenuOpeningEventHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ContextMenuOpeningEventHandler {
    type Vtable = ContextMenuOpeningEventHandler_Vtbl;
}
impl ::core::clone::Clone for ContextMenuOpeningEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ContextMenuOpeningEventHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xdf945151_745c_4446_b2fc_216d765847a0,
    );
}
impl ::windows_core::RuntimeType for ContextMenuOpeningEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{df945151-745c-4446-b2fc-216d765847a0}",
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ContextMenuOpeningEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct DragItemsStartingEventHandler(pub ::windows_core::IUnknown);
impl DragItemsStartingEventHandler {}
#[repr(C)]
struct DragItemsStartingEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&DragItemsStartingEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> {
    vtable: *const DragItemsStartingEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
#[allow(dead_code)]
impl<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&DragItemsStartingEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> DragItemsStartingEventHandlerBox<F> {
    const VTABLE: DragItemsStartingEventHandler_Vtbl = DragItemsStartingEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: &::windows_core::GUID,
        interface: *mut *const ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        *interface = if iid
            == &<DragItemsStartingEventHandler as ::windows_core::ComInterface>::IID
            || iid == &<::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || iid
                == &<::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this)
            .invoke)(
                ::windows_core::from_raw_borrowed(&sender),
                ::windows_core::from_raw_borrowed(&e),
            )
            .into()
    }
}
impl ::core::cmp::PartialEq for DragItemsStartingEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DragItemsStartingEventHandler {}
impl ::core::fmt::Debug for DragItemsStartingEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DragItemsStartingEventHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for DragItemsStartingEventHandler {
    type Vtable = DragItemsStartingEventHandler_Vtbl;
}
impl ::core::clone::Clone for DragItemsStartingEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for DragItemsStartingEventHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3aaeab4c_14cb_4434_becc_88a8585c2f89,
    );
}
impl ::windows_core::RuntimeType for DragItemsStartingEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{3aaeab4c-14cb-4434-becc-88a8585c2f89}",
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct DragItemsStartingEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct HubSectionHeaderClickEventHandler(pub ::windows_core::IUnknown);
impl HubSectionHeaderClickEventHandler {}
#[repr(C)]
struct HubSectionHeaderClickEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&HubSectionHeaderClickEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> {
    vtable: *const HubSectionHeaderClickEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
#[allow(dead_code)]
impl<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&HubSectionHeaderClickEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> HubSectionHeaderClickEventHandlerBox<F> {
    const VTABLE: HubSectionHeaderClickEventHandler_Vtbl = HubSectionHeaderClickEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: &::windows_core::GUID,
        interface: *mut *const ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        *interface = if iid
            == &<HubSectionHeaderClickEventHandler as ::windows_core::ComInterface>::IID
            || iid == &<::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || iid
                == &<::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this)
            .invoke)(
                ::windows_core::from_raw_borrowed(&sender),
                ::windows_core::from_raw_borrowed(&e),
            )
            .into()
    }
}
impl ::core::cmp::PartialEq for HubSectionHeaderClickEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for HubSectionHeaderClickEventHandler {}
impl ::core::fmt::Debug for HubSectionHeaderClickEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("HubSectionHeaderClickEventHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for HubSectionHeaderClickEventHandler {
    type Vtable = HubSectionHeaderClickEventHandler_Vtbl;
}
impl ::core::clone::Clone for HubSectionHeaderClickEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for HubSectionHeaderClickEventHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xafe17b9b_9c63_4583_88e4_c59019b7f49d,
    );
}
impl ::windows_core::RuntimeType for HubSectionHeaderClickEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{afe17b9b-9c63-4583-88e4-c59019b7f49d}",
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct HubSectionHeaderClickEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct ItemClickEventHandler(pub ::windows_core::IUnknown);
impl ItemClickEventHandler {}
#[repr(C)]
struct ItemClickEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&ItemClickEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> {
    vtable: *const ItemClickEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
#[allow(dead_code)]
impl<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&ItemClickEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> ItemClickEventHandlerBox<F> {
    const VTABLE: ItemClickEventHandler_Vtbl = ItemClickEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: &::windows_core::GUID,
        interface: *mut *const ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        *interface = if iid
            == &<ItemClickEventHandler as ::windows_core::ComInterface>::IID
            || iid == &<::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || iid
                == &<::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this)
            .invoke)(
                ::windows_core::from_raw_borrowed(&sender),
                ::windows_core::from_raw_borrowed(&e),
            )
            .into()
    }
}
impl ::core::cmp::PartialEq for ItemClickEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ItemClickEventHandler {}
impl ::core::fmt::Debug for ItemClickEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ItemClickEventHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ItemClickEventHandler {
    type Vtable = ItemClickEventHandler_Vtbl;
}
impl ::core::clone::Clone for ItemClickEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ItemClickEventHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x3df6d14e_e18a_4a75_9395_627c5f3cd489,
    );
}
impl ::windows_core::RuntimeType for ItemClickEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{3df6d14e-e18a-4a75-9395-627c5f3cd489}",
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ItemClickEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct ListViewItemToKeyHandler(pub ::windows_core::IUnknown);
impl ListViewItemToKeyHandler {}
#[repr(C)]
struct ListViewItemToKeyHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
        ) -> ::windows_core::Result<::windows_core::HSTRING> + ::core::marker::Send
        + 'static,
> {
    vtable: *const ListViewItemToKeyHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
#[allow(dead_code)]
impl<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
        ) -> ::windows_core::Result<::windows_core::HSTRING> + ::core::marker::Send
        + 'static,
> ListViewItemToKeyHandlerBox<F> {
    const VTABLE: ListViewItemToKeyHandler_Vtbl = ListViewItemToKeyHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: &::windows_core::GUID,
        interface: *mut *const ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        *interface = if iid
            == &<ListViewItemToKeyHandler as ::windows_core::ComInterface>::IID
            || iid == &<::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || iid
                == &<::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        item: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        match ((*this).invoke)(::windows_core::from_raw_borrowed(&item)) {
            ::core::result::Result::Ok(ok__) => {
                ::core::ptr::write(result__, ::core::mem::transmute_copy(&ok__));
                ::core::mem::forget(ok__);
                ::windows_core::HRESULT(0)
            }
            ::core::result::Result::Err(err) => err.into(),
        }
    }
}
impl ::core::cmp::PartialEq for ListViewItemToKeyHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ListViewItemToKeyHandler {}
impl ::core::fmt::Debug for ListViewItemToKeyHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ListViewItemToKeyHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ListViewItemToKeyHandler {
    type Vtable = ListViewItemToKeyHandler_Vtbl;
}
impl ::core::clone::Clone for ListViewItemToKeyHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ListViewItemToKeyHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6af5da76_7e8b_4a91_9a56_460cb47d523f,
    );
}
impl ::windows_core::RuntimeType for ListViewItemToKeyHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{6af5da76-7e8b-4a91-9a56-460cb47d523f}",
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ListViewItemToKeyHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        item: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct ListViewKeyToItemHandler(pub ::windows_core::IUnknown);
impl ListViewKeyToItemHandler {}
#[repr(C)]
struct ListViewKeyToItemHandlerBox<
    F: FnMut(
            &::windows_core::HSTRING,
        ) -> ::windows_core::Result<
                super::super::super::Foundation::IAsyncOperation<
                    ::windows_core::IInspectable,
                >,
            > + ::core::marker::Send + 'static,
> {
    vtable: *const ListViewKeyToItemHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
#[allow(dead_code)]
impl<
    F: FnMut(
            &::windows_core::HSTRING,
        ) -> ::windows_core::Result<
                super::super::super::Foundation::IAsyncOperation<
                    ::windows_core::IInspectable,
                >,
            > + ::core::marker::Send + 'static,
> ListViewKeyToItemHandlerBox<F> {
    const VTABLE: ListViewKeyToItemHandler_Vtbl = ListViewKeyToItemHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: &::windows_core::GUID,
        interface: *mut *const ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        *interface = if iid
            == &<ListViewKeyToItemHandler as ::windows_core::ComInterface>::IID
            || iid == &<::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || iid
                == &<::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        key: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        match ((*this).invoke)(::core::mem::transmute(&key)) {
            ::core::result::Result::Ok(ok__) => {
                ::core::ptr::write(result__, ::core::mem::transmute_copy(&ok__));
                ::core::mem::forget(ok__);
                ::windows_core::HRESULT(0)
            }
            ::core::result::Result::Err(err) => err.into(),
        }
    }
}
impl ::core::cmp::PartialEq for ListViewKeyToItemHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ListViewKeyToItemHandler {}
impl ::core::fmt::Debug for ListViewKeyToItemHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ListViewKeyToItemHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ListViewKeyToItemHandler {
    type Vtable = ListViewKeyToItemHandler_Vtbl;
}
impl ::core::clone::Clone for ListViewKeyToItemHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ListViewKeyToItemHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x26fd5855_b530_4688_b9f0_428249178ef8,
    );
}
impl ::windows_core::RuntimeType for ListViewKeyToItemHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{26fd5855-b530-4688-b9f0-428249178ef8}",
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ListViewKeyToItemHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        key: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct NotifyEventHandler(pub ::windows_core::IUnknown);
impl NotifyEventHandler {}
#[repr(C)]
struct NotifyEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&NotifyEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> {
    vtable: *const NotifyEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
#[allow(dead_code)]
impl<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&NotifyEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> NotifyEventHandlerBox<F> {
    const VTABLE: NotifyEventHandler_Vtbl = NotifyEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: &::windows_core::GUID,
        interface: *mut *const ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        *interface = if iid == &<NotifyEventHandler as ::windows_core::ComInterface>::IID
            || iid == &<::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || iid
                == &<::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this)
            .invoke)(
                ::windows_core::from_raw_borrowed(&sender),
                ::windows_core::from_raw_borrowed(&e),
            )
            .into()
    }
}
impl ::core::cmp::PartialEq for NotifyEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for NotifyEventHandler {}
impl ::core::fmt::Debug for NotifyEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NotifyEventHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for NotifyEventHandler {
    type Vtable = NotifyEventHandler_Vtbl;
}
impl ::core::clone::Clone for NotifyEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for NotifyEventHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xc2fdd1f8_7105_4a74_a109_de29dff56b98,
    );
}
impl ::windows_core::RuntimeType for NotifyEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{c2fdd1f8-7105-4a74-a109-de29dff56b98}",
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct NotifyEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct SectionsInViewChangedEventHandler(pub ::windows_core::IUnknown);
impl SectionsInViewChangedEventHandler {}
#[repr(C)]
struct SectionsInViewChangedEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&SectionsInViewChangedEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> {
    vtable: *const SectionsInViewChangedEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
#[allow(dead_code)]
impl<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&SectionsInViewChangedEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> SectionsInViewChangedEventHandlerBox<F> {
    const VTABLE: SectionsInViewChangedEventHandler_Vtbl = SectionsInViewChangedEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: &::windows_core::GUID,
        interface: *mut *const ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        *interface = if iid
            == &<SectionsInViewChangedEventHandler as ::windows_core::ComInterface>::IID
            || iid == &<::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || iid
                == &<::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this)
            .invoke)(
                ::windows_core::from_raw_borrowed(&sender),
                ::windows_core::from_raw_borrowed(&e),
            )
            .into()
    }
}
impl ::core::cmp::PartialEq for SectionsInViewChangedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SectionsInViewChangedEventHandler {}
impl ::core::fmt::Debug for SectionsInViewChangedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SectionsInViewChangedEventHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for SectionsInViewChangedEventHandler {
    type Vtable = SectionsInViewChangedEventHandler_Vtbl;
}
impl ::core::clone::Clone for SectionsInViewChangedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for SectionsInViewChangedEventHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x6becaa6a_63f8_47ff_b6ac_76e7da247d67,
    );
}
impl ::windows_core::RuntimeType for SectionsInViewChangedEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{6becaa6a-63f8-47ff-b6ac-76e7da247d67}",
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct SectionsInViewChangedEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct SelectionChangedEventHandler(pub ::windows_core::IUnknown);
impl SelectionChangedEventHandler {}
#[repr(C)]
struct SelectionChangedEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&SelectionChangedEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> {
    vtable: *const SelectionChangedEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
#[allow(dead_code)]
impl<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&SelectionChangedEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> SelectionChangedEventHandlerBox<F> {
    const VTABLE: SelectionChangedEventHandler_Vtbl = SelectionChangedEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: &::windows_core::GUID,
        interface: *mut *const ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        *interface = if iid
            == &<SelectionChangedEventHandler as ::windows_core::ComInterface>::IID
            || iid == &<::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || iid
                == &<::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this)
            .invoke)(
                ::windows_core::from_raw_borrowed(&sender),
                ::windows_core::from_raw_borrowed(&e),
            )
            .into()
    }
}
impl ::core::cmp::PartialEq for SelectionChangedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SelectionChangedEventHandler {}
impl ::core::fmt::Debug for SelectionChangedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SelectionChangedEventHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for SelectionChangedEventHandler {
    type Vtable = SelectionChangedEventHandler_Vtbl;
}
impl ::core::clone::Clone for SelectionChangedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for SelectionChangedEventHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xe1a05352_5aa0_42ca_9cd9_068a14db6e68,
    );
}
impl ::windows_core::RuntimeType for SelectionChangedEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{e1a05352-5aa0-42ca-9cd9-068a14db6e68}",
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct SelectionChangedEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct SemanticZoomViewChangedEventHandler(pub ::windows_core::IUnknown);
impl SemanticZoomViewChangedEventHandler {}
#[repr(C)]
struct SemanticZoomViewChangedEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&SemanticZoomViewChangedEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> {
    vtable: *const SemanticZoomViewChangedEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
#[allow(dead_code)]
impl<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&SemanticZoomViewChangedEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> SemanticZoomViewChangedEventHandlerBox<F> {
    const VTABLE: SemanticZoomViewChangedEventHandler_Vtbl = SemanticZoomViewChangedEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: &::windows_core::GUID,
        interface: *mut *const ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        *interface = if iid
            == &<SemanticZoomViewChangedEventHandler as ::windows_core::ComInterface>::IID
            || iid == &<::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || iid
                == &<::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this)
            .invoke)(
                ::windows_core::from_raw_borrowed(&sender),
                ::windows_core::from_raw_borrowed(&e),
            )
            .into()
    }
}
impl ::core::cmp::PartialEq for SemanticZoomViewChangedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SemanticZoomViewChangedEventHandler {}
impl ::core::fmt::Debug for SemanticZoomViewChangedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SemanticZoomViewChangedEventHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for SemanticZoomViewChangedEventHandler {
    type Vtable = SemanticZoomViewChangedEventHandler_Vtbl;
}
impl ::core::clone::Clone for SemanticZoomViewChangedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for SemanticZoomViewChangedEventHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x1fa9161d_5d73_44fb_81ac_d1c9384919d4,
    );
}
impl ::windows_core::RuntimeType for SemanticZoomViewChangedEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{1fa9161d-5d73-44fb-81ac-d1c9384919d4}",
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct SemanticZoomViewChangedEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct TextChangedEventHandler(pub ::windows_core::IUnknown);
impl TextChangedEventHandler {}
#[repr(C)]
struct TextChangedEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&TextChangedEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> {
    vtable: *const TextChangedEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
#[allow(dead_code)]
impl<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&TextChangedEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> TextChangedEventHandlerBox<F> {
    const VTABLE: TextChangedEventHandler_Vtbl = TextChangedEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: &::windows_core::GUID,
        interface: *mut *const ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        *interface = if iid
            == &<TextChangedEventHandler as ::windows_core::ComInterface>::IID
            || iid == &<::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || iid
                == &<::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this)
            .invoke)(
                ::windows_core::from_raw_borrowed(&sender),
                ::windows_core::from_raw_borrowed(&e),
            )
            .into()
    }
}
impl ::core::cmp::PartialEq for TextChangedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TextChangedEventHandler {}
impl ::core::fmt::Debug for TextChangedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TextChangedEventHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for TextChangedEventHandler {
    type Vtable = TextChangedEventHandler_Vtbl;
}
impl ::core::clone::Clone for TextChangedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for TextChangedEventHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0x8eb35b97_ad87_40e8_818b_77db24759566,
    );
}
impl ::windows_core::RuntimeType for TextChangedEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{8eb35b97-ad87-40e8-818b-77db24759566}",
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct TextChangedEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct TextControlPasteEventHandler(pub ::windows_core::IUnknown);
impl TextControlPasteEventHandler {}
#[repr(C)]
struct TextControlPasteEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&TextControlPasteEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> {
    vtable: *const TextControlPasteEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
#[allow(dead_code)]
impl<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&TextControlPasteEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> TextControlPasteEventHandlerBox<F> {
    const VTABLE: TextControlPasteEventHandler_Vtbl = TextControlPasteEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: &::windows_core::GUID,
        interface: *mut *const ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        *interface = if iid
            == &<TextControlPasteEventHandler as ::windows_core::ComInterface>::IID
            || iid == &<::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || iid
                == &<::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this)
            .invoke)(
                ::windows_core::from_raw_borrowed(&sender),
                ::windows_core::from_raw_borrowed(&e),
            )
            .into()
    }
}
impl ::core::cmp::PartialEq for TextControlPasteEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TextControlPasteEventHandler {}
impl ::core::fmt::Debug for TextControlPasteEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TextControlPasteEventHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for TextControlPasteEventHandler {
    type Vtable = TextControlPasteEventHandler_Vtbl;
}
impl ::core::clone::Clone for TextControlPasteEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for TextControlPasteEventHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xd56db359_6f77_4296_ab9c_794939444365,
    );
}
impl ::windows_core::RuntimeType for TextControlPasteEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{d56db359-6f77-4296-ab9c-794939444365}",
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct TextControlPasteEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
pub struct WebViewNavigationFailedEventHandler(pub ::windows_core::IUnknown);
impl WebViewNavigationFailedEventHandler {}
#[repr(C)]
struct WebViewNavigationFailedEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&WebViewNavigationFailedEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> {
    vtable: *const WebViewNavigationFailedEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
#[allow(dead_code)]
impl<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&WebViewNavigationFailedEventArgs>,
        ) -> ::windows_core::Result<()> + ::core::marker::Send + 'static,
> WebViewNavigationFailedEventHandlerBox<F> {
    const VTABLE: WebViewNavigationFailedEventHandler_Vtbl = WebViewNavigationFailedEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: &::windows_core::GUID,
        interface: *mut *const ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        *interface = if iid
            == &<WebViewNavigationFailedEventHandler as ::windows_core::ComInterface>::IID
            || iid == &<::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || iid
                == &<::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this)
            .invoke)(
                ::windows_core::from_raw_borrowed(&sender),
                ::windows_core::from_raw_borrowed(&e),
            )
            .into()
    }
}
impl ::core::cmp::PartialEq for WebViewNavigationFailedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for WebViewNavigationFailedEventHandler {}
impl ::core::fmt::Debug for WebViewNavigationFailedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WebViewNavigationFailedEventHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for WebViewNavigationFailedEventHandler {
    type Vtable = WebViewNavigationFailedEventHandler_Vtbl;
}
impl ::core::clone::Clone for WebViewNavigationFailedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for WebViewNavigationFailedEventHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(
        0xa31eafe1_41dc_47f8_ae22_9706c8f143d4,
    );
}
impl ::windows_core::RuntimeType for WebViewNavigationFailedEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer = ::windows_core::imp::ConstBuffer::from_slice(
        b"{a31eafe1-41dc-47f8-ae22-9706c8f143d4}",
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct WebViewNavigationFailedEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
